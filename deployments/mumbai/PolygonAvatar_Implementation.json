{
  "address": "0x03A07942a27E6e5D8e24e12898bC6317fd167c87",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "DepositBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "MintedBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "WithdrawnBatch",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHILD_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseTokenURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultAdmin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMinLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseUri_",
          "type": "string"
        }
      ],
      "name": "setBaseUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxMintLength",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawnTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8066ea1c5b1862301e157e6d67c6c3caec574a41b4dc729aef2864bb64759a93",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x03A07942a27E6e5D8e24e12898bC6317fd167c87",
    "transactionIndex": 17,
    "gasUsed": "3122387",
    "logsBloom": "0x
    "blockHash": "0xa1669c555c88eaf1ebbfe3eb83c75d44d70cc230e1250a20d71a6296b9093482",
    "transactionHash": "0x8066ea1c5b1862301e157e6d67c6c3caec574a41b4dc729aef2864bb64759a93",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 25989339,
        "transactionHash": "0x8066ea1c5b1862301e157e6d67c6c3caec574a41b4dc729aef2864bb64759a93",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000dddbe37e3cb16800000000000000000000000000000000000000000000000022e75168bce61d1d000000000000000000000000000000000000000000001198fc3bd7dbe37ac98f000000000000000000000000000000000000000000000000220975853ea96bb5000000000000000000000000000000000000000000001198fd19b3bf61b77af7",
        "logIndex": 108,
        "blockHash": "0xa1669c555c88eaf1ebbfe3eb83c75d44d70cc230e1250a20d71a6296b9093482"
      }
    ],
    "blockNumber": 25989339,
    "cumulativeGasUsed": "7214288",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6b48e6b588e999663b82a35ee494a1bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"DepositBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"MintedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawnBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHILD_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultAdmin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMinLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri_\",\"type\":\"string\"}],\"name\":\"setBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintLength\",\"type\":\"uint256\"}],\"name\":\"setMaxMintLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract support meta transactions.Avatar will be minted only on L2 (using the sale contract) and can be transferred to L1 but not minted on L1.This contract is final, don't inherit form it.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"deposit(address,bytes)\":{\"details\":\"Should be callable only by ChildChainManager Should handle deposit by minting the required tokenId(s) for user Should set `withdrawnTokens` mapping to `false` for the tokenId being deposited Minting can also be done by other functions\",\"params\":{\"depositData\":\"abi encoded tokenIds. Batch deposit also supported.\",\"user\":\"user address for whom deposit is being done\"}},\"exists(uint256)\":{\"details\":\"We don't implement {IMintableERC721-exists} but this one is a nice to have.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"maxMinLength()\":{\"details\":\"We don't implement {IMintableERC721-exists} but this one is a nice to have.\"},\"mint(address,uint256)\":{\"details\":\"Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"mintBatch(address,uint256[])\":{\"details\":\"Creates a new token for `to`. Its token IDs will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Puse the contract operation\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseUrl(string)\":{\"details\":\"Change the base url for token metadata\",\"params\":{\"baseUri_\":\"The new base Url.\"}},\"setMaxMintLength(uint256)\":{\"details\":\"Set the maximum number of id that can be minted at once\",\"params\":{\"maxMintLength\":\"maximum number of ids to mint at once\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder_\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. We must implement supportsInterface here because ERC721Upgradeable is not abstract.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"unpause()\":{\"details\":\"unpause the contract operation\"},\"withdraw(uint256)\":{\"params\":{\"tokenId\":\"tokenId of the token to be withdrawn\"}},\"withdrawBatch(uint256[])\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain\",\"params\":{\"tokenIds\":\"tokenId list to withdraw\"}}},\"title\":\"This contract is a erc 721 compatible NFT token that represents an avatar and can be minted by a minter role.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,bytes)\":{\"notice\":\"called when token is deposited on root chain\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw tokens\"},\"withdrawBatch(uint256[])\":{\"notice\":\"called when user wants to withdraw multiple tokens back to root chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol\":\"PolygonAvatar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/avatar/AvatarBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ERC2771Handler} from \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\n\\nabstract contract AvatarBase is\\n    Initializable,\\n    ContextUpgradeable,\\n    AccessControlUpgradeable,\\n    ERC721Upgradeable,\\n    ERC2771Handler,\\n    PausableUpgradeable\\n{\\n    // Just in case.\\n    uint256[50] private __gap1;\\n\\n    bytes32 public constant PAUSE_ROLE = keccak256(\\\"PAUSE_ROLE\\\");\\n    string public baseTokenURI;\\n\\n    function __AvatarBase_init_unchained(address adminRole, string memory baseTokenURI_) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, adminRole);\\n        baseTokenURI = baseTokenURI_;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder_ The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder_) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"must have admin role\\\");\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /// @dev Change the base url for token metadata\\n    /// @param baseUri_ The new base Url.\\n    function setBaseUrl(string calldata baseUri_) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"must have admin role\\\");\\n        baseTokenURI = baseUri_;\\n    }\\n\\n    /// @dev Puse the contract operation\\n    function pause() external {\\n        require(hasRole(PAUSE_ROLE, _msgSender()), \\\"must have pause role\\\");\\n        _pause();\\n    }\\n\\n    /// @dev unpause the contract operation\\n    function unpause() external {\\n        require(hasRole(PAUSE_ROLE, _msgSender()), \\\"must have pause role\\\");\\n        _unpause();\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    /// We must implement supportsInterface here because ERC721Upgradeable is not abstract.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(AccessControlUpgradeable, ERC721Upgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseTokenURI;\\n    }\\n\\n    // Just in case.\\n    uint256[50] private __gap2;\\n}\\n\",\"keccak256\":\"0xa6185feca5aececb99de22d62538a84b91431ef942edfd8186eef20fe965b056\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/Upgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n// Just an interface to TAG upgradable contracts.\\n// solhint-disable-next-line no-empty-blocks\\ninterface Upgradeable {\\n\\n}\\n\",\"keccak256\":\"0x3e8e0b7be1212421efbd4003db682ca05493cd5f153549d3291a6f04b2f0c0ae\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/@maticnetwork/pos-portal/child/ChildToken/IChildToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IChildToken {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\",\"keccak256\":\"0x6a612c9bbc2b7e6a141986d9a0ab8d4f58de5ea6ae0dff8b190125ae74b83771\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAvatarMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IAvatarMinter {\\n    function mint(address to, uint256 id) external;\\n\\n    function mintBatch(address to, uint256[] calldata ids) external;\\n}\\n\",\"keccak256\":\"0xf73c5ff8bad74a955f5fb9cee581d4801fab80fcd9199fba91b1294cee26c5be\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {AvatarBase} from \\\"../../../avatar/AvatarBase.sol\\\";\\nimport {IAvatarMinter} from \\\"../../../common/interfaces/IAvatarMinter.sol\\\";\\nimport {Upgradeable} from \\\"../../../common/BaseWithStorage/Upgradeable.sol\\\";\\nimport {IChildToken} from \\\"../../../common/interfaces/@maticnetwork/pos-portal/child/ChildToken/IChildToken.sol\\\";\\n\\n/// @title This contract is a erc 721 compatible NFT token that represents an avatar and can be minted by a minter role.\\n/// @dev This contract support meta transactions.\\n/// @dev Avatar will be minted only on L2 (using the sale contract) and can be transferred to L1 but not minted on L1.\\n/// @dev This contract is final, don't inherit form it.\\ncontract PolygonAvatar is AvatarBase, Upgradeable, IChildToken, IAvatarMinter {\\n    event Deposit(address indexed from, uint256 tokenId);\\n    event DepositBatch(address indexed from, uint256[] tokenIds);\\n    // This is not part of the interface, but it seems that this specific event is necessary!!!.\\n    event WithdrawnBatch(address indexed user, uint256[] tokenIds);\\n    event Withdrawn(address indexed user, uint256 tokenId);\\n    event Minted(address indexed user, uint256 id);\\n    event MintedBatch(address indexed user, uint256[] ids);\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant CHILD_MANAGER_ROLE = keccak256(\\\"CHILD_MANAGER_ROLE\\\");\\n    // We only mint on L2, then it make sense to keep track of tokens transferred to L1\\n    // to avoid minting them twice.\\n    mapping(uint256 => bool) public withdrawnTokens;\\n    uint256 private _maxMinLength;\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory baseTokenURI_,\\n        address trustedForwarder_,\\n        address defaultAdmin_\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AvatarBase_init_unchained(defaultAdmin_, baseTokenURI_);\\n        __ERC721_init_unchained(name_, symbol_);\\n        __ERC2771Handler_initialize(trustedForwarder_);\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required tokenId(s) for user\\n     * Should set `withdrawnTokens` mapping to `false` for the tokenId being deposited\\n     * Minting can also be done by other functions\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded tokenIds. Batch deposit also supported.\\n     */\\n    function deposit(address user, bytes calldata depositData) external override whenNotPaused {\\n        require(hasRole(CHILD_MANAGER_ROLE, _msgSender()), \\\"!CHILD_MANAGER_ROLE\\\");\\n        require(user != address(0x0), \\\"invalid user\\\");\\n        if (depositData.length == 32) {\\n            // deposit single\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\n            _deposit(user, tokenId);\\n            emit Deposit(user, tokenId);\\n        } else {\\n            // deposit batch\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\n            for (uint256 i; i < tokenIds.length; i++) {\\n                _deposit(user, tokenIds[i]);\\n            }\\n            emit DepositBatch(user, tokenIds);\\n        }\\n    }\\n\\n    /// @notice Withdraw tokens\\n    /// @param tokenId tokenId of the token to be withdrawn\\n    function withdraw(uint256 tokenId) external whenNotPaused {\\n        _withdraw(tokenId);\\n        emit Withdrawn(_msgSender(), tokenId);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw multiple tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param tokenIds tokenId list to withdraw\\n     */\\n    function withdrawBatch(uint256[] calldata tokenIds) external whenNotPaused {\\n        // Iteratively burn ERC721 tokens, for performing batch withdraw\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            _withdraw(tokenIds[i]);\\n        }\\n        // At last emit this event, which will be used\\n        // in MintableERC721 predicate contract on L1\\n        // while verifying burn proof\\n        emit WithdrawnBatch(_msgSender(), tokenIds);\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 id) external override whenNotPaused {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"must have minter role\\\");\\n        require(!withdrawnTokens[id], \\\"TOKEN_EXISTS_ON_ROOT_CHAIN\\\");\\n        _mint(to, id);\\n        emit Minted(to, id);\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token IDs will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mintBatch(address to, uint256[] calldata ids) external override whenNotPaused {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"must have minter role\\\");\\n        require(ids.length > 0, \\\"ids empty\\\");\\n        require(ids.length <= _maxMinLength + 1, \\\"too many ids\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(!withdrawnTokens[i], \\\"TOKEN_EXISTS_ON_ROOT_CHAIN\\\");\\n            _mint(to, ids[i]);\\n        }\\n        emit MintedBatch(to, ids);\\n    }\\n\\n    /// @dev Set the maximum number of id that can be minted at once\\n    /// @param maxMintLength maximum number of ids to mint at once\\n    function setMaxMintLength(uint256 maxMintLength) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"must have admin role\\\");\\n        require(maxMintLength > 0, \\\"invalid value\\\");\\n        _maxMinLength = maxMintLength - 1;\\n    }\\n\\n    /**\\n     * @dev We don't implement {IMintableERC721-exists} but this one is a nice to have.\\n     */\\n    function maxMinLength() external view returns (uint256) {\\n        return _maxMinLength + 1;\\n    }\\n\\n    /**\\n     * @dev We don't implement {IMintableERC721-exists} but this one is a nice to have.\\n     */\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @notice Deposit tokens\\n    /// @param user address for deposit\\n    /// @param tokenId tokenId to mint to user's account\\n    function _deposit(address user, uint256 tokenId) internal {\\n        // We only accept tokens that were minted on L1, withdrawn and now came from L1\\n        require(withdrawnTokens[tokenId], \\\"TOKEN_NOT_EXISTS_ON_ROOT_CHAIN\\\");\\n        withdrawnTokens[tokenId] = false;\\n        _mint(user, tokenId);\\n    }\\n\\n    // TODO: This makes the contract matic-pos portal compatible, but it is kind of risky\\n    // TODO: Remove if we only want to use matic-fx portal.\\n    /// @notice Withdraw tokens\\n    /// @param tokenId tokenId of the token to be withdrawn\\n    function _withdraw(uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == _msgSender(), \\\"Not owner\\\");\\n        withdrawnTokens[tokenId] = true;\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xe2536d6960b41f7615c080cc396e0a62829f72ab1344eab99807124f34896de4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137b6806100206000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c806375ceb3411161017b578063c87b56dd116100d8578063d547cfb71161008c578063da74222811610071578063da74222814610624578063e47d1a8a14610637578063e985e9c51461063f576102c8565b8063d547cfb714610609578063d6d0faee14610611576102c8565b8063cf2c52cb116100bd578063cf2c52cb146105bc578063d5391393146105cf578063d547741f146105f6576102c8565b8063c87b56dd14610598578063ce1b815f146105ab576102c8565b8063a0fecd761161012f578063a22cb46511610114578063a22cb4651461055f578063b88d4fde14610572578063c7c3268b14610585576102c8565b8063a0fecd7614610544578063a217fddf14610557576102c8565b806391d148541161016057806391d14854146104f057806395d89b41146105295780639c8d415614610531576102c8565b806375ceb341146104d55780638456cb59146104e8576102c8565b806336568abe116102295780634f558e79116101dd5780635c975abb116101c25780635c975abb1461049c5780636352211e146104af57806370a08231146104c2576102c8565b80634f558e7914610467578063572b6c051461047a576102c8565b80633f4ba83a1161020e5780633f4ba83a1461043957806340c10f191461044157806342842e0e14610454576102c8565b806336568abe146103ff578063389ed26714610412576102c8565b806315b519bb11610280578063248a9ca311610265578063248a9ca3146103b65780632e1a7d4d146103d95780632f2ff15d146103ec576102c8565b806315b519bb1461036e57806323b872dd146103a3576102c8565b806307a974fc116102b157806307a974fc1461030a578063081812fc1461032e578063095ea7b314610359576102c8565b806301ffc9a7146102cd57806306fdde03146102f5575b600080fd5b6102e06102db3660046132fc565b61067b565b60405190151581526020015b60405180910390f35b6102fd61068e565b6040516102ec91906135bd565b6102e06103183660046132c2565b6101606020526000908152604090205460ff1681565b61034161033c3660046132c2565b610721565b6040516001600160a01b0390911681526020016102ec565b61036c6103673660046131b2565b6107cc565b005b6103957f52ce7cc866a5c081a13d91df9e500ecb9221474bb334cfc5dc104980c08df64c81565b6040519081526020016102ec565b61036c6103b136600461302f565b610910565b6103956103c43660046132c2565b60009081526065602052604090206001015490565b61036c6103e73660046132c2565b61099e565b61036c6103fa3660046132da565b610a47565b61036c61040d3660046132da565b610a74565b6103957f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d81565b61036c610b10565b61036c61044f3660046131b2565b610b92565b61036c61046236600461302f565b610d0e565b6102e06104753660046132c2565b610d29565b6102e0610488366004612fe3565b60c9546001600160a01b0390811691161490565b6102e060c954600160a01b900460ff1690565b6103416104bd3660046132c2565b610d48565b6103956104d0366004612fe3565b610dd3565b61036c6104e33660046130e3565b610e6d565b61036c6110d9565b6102e06104fe3660046132da565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102fd611159565b61036c61053f3660046131db565b611168565b61036c6105523660046132c2565b61124a565b610395600081565b61036c61056d366004613134565b611305565b61036c61058036600461306a565b611317565b61036c610593366004613334565b6113ac565b6102fd6105a63660046132c2565b611412565b60c9546001600160a01b0316610341565b61036c6105ca36600461316e565b6114fb565b6103957f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61036c6106043660046132da565b61172f565b6102fd611757565b61036c61061f366004613368565b6117e6565b61036c610632366004612fe3565b611910565b610395611998565b6102e061064d366004612ffd565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b6000610686826119af565b90505b919050565b60606097805461069d906136a6565b80601f01602080910402602001604051908101604052809291908181526020018280546106c9906136a6565b80156107165780601f106106eb57610100808354040283529160200191610716565b820191906000526020600020905b8154815290600101906020018083116106f957829003601f168201915b505050505090505b90565b6000818152609960205260408120546001600160a01b03166107b05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b60006107d782610d48565b9050806001600160a01b0316836001600160a01b031614156108615760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016107a7565b806001600160a01b0316610873611a51565b6001600160a01b0316148061088f575061088f8161064d611a51565b6109015760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107a7565b61090b8383611a5b565b505050565b61092161091b611a51565b82611ad6565b6109935760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016107a7565b61090b838383611bde565b6109b160c954600160a01b900460ff1690565b156109f15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b6109fa81611db8565b610a02611a51565b6001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610a3c91815260200190565b60405180910390a250565b600082815260656020526040902060010154610a6a81610a65611a51565b611e4e565b61090b8383611ece565b610a7c611a51565b6001600160a01b0316816001600160a01b031614610b025760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107a7565b610b0c8282611f71565b5050565b610b3c7f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d6104fe611a51565b610b885760405162461bcd60e51b815260206004820152601460248201527f6d757374206861766520706175736520726f6c6500000000000000000000000060448201526064016107a7565b610b90612012565b565b610ba560c954600160a01b900460ff1690565b15610be55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b610c117f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104fe611a51565b610c5d5760405162461bcd60e51b815260206004820152601560248201527f6d7573742068617665206d696e74657220726f6c65000000000000000000000060448201526064016107a7565b6000818152610160602052604090205460ff1615610cbd5760405162461bcd60e51b815260206004820152601a60248201527f544f4b454e5f4558495354535f4f4e5f524f4f545f434841494e00000000000060448201526064016107a7565b610cc782826120df565b816001600160a01b03167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe82604051610d0291815260200190565b60405180910390a25050565b61090b83838360405180602001604052806000815250611317565b6000818152609960205260408120546001600160a01b03161515610686565b6000818152609960205260408120546001600160a01b0316806106865760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016107a7565b60006001600160a01b038216610e515760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016107a7565b506001600160a01b03166000908152609a602052604090205490565b610e8060c954600160a01b900460ff1690565b15610ec05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b610eec7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104fe611a51565b610f385760405162461bcd60e51b815260206004820152601560248201527f6d7573742068617665206d696e74657220726f6c65000000000000000000000060448201526064016107a7565b80610f855760405162461bcd60e51b815260206004820152600960248201527f69647320656d707479000000000000000000000000000000000000000000000060448201526064016107a7565b61016154610f94906001613601565b811115610fe35760405162461bcd60e51b815260206004820152600c60248201527f746f6f206d616e7920696473000000000000000000000000000000000000000060448201526064016107a7565b60005b81811015611090576000818152610160602052604090205460ff161561104e5760405162461bcd60e51b815260206004820152601a60248201527f544f4b454e5f4558495354535f4f4e5f524f4f545f434841494e00000000000060448201526064016107a7565b61107e8484848481811061107257634e487b7160e01b600052603260045260246000fd5b905060200201356120df565b80611088816136e1565b915050610fe6565b50826001600160a01b03167f55130d13956a31777686bf4bc513c3faf8da30ef0ae73db7a9ce44ab4774bb8283836040516110cc929190613526565b60405180910390a2505050565b6111057f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d6104fe611a51565b6111515760405162461bcd60e51b815260206004820152601460248201527f6d757374206861766520706175736520726f6c6500000000000000000000000060448201526064016107a7565b610b9061222e565b60606098805461069d906136a6565b61117b60c954600160a01b900460ff1690565b156111bb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b60005b81811015611207576111f58383838181106111e957634e487b7160e01b600052603260045260246000fd5b90506020020135611db8565b806111ff816136e1565b9150506111be565b50611210611a51565b6001600160a01b03167ff871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df8383604051610d02929190613526565b61125760006104fe611a51565b6112a35760405162461bcd60e51b815260206004820152601460248201527f6d75737420686176652061646d696e20726f6c6500000000000000000000000060448201526064016107a7565b600081116112f35760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642076616c75650000000000000000000000000000000000000060448201526064016107a7565b6112fe60018261364c565b6101615550565b610b0c611310611a51565b83836122d8565b611328611322611a51565b83611ad6565b61139a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016107a7565b6113a6848484846123a7565b50505050565b6113b960006104fe611a51565b6114055760405162461bcd60e51b815260206004820152601460248201527f6d75737420686176652061646d696e20726f6c6500000000000000000000000060448201526064016107a7565b61090b61012d8383612dbf565b6000818152609960205260409020546060906001600160a01b031661149f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016107a7565b60006114a9612430565b905060008151116114c957604051806020016040528060008152506114f4565b806114d384612440565b6040516020016114e492919061343a565b6040516020818303038152906040525b9392505050565b61150e60c954600160a01b900460ff1690565b1561154e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b61157a7f52ce7cc866a5c081a13d91df9e500ecb9221474bb334cfc5dc104980c08df64c6104fe611a51565b6115c65760405162461bcd60e51b815260206004820152601360248201527f214348494c445f4d414e414745525f524f4c450000000000000000000000000060448201526064016107a7565b6001600160a01b03831661161c5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642075736572000000000000000000000000000000000000000060448201526064016107a7565b6020811415611688576000611633828401846132c2565b905061163f848261258f565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161167a91815260200190565b60405180910390a25061090b565b60006116968284018461321b565b905060005b81518110156116e7576116d5858383815181106116c857634e487b7160e01b600052603260045260246000fd5b602002602001015161258f565b806116df816136e1565b91505061169b565b50836001600160a01b03167f2e84a5d8378beeb845fb3f3b68b382a45980f7dba87516fd95b8093dda2307cd826040516117219190613579565b60405180910390a250505050565b60008281526065602052604090206001015461174d81610a65611a51565b61090b8383611f71565b61012d8054611765906136a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611791906136a6565b80156117de5780601f106117b3576101008083540402835291602001916117de565b820191906000526020600020905b8154815290600101906020018083116117c157829003601f168201915b505050505081565b600054610100900460ff166118015760005460ff1615611805565b303b155b6118775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107a7565b600054610100900460ff161580156118a2576000805460ff1961ff0019909116610100171660011790555b6118aa61260f565b6118b261260f565b6118ba61260f565b6118c4828561268c565b6118ce868661277e565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790558015611908576000805461ff00191690555b505050505050565b61191d60006104fe611a51565b6119695760405162461bcd60e51b815260206004820152601460248201527f6d75737420686176652061646d696e20726f6c6500000000000000000000000060448201526064016107a7565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006101615460016119aa9190613601565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611a4257507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610686575061068682612822565b60006119aa6128b9565b6000818152609b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190611a9d82610d48565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152609960205260408120546001600160a01b0316611b605760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016107a7565b6000611b6b83610d48565b9050806001600160a01b0316846001600160a01b03161480611ba65750836001600160a01b0316611b9b84610721565b6001600160a01b0316145b80611bd657506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611bf182610d48565b6001600160a01b031614611c6d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016107a7565b6001600160a01b038216611ce85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107a7565b611cf3600082611a5b565b6001600160a01b0383166000908152609a60205260408120805460019290611d1c90849061364c565b90915550506001600160a01b0382166000908152609a60205260408120805460019290611d4a908490613601565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611dc0611a51565b6001600160a01b0316611dd282610d48565b6001600160a01b031614611e285760405162461bcd60e51b815260206004820152600960248201527f4e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016107a7565b600081815261016060205260409020805460ff19166001179055611e4b81612903565b50565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610b0c57611e8c816001600160a01b031660146129ab565b611e978360206129ab565b604051602001611ea8929190613469565b60408051601f198184030181529082905262461bcd60e51b82526107a7916004016135bd565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610b0c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f2d611a51565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1615610b0c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19169055611fce611a51565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b61202560c954600160a01b900460ff1690565b6120715760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107a7565b60c980547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6120c2611a51565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166121355760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107a7565b6000818152609960205260409020546001600160a01b03161561219a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107a7565b6001600160a01b0382166000908152609a602052604081208054600192906121c3908490613601565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61224160c954600160a01b900460ff1690565b156122815760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b60c980547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120c2611a51565b816001600160a01b0316836001600160a01b0316141561233a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107a7565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6123b2848484611bde565b6123be84848484612c1a565b6113a65760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107a7565b606061012d805461069d906136a6565b606081612481575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610689565b8160005b81156124ab5780612495816136e1565b91506124a49050600a83613619565b9150612485565b60008167ffffffffffffffff8111156124d457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156124fe576020820181803683370190505b5090505b8415611bd65761251360018361364c565b9150612520600a866136fc565b61252b906030613601565b60f81b81838151811061254e57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612588600a86613619565b9450612502565b6000818152610160602052604090205460ff166125ee5760405162461bcd60e51b815260206004820152601e60248201527f544f4b454e5f4e4f545f4558495354535f4f4e5f524f4f545f434841494e000060448201526064016107a7565b600081815261016060205260409020805460ff19169055610b0c82826120df565b600054610100900460ff16610b905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107a7565b600054610100900460ff166126a75760005460ff16156126ab565b303b155b61271d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107a7565b600054610100900460ff16158015612748576000805460ff1961ff0019909116610100171660011790555b612753600084612db5565b81516127679061012d906020850190612e43565b50801561090b576000805461ff0019169055505050565b600054610100900460ff166127fb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107a7565b815161280e906097906020850190612e43565b50805161090b906098906020840190612e43565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061068657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610686565b60c9546000906001600160a01b03163314156128fc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61071e565b503361071e565b600061290e82610d48565b905061291b600083611a5b565b6001600160a01b0381166000908152609a6020526040812080546001929061294490849061364c565b9091555050600082815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b606060006129ba83600261362d565b6129c5906002613601565b67ffffffffffffffff8111156129eb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a15576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612a5a57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612acb57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612b0784600261362d565b612b12906001613601565b90505b6001811115612bcb577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612b6157634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612b8557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612bc48161368f565b9050612b15565b5083156114f45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107a7565b60006001600160a01b0384163b15612daa57836001600160a01b031663150b7a02612c43611a51565b8786866040518563ffffffff1660e01b8152600401612c6594939291906134ea565b602060405180830381600087803b158015612c7f57600080fd5b505af1925050508015612caf575060408051601f3d908101601f19168201909252612cac91810190613318565b60015b612d5f573d808015612cdd576040519150601f19603f3d011682016040523d82523d6000602084013e612ce2565b606091505b508051612d575760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107a7565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611bd6565b506001949350505050565b610b0c8282611ece565b828054612dcb906136a6565b90600052602060002090601f016020900481019282612ded5760008555612e33565b82601f10612e065782800160ff19823516178555612e33565b82800160010185558215612e33579182015b82811115612e33578235825591602001919060010190612e18565b50612e3f929150612eb7565b5090565b828054612e4f906136a6565b90600052602060002090601f016020900481019282612e715760008555612e33565b82601f10612e8a57805160ff1916838001178555612e33565b82800160010185558215612e33579182015b82811115612e33578251825591602001919060010190612e9c565b5b80821115612e3f5760008155600101612eb8565b600067ffffffffffffffff831115612ee657612ee661373c565b612ef96020601f19601f860116016135d0565b9050828152838383011115612f0d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461068957600080fd5b60008083601f840112612f4c578182fd5b50813567ffffffffffffffff811115612f63578182fd5b6020830191508360208083028501011115612f7d57600080fd5b9250929050565b60008083601f840112612f95578182fd5b50813567ffffffffffffffff811115612fac578182fd5b602083019150836020828501011115612f7d57600080fd5b600082601f830112612fd4578081fd5b6114f483833560208501612ecc565b600060208284031215612ff4578081fd5b6114f482612f24565b6000806040838503121561300f578081fd5b61301883612f24565b915061302660208401612f24565b90509250929050565b600080600060608486031215613043578081fd5b61304c84612f24565b925061305a60208501612f24565b9150604084013590509250925092565b6000806000806080858703121561307f578081fd5b61308885612f24565b935061309660208601612f24565b925060408501359150606085013567ffffffffffffffff8111156130b8578182fd5b8501601f810187136130c8578182fd5b6130d787823560208401612ecc565b91505092959194509250565b6000806000604084860312156130f7578283fd5b61310084612f24565b9250602084013567ffffffffffffffff81111561311b578283fd5b61312786828701612f3b565b9497909650939450505050565b60008060408385031215613146578182fd5b61314f83612f24565b915060208301358015158114613163578182fd5b809150509250929050565b600080600060408486031215613182578283fd5b61318b84612f24565b9250602084013567ffffffffffffffff8111156131a6578283fd5b61312786828701612f84565b600080604083850312156131c4578182fd5b6131cd83612f24565b946020939093013593505050565b600080602083850312156131ed578182fd5b823567ffffffffffffffff811115613203578283fd5b61320f85828601612f3b565b90969095509350505050565b6000602080838503121561322d578182fd5b823567ffffffffffffffff80821115613244578384fd5b818501915085601f830112613257578384fd5b8135818111156132695761326961373c565b83810291506132798483016135d0565b8181528481019084860184860187018a1015613293578788fd5b8795505b838610156132b5578035835260019590950194918601918601613297565b5098975050505050505050565b6000602082840312156132d3578081fd5b5035919050565b600080604083850312156132ec578182fd5b8235915061302660208401612f24565b60006020828403121561330d578081fd5b81356114f481613752565b600060208284031215613329578081fd5b81516114f481613752565b60008060208385031215613346578182fd5b823567ffffffffffffffff81111561335c578283fd5b61320f85828601612f84565b600080600080600060a0868803121561337f578283fd5b853567ffffffffffffffff80821115613396578485fd5b6133a289838a01612fc4565b965060208801359150808211156133b7578485fd5b6133c389838a01612fc4565b955060408801359150808211156133d8578485fd5b506133e588828901612fc4565b9350506133f460608701612f24565b915061340260808701612f24565b90509295509295909350565b60008151808452613426816020860160208601613663565b601f01601f19169290920160200192915050565b6000835161344c818460208801613663565b835190830190613460818360208801613663565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516134a1816017850160208801613663565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516134de816028840160208801613663565b01602801949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261351c608083018461340e565b9695505050505050565b6000602082528260208301527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561355e578081fd5b60208302808560408501379190910160400190815292915050565b6020808252825182820181905260009190848201906040850190845b818110156135b157835183529284019291840191600101613595565b50909695505050505050565b6000602082526114f4602083018461340e565b604051601f8201601f1916810167ffffffffffffffff811182821017156135f9576135f961373c565b604052919050565b6000821982111561361457613614613710565b500190565b60008261362857613628613726565b500490565b600081600019048311821515161561364757613647613710565b500290565b60008282101561365e5761365e613710565b500390565b60005b8381101561367e578181015183820152602001613666565b838111156113a65750506000910152565b60008161369e5761369e613710565b506000190190565b6002810460018216806136ba57607f821691505b602082108114156136db57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156136f5576136f5613710565b5060010190565b60008261370b5761370b613726565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611e4b57600080fdfea2646970667358221220c77f4c3401701c485d72b569b0b4a78617869b29c77d5b3e0017406375115b9a64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c85760003560e01c806375ceb3411161017b578063c87b56dd116100d8578063d547cfb71161008c578063da74222811610071578063da74222814610624578063e47d1a8a14610637578063e985e9c51461063f576102c8565b8063d547cfb714610609578063d6d0faee14610611576102c8565b8063cf2c52cb116100bd578063cf2c52cb146105bc578063d5391393146105cf578063d547741f146105f6576102c8565b8063c87b56dd14610598578063ce1b815f146105ab576102c8565b8063a0fecd761161012f578063a22cb46511610114578063a22cb4651461055f578063b88d4fde14610572578063c7c3268b14610585576102c8565b8063a0fecd7614610544578063a217fddf14610557576102c8565b806391d148541161016057806391d14854146104f057806395d89b41146105295780639c8d415614610531576102c8565b806375ceb341146104d55780638456cb59146104e8576102c8565b806336568abe116102295780634f558e79116101dd5780635c975abb116101c25780635c975abb1461049c5780636352211e146104af57806370a08231146104c2576102c8565b80634f558e7914610467578063572b6c051461047a576102c8565b80633f4ba83a1161020e5780633f4ba83a1461043957806340c10f191461044157806342842e0e14610454576102c8565b806336568abe146103ff578063389ed26714610412576102c8565b806315b519bb11610280578063248a9ca311610265578063248a9ca3146103b65780632e1a7d4d146103d95780632f2ff15d146103ec576102c8565b806315b519bb1461036e57806323b872dd146103a3576102c8565b806307a974fc116102b157806307a974fc1461030a578063081812fc1461032e578063095ea7b314610359576102c8565b806301ffc9a7146102cd57806306fdde03146102f5575b600080fd5b6102e06102db3660046132fc565b61067b565b60405190151581526020015b60405180910390f35b6102fd61068e565b6040516102ec91906135bd565b6102e06103183660046132c2565b6101606020526000908152604090205460ff1681565b61034161033c3660046132c2565b610721565b6040516001600160a01b0390911681526020016102ec565b61036c6103673660046131b2565b6107cc565b005b6103957f52ce7cc866a5c081a13d91df9e500ecb9221474bb334cfc5dc104980c08df64c81565b6040519081526020016102ec565b61036c6103b136600461302f565b610910565b6103956103c43660046132c2565b60009081526065602052604090206001015490565b61036c6103e73660046132c2565b61099e565b61036c6103fa3660046132da565b610a47565b61036c61040d3660046132da565b610a74565b6103957f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d81565b61036c610b10565b61036c61044f3660046131b2565b610b92565b61036c61046236600461302f565b610d0e565b6102e06104753660046132c2565b610d29565b6102e0610488366004612fe3565b60c9546001600160a01b0390811691161490565b6102e060c954600160a01b900460ff1690565b6103416104bd3660046132c2565b610d48565b6103956104d0366004612fe3565b610dd3565b61036c6104e33660046130e3565b610e6d565b61036c6110d9565b6102e06104fe3660046132da565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102fd611159565b61036c61053f3660046131db565b611168565b61036c6105523660046132c2565b61124a565b610395600081565b61036c61056d366004613134565b611305565b61036c61058036600461306a565b611317565b61036c610593366004613334565b6113ac565b6102fd6105a63660046132c2565b611412565b60c9546001600160a01b0316610341565b61036c6105ca36600461316e565b6114fb565b6103957f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61036c6106043660046132da565b61172f565b6102fd611757565b61036c61061f366004613368565b6117e6565b61036c610632366004612fe3565b611910565b610395611998565b6102e061064d366004612ffd565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b6000610686826119af565b90505b919050565b60606097805461069d906136a6565b80601f01602080910402602001604051908101604052809291908181526020018280546106c9906136a6565b80156107165780601f106106eb57610100808354040283529160200191610716565b820191906000526020600020905b8154815290600101906020018083116106f957829003601f168201915b505050505090505b90565b6000818152609960205260408120546001600160a01b03166107b05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b60006107d782610d48565b9050806001600160a01b0316836001600160a01b031614156108615760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016107a7565b806001600160a01b0316610873611a51565b6001600160a01b0316148061088f575061088f8161064d611a51565b6109015760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107a7565b61090b8383611a5b565b505050565b61092161091b611a51565b82611ad6565b6109935760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016107a7565b61090b838383611bde565b6109b160c954600160a01b900460ff1690565b156109f15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b6109fa81611db8565b610a02611a51565b6001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610a3c91815260200190565b60405180910390a250565b600082815260656020526040902060010154610a6a81610a65611a51565b611e4e565b61090b8383611ece565b610a7c611a51565b6001600160a01b0316816001600160a01b031614610b025760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107a7565b610b0c8282611f71565b5050565b610b3c7f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d6104fe611a51565b610b885760405162461bcd60e51b815260206004820152601460248201527f6d757374206861766520706175736520726f6c6500000000000000000000000060448201526064016107a7565b610b90612012565b565b610ba560c954600160a01b900460ff1690565b15610be55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b610c117f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104fe611a51565b610c5d5760405162461bcd60e51b815260206004820152601560248201527f6d7573742068617665206d696e74657220726f6c65000000000000000000000060448201526064016107a7565b6000818152610160602052604090205460ff1615610cbd5760405162461bcd60e51b815260206004820152601a60248201527f544f4b454e5f4558495354535f4f4e5f524f4f545f434841494e00000000000060448201526064016107a7565b610cc782826120df565b816001600160a01b03167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe82604051610d0291815260200190565b60405180910390a25050565b61090b83838360405180602001604052806000815250611317565b6000818152609960205260408120546001600160a01b03161515610686565b6000818152609960205260408120546001600160a01b0316806106865760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016107a7565b60006001600160a01b038216610e515760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016107a7565b506001600160a01b03166000908152609a602052604090205490565b610e8060c954600160a01b900460ff1690565b15610ec05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b610eec7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104fe611a51565b610f385760405162461bcd60e51b815260206004820152601560248201527f6d7573742068617665206d696e74657220726f6c65000000000000000000000060448201526064016107a7565b80610f855760405162461bcd60e51b815260206004820152600960248201527f69647320656d707479000000000000000000000000000000000000000000000060448201526064016107a7565b61016154610f94906001613601565b811115610fe35760405162461bcd60e51b815260206004820152600c60248201527f746f6f206d616e7920696473000000000000000000000000000000000000000060448201526064016107a7565b60005b81811015611090576000818152610160602052604090205460ff161561104e5760405162461bcd60e51b815260206004820152601a60248201527f544f4b454e5f4558495354535f4f4e5f524f4f545f434841494e00000000000060448201526064016107a7565b61107e8484848481811061107257634e487b7160e01b600052603260045260246000fd5b905060200201356120df565b80611088816136e1565b915050610fe6565b50826001600160a01b03167f55130d13956a31777686bf4bc513c3faf8da30ef0ae73db7a9ce44ab4774bb8283836040516110cc929190613526565b60405180910390a2505050565b6111057f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d6104fe611a51565b6111515760405162461bcd60e51b815260206004820152601460248201527f6d757374206861766520706175736520726f6c6500000000000000000000000060448201526064016107a7565b610b9061222e565b60606098805461069d906136a6565b61117b60c954600160a01b900460ff1690565b156111bb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b60005b81811015611207576111f58383838181106111e957634e487b7160e01b600052603260045260246000fd5b90506020020135611db8565b806111ff816136e1565b9150506111be565b50611210611a51565b6001600160a01b03167ff871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df8383604051610d02929190613526565b61125760006104fe611a51565b6112a35760405162461bcd60e51b815260206004820152601460248201527f6d75737420686176652061646d696e20726f6c6500000000000000000000000060448201526064016107a7565b600081116112f35760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642076616c75650000000000000000000000000000000000000060448201526064016107a7565b6112fe60018261364c565b6101615550565b610b0c611310611a51565b83836122d8565b611328611322611a51565b83611ad6565b61139a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016107a7565b6113a6848484846123a7565b50505050565b6113b960006104fe611a51565b6114055760405162461bcd60e51b815260206004820152601460248201527f6d75737420686176652061646d696e20726f6c6500000000000000000000000060448201526064016107a7565b61090b61012d8383612dbf565b6000818152609960205260409020546060906001600160a01b031661149f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016107a7565b60006114a9612430565b905060008151116114c957604051806020016040528060008152506114f4565b806114d384612440565b6040516020016114e492919061343a565b6040516020818303038152906040525b9392505050565b61150e60c954600160a01b900460ff1690565b1561154e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b61157a7f52ce7cc866a5c081a13d91df9e500ecb9221474bb334cfc5dc104980c08df64c6104fe611a51565b6115c65760405162461bcd60e51b815260206004820152601360248201527f214348494c445f4d414e414745525f524f4c450000000000000000000000000060448201526064016107a7565b6001600160a01b03831661161c5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642075736572000000000000000000000000000000000000000060448201526064016107a7565b6020811415611688576000611633828401846132c2565b905061163f848261258f565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161167a91815260200190565b60405180910390a25061090b565b60006116968284018461321b565b905060005b81518110156116e7576116d5858383815181106116c857634e487b7160e01b600052603260045260246000fd5b602002602001015161258f565b806116df816136e1565b91505061169b565b50836001600160a01b03167f2e84a5d8378beeb845fb3f3b68b382a45980f7dba87516fd95b8093dda2307cd826040516117219190613579565b60405180910390a250505050565b60008281526065602052604090206001015461174d81610a65611a51565b61090b8383611f71565b61012d8054611765906136a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611791906136a6565b80156117de5780601f106117b3576101008083540402835291602001916117de565b820191906000526020600020905b8154815290600101906020018083116117c157829003601f168201915b505050505081565b600054610100900460ff166118015760005460ff1615611805565b303b155b6118775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107a7565b600054610100900460ff161580156118a2576000805460ff1961ff0019909116610100171660011790555b6118aa61260f565b6118b261260f565b6118ba61260f565b6118c4828561268c565b6118ce868661277e565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790558015611908576000805461ff00191690555b505050505050565b61191d60006104fe611a51565b6119695760405162461bcd60e51b815260206004820152601460248201527f6d75737420686176652061646d696e20726f6c6500000000000000000000000060448201526064016107a7565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006101615460016119aa9190613601565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611a4257507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610686575061068682612822565b60006119aa6128b9565b6000818152609b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190611a9d82610d48565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152609960205260408120546001600160a01b0316611b605760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016107a7565b6000611b6b83610d48565b9050806001600160a01b0316846001600160a01b03161480611ba65750836001600160a01b0316611b9b84610721565b6001600160a01b0316145b80611bd657506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611bf182610d48565b6001600160a01b031614611c6d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016107a7565b6001600160a01b038216611ce85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107a7565b611cf3600082611a5b565b6001600160a01b0383166000908152609a60205260408120805460019290611d1c90849061364c565b90915550506001600160a01b0382166000908152609a60205260408120805460019290611d4a908490613601565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611dc0611a51565b6001600160a01b0316611dd282610d48565b6001600160a01b031614611e285760405162461bcd60e51b815260206004820152600960248201527f4e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016107a7565b600081815261016060205260409020805460ff19166001179055611e4b81612903565b50565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610b0c57611e8c816001600160a01b031660146129ab565b611e978360206129ab565b604051602001611ea8929190613469565b60408051601f198184030181529082905262461bcd60e51b82526107a7916004016135bd565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610b0c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f2d611a51565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1615610b0c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19169055611fce611a51565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b61202560c954600160a01b900460ff1690565b6120715760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107a7565b60c980547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6120c2611a51565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166121355760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107a7565b6000818152609960205260409020546001600160a01b03161561219a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107a7565b6001600160a01b0382166000908152609a602052604081208054600192906121c3908490613601565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61224160c954600160a01b900460ff1690565b156122815760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a7565b60c980547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120c2611a51565b816001600160a01b0316836001600160a01b0316141561233a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107a7565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6123b2848484611bde565b6123be84848484612c1a565b6113a65760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107a7565b606061012d805461069d906136a6565b606081612481575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610689565b8160005b81156124ab5780612495816136e1565b91506124a49050600a83613619565b9150612485565b60008167ffffffffffffffff8111156124d457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156124fe576020820181803683370190505b5090505b8415611bd65761251360018361364c565b9150612520600a866136fc565b61252b906030613601565b60f81b81838151811061254e57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612588600a86613619565b9450612502565b6000818152610160602052604090205460ff166125ee5760405162461bcd60e51b815260206004820152601e60248201527f544f4b454e5f4e4f545f4558495354535f4f4e5f524f4f545f434841494e000060448201526064016107a7565b600081815261016060205260409020805460ff19169055610b0c82826120df565b600054610100900460ff16610b905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107a7565b600054610100900460ff166126a75760005460ff16156126ab565b303b155b61271d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107a7565b600054610100900460ff16158015612748576000805460ff1961ff0019909116610100171660011790555b612753600084612db5565b81516127679061012d906020850190612e43565b50801561090b576000805461ff0019169055505050565b600054610100900460ff166127fb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107a7565b815161280e906097906020850190612e43565b50805161090b906098906020840190612e43565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061068657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610686565b60c9546000906001600160a01b03163314156128fc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61071e565b503361071e565b600061290e82610d48565b905061291b600083611a5b565b6001600160a01b0381166000908152609a6020526040812080546001929061294490849061364c565b9091555050600082815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b606060006129ba83600261362d565b6129c5906002613601565b67ffffffffffffffff8111156129eb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a15576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612a5a57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612acb57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612b0784600261362d565b612b12906001613601565b90505b6001811115612bcb577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612b6157634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612b8557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612bc48161368f565b9050612b15565b5083156114f45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107a7565b60006001600160a01b0384163b15612daa57836001600160a01b031663150b7a02612c43611a51565b8786866040518563ffffffff1660e01b8152600401612c6594939291906134ea565b602060405180830381600087803b158015612c7f57600080fd5b505af1925050508015612caf575060408051601f3d908101601f19168201909252612cac91810190613318565b60015b612d5f573d808015612cdd576040519150601f19603f3d011682016040523d82523d6000602084013e612ce2565b606091505b508051612d575760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107a7565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611bd6565b506001949350505050565b610b0c8282611ece565b828054612dcb906136a6565b90600052602060002090601f016020900481019282612ded5760008555612e33565b82601f10612e065782800160ff19823516178555612e33565b82800160010185558215612e33579182015b82811115612e33578235825591602001919060010190612e18565b50612e3f929150612eb7565b5090565b828054612e4f906136a6565b90600052602060002090601f016020900481019282612e715760008555612e33565b82601f10612e8a57805160ff1916838001178555612e33565b82800160010185558215612e33579182015b82811115612e33578251825591602001919060010190612e9c565b5b80821115612e3f5760008155600101612eb8565b600067ffffffffffffffff831115612ee657612ee661373c565b612ef96020601f19601f860116016135d0565b9050828152838383011115612f0d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461068957600080fd5b60008083601f840112612f4c578182fd5b50813567ffffffffffffffff811115612f63578182fd5b6020830191508360208083028501011115612f7d57600080fd5b9250929050565b60008083601f840112612f95578182fd5b50813567ffffffffffffffff811115612fac578182fd5b602083019150836020828501011115612f7d57600080fd5b600082601f830112612fd4578081fd5b6114f483833560208501612ecc565b600060208284031215612ff4578081fd5b6114f482612f24565b6000806040838503121561300f578081fd5b61301883612f24565b915061302660208401612f24565b90509250929050565b600080600060608486031215613043578081fd5b61304c84612f24565b925061305a60208501612f24565b9150604084013590509250925092565b6000806000806080858703121561307f578081fd5b61308885612f24565b935061309660208601612f24565b925060408501359150606085013567ffffffffffffffff8111156130b8578182fd5b8501601f810187136130c8578182fd5b6130d787823560208401612ecc565b91505092959194509250565b6000806000604084860312156130f7578283fd5b61310084612f24565b9250602084013567ffffffffffffffff81111561311b578283fd5b61312786828701612f3b565b9497909650939450505050565b60008060408385031215613146578182fd5b61314f83612f24565b915060208301358015158114613163578182fd5b809150509250929050565b600080600060408486031215613182578283fd5b61318b84612f24565b9250602084013567ffffffffffffffff8111156131a6578283fd5b61312786828701612f84565b600080604083850312156131c4578182fd5b6131cd83612f24565b946020939093013593505050565b600080602083850312156131ed578182fd5b823567ffffffffffffffff811115613203578283fd5b61320f85828601612f3b565b90969095509350505050565b6000602080838503121561322d578182fd5b823567ffffffffffffffff80821115613244578384fd5b818501915085601f830112613257578384fd5b8135818111156132695761326961373c565b83810291506132798483016135d0565b8181528481019084860184860187018a1015613293578788fd5b8795505b838610156132b5578035835260019590950194918601918601613297565b5098975050505050505050565b6000602082840312156132d3578081fd5b5035919050565b600080604083850312156132ec578182fd5b8235915061302660208401612f24565b60006020828403121561330d578081fd5b81356114f481613752565b600060208284031215613329578081fd5b81516114f481613752565b60008060208385031215613346578182fd5b823567ffffffffffffffff81111561335c578283fd5b61320f85828601612f84565b600080600080600060a0868803121561337f578283fd5b853567ffffffffffffffff80821115613396578485fd5b6133a289838a01612fc4565b965060208801359150808211156133b7578485fd5b6133c389838a01612fc4565b955060408801359150808211156133d8578485fd5b506133e588828901612fc4565b9350506133f460608701612f24565b915061340260808701612f24565b90509295509295909350565b60008151808452613426816020860160208601613663565b601f01601f19169290920160200192915050565b6000835161344c818460208801613663565b835190830190613460818360208801613663565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516134a1816017850160208801613663565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516134de816028840160208801613663565b01602801949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261351c608083018461340e565b9695505050505050565b6000602082528260208301527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561355e578081fd5b60208302808560408501379190910160400190815292915050565b6020808252825182820181905260009190848201906040850190845b818110156135b157835183529284019291840191600101613595565b50909695505050505050565b6000602082526114f4602083018461340e565b604051601f8201601f1916810167ffffffffffffffff811182821017156135f9576135f961373c565b604052919050565b6000821982111561361457613614613710565b500190565b60008261362857613628613726565b500490565b600081600019048311821515161561364757613647613710565b500290565b60008282101561365e5761365e613710565b500390565b60005b8381101561367e578181015183820152602001613666565b838111156113a65750506000910152565b60008161369e5761369e613710565b506000190190565b6002810460018216806136ba57607f821691505b602082108114156136db57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156136f5576136f5613710565b5060010190565b60008261370b5761370b613726565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611e4b57600080fdfea2646970667358221220c77f4c3401701c485d72b569b0b4a78617869b29c77d5b3e0017406375115b9a64736f6c63430008020033",
  "devdoc": {
    "details": "This contract support meta transactions.Avatar will be minted only on L2 (using the sale contract) and can be transferred to L1 but not minted on L1.This contract is final, don't inherit form it.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "deposit(address,bytes)": {
        "details": "Should be callable only by ChildChainManager Should handle deposit by minting the required tokenId(s) for user Should set `withdrawnTokens` mapping to `false` for the tokenId being deposited Minting can also be done by other functions",
        "params": {
          "depositData": "abi encoded tokenIds. Batch deposit also supported.",
          "user": "user address for whom deposit is being done"
        }
      },
      "exists(uint256)": {
        "details": "We don't implement {IMintableERC721-exists} but this one is a nice to have."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "maxMinLength()": {
        "details": "We don't implement {IMintableERC721-exists} but this one is a nice to have."
      },
      "mint(address,uint256)": {
        "details": "Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
      },
      "mintBatch(address,uint256[])": {
        "details": "Creates a new token for `to`. Its token IDs will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Puse the contract operation"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseUrl(string)": {
        "details": "Change the base url for token metadata",
        "params": {
          "baseUri_": "The new base Url."
        }
      },
      "setMaxMintLength(uint256)": {
        "details": "Set the maximum number of id that can be minted at once",
        "params": {
          "maxMintLength": "maximum number of ids to mint at once"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder_": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. We must implement supportsInterface here because ERC721Upgradeable is not abstract."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "unpause()": {
        "details": "unpause the contract operation"
      },
      "withdraw(uint256)": {
        "params": {
          "tokenId": "tokenId of the token to be withdrawn"
        }
      },
      "withdrawBatch(uint256[])": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain",
        "params": {
          "tokenIds": "tokenId list to withdraw"
        }
      }
    },
    "title": "This contract is a erc 721 compatible NFT token that represents an avatar and can be minted by a minter role.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,bytes)": {
        "notice": "called when token is deposited on root chain"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw tokens"
      },
      "withdrawBatch(uint256[])": {
        "notice": "called when user wants to withdraw multiple tokens back to root chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7242,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7245,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8810,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9598,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6874,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)6869_storage)"
      },
      {
        "astId": 7161,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7529,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 7531,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 7535,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7539,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7543,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7549,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8360,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 25110,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 7330,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_paused",
        "offset": 20,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 7421,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19902,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19909,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "301",
        "type": "t_string_storage"
      },
      {
        "astId": 20058,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "__gap2",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 33872,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "withdrawnTokens",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 33874,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
        "label": "_maxMinLength",
        "offset": 0,
        "slot": "353",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)6869_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)6869_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)6869_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 6866,
            "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6868,
            "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatar.sol:PolygonAvatar",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}