{
  "address": "0xf5601caDEf4cD8606AD6978f9A9AD1294940e166",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "_childAvatarToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC721",
          "name": "childAvatarToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AvatarReceivedFromL1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC721",
          "name": "childAvatarToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AvatarSentToL1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "childAvatarToken",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "sendAvatarToL1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_childAvatarToken",
          "type": "address"
        }
      ],
      "name": "setChildAvatarToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0004288fdaccf48689eea16b5161b5c1ed60bb2c8f128dac97646e6528d8cc0e",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xf5601caDEf4cD8606AD6978f9A9AD1294940e166",
    "transactionIndex": 20,
    "gasUsed": "1061712",
    "logsBloom": "0x
    "blockHash": "0x75e5c0e80913eb1d1706f0c743ca3148da0528e1e0d559d269cf24d4e22cc360",
    "transactionHash": "0x0004288fdaccf48689eea16b5161b5c1ed60bb2c8f128dac97646e6528d8cc0e",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 25989341,
        "transactionHash": "0x0004288fdaccf48689eea16b5161b5c1ed60bb2c8f128dac97646e6528d8cc0e",
        "address": "0xf5601caDEf4cD8606AD6978f9A9AD1294940e166",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0x75e5c0e80913eb1d1706f0c743ca3148da0528e1e0d559d269cf24d4e22cc360"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 25989341,
        "transactionHash": "0x0004288fdaccf48689eea16b5161b5c1ed60bb2c8f128dac97646e6528d8cc0e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004b706dc3b4b23000000000000000000000000000000000000000000000000021df5e8e098dfb3500000000000000000000000000000000000000000000119907576a98896b35070000000000000000000000000000000000000000000000002193ee2045d9490500000000000000000000000000000000000000000000119907a2db064d1fe737",
        "logIndex": 46,
        "blockHash": "0x75e5c0e80913eb1d1706f0c743ca3148da0528e1e0d559d269cf24d4e22cc360"
      }
    ],
    "blockNumber": 25989341,
    "cumulativeGasUsed": "9966308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf73231F28B7331BBe3124B907840A94851f9f11",
    "0x38bb18796fd3B3C4D008cC23c8E67ceF2BD6c2B1",
    "0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b"
  ],
  "numDeployments": 1,
  "solcInputHash": "6b48e6b588e999663b82a35ee494a1bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_childAvatarToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"childAvatarToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AvatarReceivedFromL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"childAvatarToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AvatarSentToL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"childAvatarToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sendAvatarToL1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_childAvatarToken\",\"type\":\"address\"}],\"name\":\"setChildAvatarToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendAvatarToL1(address,uint256)\":{\"details\":\"send token to L1, messages emitted by this contract are proved to the root tunnel.\",\"params\":{\"to\":\"user that will receive the avatar on L1\",\"tokenId\":\"id of the token that will be send\"}},\"setChildAvatarToken(address)\":{\"details\":\"Change the address of the child avatar token contract\"},\"setRootTunnel(address)\":{\"details\":\"set the fxRootTunnel addresswe cannot override setFxRootTunnel, we must wait for the latest matic-fx release\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Avatar Polygon matic-fx bridge on L2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/avatar/PolygonAvatarTunnel.sol\":\"PolygonAvatarTunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xf5b498e3d85967e8bedcfa7f10078d6018b6168eb56926d1b18a526e68e1c467\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/@maticnetwork/pos-portal/root/RootToken/IMintableERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// import {IERC721} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\n\\npragma solidity 0.8.2;\\n\\ninterface IMintableERC721 {\\n    // is IERC721 {\\n\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing\\n     * @dev Should be callable only by MintableERC721Predicate\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom token is being minted\\n     * @param tokenId tokenId being minted\\n     */\\n    function mint(address user, uint256 tokenId) external;\\n\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing with metadata from L2\\n     * @dev Should be callable only by MintableERC721Predicate\\n     * Make sure minting is only done either by this function/ \\ud83d\\udc46\\n     * @param user user address for whom token is being minted\\n     * @param tokenId tokenId being minted\\n     * @param metaData Associated token metadata, to be decoded & set using `setTokenMetadata`\\n     *\\n     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must\\n     * implement this method\\n     */\\n    function mint(\\n        address user,\\n        uint256 tokenId,\\n        bytes calldata metaData\\n    ) external;\\n\\n    /**\\n     * @notice check if token already exists, return true if it does exist\\n     * @dev this check will be used by the predicate to determine if the token needs to be minted or transfered\\n     * @param tokenId tokenId being checked\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    // This one came form ERC721 and is used by the predicate!!!\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf55de53097913882caa72ed9d73bd32294354f7c87c69f05ae544c9d1bcbd9a8\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/avatar/PolygonAvatarTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {FxBaseChildTunnel} from \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts-0.8/interfaces/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {ERC2771Handler} from \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport {IERC721MandatoryTokenReceiver} from \\\"../../../common/interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport {IMintableERC721} from \\\"../../../common/interfaces/@maticnetwork/pos-portal/root/RootToken/IMintableERC721.sol\\\";\\n\\n/// @title Avatar Polygon matic-fx bridge on L2\\ncontract PolygonAvatarTunnel is FxBaseChildTunnel, IERC721MandatoryTokenReceiver, ERC2771Handler, Ownable {\\n    IERC721 public childAvatarToken;\\n\\n    event AvatarReceivedFromL1(\\n        IERC721 indexed childAvatarToken,\\n        address indexed depositor,\\n        address indexed to,\\n        uint256 id\\n    );\\n    event AvatarSentToL1(\\n        IERC721 indexed childAvatarToken,\\n        address indexed depositor,\\n        address indexed userAddress,\\n        uint256 id\\n    );\\n\\n    constructor(\\n        address _fxChild,\\n        IERC721 _childAvatarToken,\\n        address _trustedForwarder\\n    ) FxBaseChildTunnel(_fxChild) {\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n        childAvatarToken = _childAvatarToken;\\n    }\\n\\n    /**\\n     * @dev send token to L1, messages emitted by this contract are proved to the root tunnel.\\n     * @param to user that will receive the avatar on L1\\n     * @param tokenId id of the token that will be send\\n     */\\n    function sendAvatarToL1(address to, uint256 tokenId) external {\\n        require(to != address(0), \\\"PolygonAvatarTunnel: INVALID_USER\\\");\\n        childAvatarToken.safeTransferFrom(_msgSender(), address(this), tokenId);\\n        _sendMessageToRoot(abi.encode(_msgSender(), to, tokenId));\\n        emit AvatarSentToL1(childAvatarToken, _msgSender(), to, tokenId);\\n    }\\n\\n    function onERC721Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* tokenId */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC721BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata, /* ids */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC721MandatoryTokenReceiver).interfaceId;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @dev Change the address of the child avatar token contract\\n    function setChildAvatarToken(IERC721 _childAvatarToken) external onlyOwner {\\n        childAvatarToken = _childAvatarToken;\\n    }\\n\\n    /// @dev set the fxRootTunnel address\\n    /// @dev we cannot override setFxRootTunnel, we must wait for the latest matic-fx release\\n    function setRootTunnel(address _fxRootTunnel) external onlyOwner {\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    /// @dev get a message from L1, transfer the avatar to the user\\n    function _processMessageFromRoot(\\n        uint256, /* stateId */\\n        address sender, /* AvatarTunel.sol */\\n        bytes memory syncData\\n    ) internal override {\\n        require(fxRootTunnel != address(0), \\\"PolygonAvatarTunnel: fxRootTunnel must be set\\\");\\n        require(sender == fxRootTunnel, \\\"PolygonAvatarTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        (address depositor, address to, uint256 tokenId) = abi.decode(syncData, (address, address, uint256));\\n        childAvatarToken.safeTransferFrom(address(this), to, tokenId);\\n        emit AvatarReceivedFromL1(childAvatarToken, depositor, to, tokenId);\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x1b224796ecde353059a61b396821e5ac71abf463f3b3b7925c750f006f2a2db1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200124f3803806200124f833981016040819052620000349162000144565b600080546001600160a01b0319166001600160a01b038516179055620000636200005d620000a6565b620000c3565b600280546001600160a01b0319166001600160a01b03831617905550600480546001600160a01b0319166001600160a01b039290921691909117905550620001b0565b6000620000bd6200011560201b62000a441760201c565b90505b90565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002546000906001600160a01b03163314156200013c575060131936013560601c620000c0565b5033620000c0565b60008060006060848603121562000159578283fd5b8351620001668162000197565b6020850151909350620001798162000197565b60408501519092506200018c8162000197565b809150509250925092565b6001600160a01b0381168114620001ad57600080fd5b50565b61108f80620001c06000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063715018a6116100b25780639a7c4b7111610081578063da74222811610066578063da742228146102cc578063e3e906c3146102df578063f2fde38b146102f25761011b565b80639a7c4b71146102a8578063ce1b815f146102bb5761011b565b8063715018a6146102725780637f1e9cb01461027a578063888370941461028d5780638da5cb5b146102a05761011b565b80633632d225116100ee5780633632d225146101d9578063450d11f0146101ec5780634b808c4614610217578063572b6c05146102505761011b565b806301ffc9a71461012057806306406b4f14610148578063150b7a021461015d5780631c04fd4d146101c6575b600080fd5b61013361012e366004610f39565b610305565b60405190151581526020015b60405180910390f35b61015b610156366004610d79565b6103ea565b005b61019561016b366004610e9d565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161013f565b61015b6101d4366004610f0e565b61048d565b61015b6101e7366004610d79565b610640565b6000546101ff906001600160a01b031681565b6040516001600160a01b03909116815260200161013f565b610195610225366004610dde565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61013361025e366004610d79565b6002546001600160a01b0390811691161490565b61015b6106de565b6001546101ff906001600160a01b031681565b61015b61029b366004610d79565b610759565b6101ff6107d8565b61015b6102b6366004610f79565b6107e8565b6002546001600160a01b03166101ff565b61015b6102da366004610d79565b6108af565b6004546101ff906001600160a01b031681565b61015b610300366004610d79565b61094d565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061039857507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b806103e457507fffffffff0000000000000000000000000000000000000000000000000000000082167f5e8bf64400000000000000000000000000000000000000000000000000000000145b92915050565b6103f2610a8e565b6001600160a01b03166104036107d8565b6001600160a01b03161461045e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0382166105095760405162461bcd60e51b815260206004820152602160248201527f506f6c79676f6e41766174617254756e6e656c3a20494e56414c49445f55534560448201527f52000000000000000000000000000000000000000000000000000000000000006064820152608401610455565b6004546001600160a01b03166342842e0e610522610a8e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401600060405180830381600087803b15801561058857600080fd5b505af115801561059c573d6000803e3d6000fd5b505050506105e46105ab610a8e565b604080516001600160a01b0392831660208201529185169082015260608101839052608001604051602081830303815290604052610a9d565b816001600160a01b03166105f6610a8e565b6004546040518481526001600160a01b0392831692909116907f2ad967ec541e15be7f82d57835188b69477d99b71004443476e42f7f2c8ed6c49060200160405180910390a45050565b610648610a8e565b6001600160a01b03166106596107d8565b6001600160a01b0316146106af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610455565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6106e6610a8e565b6001600160a01b03166106f76107d8565b6001600160a01b03161461074d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610455565b6107576000610ad7565b565b6001546001600160a01b0316156106af5760405162461bcd60e51b815260206004820152602a60248201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160448201527f4c52454144595f534554000000000000000000000000000000000000000000006064820152608401610455565b6003546001600160a01b03165b90565b6000546001600160a01b031633146108685760405162461bcd60e51b815260206004820152602160248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f52000000000000000000000000000000000000000000000000000000000000006064820152608401610455565b6108a9848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b3692505050565b50505050565b6108b7610a8e565b6001600160a01b03166108c86107d8565b6001600160a01b03161461091e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610455565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610955610a8e565b6001600160a01b03166109666107d8565b6001600160a01b0316146109bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610455565b6001600160a01b038116610a385760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610455565b610a4181610ad7565b50565b6002546000906001600160a01b0316331415610a8757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6107e5565b50336107e5565b6000610a98610a44565b905090565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681604051610acc9190610fd3565b60405180910390a150565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001546001600160a01b0316610bb45760405162461bcd60e51b815260206004820152602d60248201527f506f6c79676f6e41766174617254756e6e656c3a206678526f6f7454756e6e6560448201527f6c206d75737420626520736574000000000000000000000000000000000000006064820152608401610455565b6001546001600160a01b03838116911614610c375760405162461bcd60e51b815260206004820152602d60248201527f506f6c79676f6e41766174617254756e6e656c3a20494e56414c49445f53454e60448201527f4445525f46524f4d5f524f4f54000000000000000000000000000000000000006064820152608401610455565b600080600083806020019051810190610c509190610d9c565b600480546040517f42842e0e00000000000000000000000000000000000000000000000000000000815230928101929092526001600160a01b038085166024840152604483018490529497509295509093509116906342842e0e90606401600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b50506004546040518481526001600160a01b0386811694508781169350909116907fc7dff5e788eba410bfdb8cbe25aceec8488f8dba9aa83640472610e4a833b0cb9060200160405180910390a4505050505050565b60008083601f840112610d43578182fd5b50813567ffffffffffffffff811115610d5a578182fd5b602083019150836020828501011115610d7257600080fd5b9250929050565b600060208284031215610d8a578081fd5b8135610d9581611044565b9392505050565b600080600060608486031215610db0578182fd5b8351610dbb81611044565b6020850151909350610dcc81611044565b80925050604084015190509250925092565b60008060008060008060808789031215610df6578182fd5b8635610e0181611044565b95506020870135610e1181611044565b9450604087013567ffffffffffffffff80821115610e2d578384fd5b818901915089601f830112610e40578384fd5b813581811115610e4e578485fd5b8a60208083028501011115610e61578485fd5b602083019650809550506060890135915080821115610e7e578384fd5b50610e8b89828a01610d32565b979a9699509497509295939492505050565b600080600080600060808688031215610eb4578081fd5b8535610ebf81611044565b94506020860135610ecf81611044565b935060408601359250606086013567ffffffffffffffff811115610ef1578182fd5b610efd88828901610d32565b969995985093965092949392505050565b60008060408385031215610f20578182fd5b8235610f2b81611044565b946020939093013593505050565b600060208284031215610f4a578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d95578182fd5b60008060008060608587031215610f8e578384fd5b843593506020850135610fa081611044565b9250604085013567ffffffffffffffff811115610fbb578283fd5b610fc787828801610d32565b95989497509550505050565b6000602080835283518082850152825b81811015610fff57858101830151858201604001528201610fe3565b818111156110105783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6001600160a01b0381168114610a4157600080fdfea264697066735822122079f48e21ed7c0960e31e142ced515a667ec5476be3ee0488f66d573b988300fa64736f6c63430008020033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendAvatarToL1(address,uint256)": {
        "details": "send token to L1, messages emitted by this contract are proved to the root tunnel.",
        "params": {
          "to": "user that will receive the avatar on L1",
          "tokenId": "id of the token that will be send"
        }
      },
      "setChildAvatarToken(address)": {
        "details": "Change the address of the child avatar token contract"
      },
      "setRootTunnel(address)": {
        "details": "set the fxRootTunnel addresswe cannot override setFxRootTunnel, we must wait for the latest matic-fx release"
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Avatar Polygon matic-fx bridge on L2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1928,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatarTunnel.sol:PolygonAvatarTunnel",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1930,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatarTunnel.sol:PolygonAvatarTunnel",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 25110,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatarTunnel.sol:PolygonAvatarTunnel",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2778,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatarTunnel.sol:PolygonAvatarTunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 34670,
        "contract": "src/solc_0.8/polygon/child/avatar/PolygonAvatarTunnel.sol:PolygonAvatarTunnel",
        "label": "childAvatarToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC721)5063"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)5063": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      }
    }
  }
}