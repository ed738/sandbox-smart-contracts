{
  "address": "0x54aA8de5EB26413Cf9f93473A8CF49ce07264899",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonLandTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_polygonLandTunnel",
          "type": "address"
        }
      ],
      "name": "setPolygonLandTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "x",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "y",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf79c73febb4efa05ffddcad14e1f2f4cbb711d0b7e5c57a82818e0b5f1619294",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x54aA8de5EB26413Cf9f93473A8CF49ce07264899",
    "transactionIndex": 9,
    "gasUsed": "4715876",
    "logsBloom": "0x
    "blockHash": "0xe5adb1cca4f58f3b6bfb4dbe05291ee3637adecd71d6d2fc2f3df778748937f4",
    "transactionHash": "0xf79c73febb4efa05ffddcad14e1f2f4cbb711d0b7e5c57a82818e0b5f1619294",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 24119127,
        "transactionHash": "0xf79c73febb4efa05ffddcad14e1f2f4cbb711d0b7e5c57a82818e0b5f1619294",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000218220e15224e00000000000000000000000000000000000000000000000000ecbaebd3c0ad3f50000000000000000000000000000000000000000000005107e8eb25f985d1d4b0000000000000000000000000000000000000000000000000eaa2c9c5ab8af150000000000000000000000000000000000000000000005107eb0348079af422b",
        "logIndex": 28,
        "blockHash": "0xe5adb1cca4f58f3b6bfb4dbe05291ee3637adecd71d6d2fc2f3df778748937f4"
      }
    ],
    "blockNumber": 24119127,
    "cumulativeGasUsed": "5924828",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "47fba0febe3a930dce88da207402de3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonLandTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_polygonLandTunnel\",\"type\":\"address\"}],\"name\":\"setPolygonLandTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"x\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"burn(uint256)\":{\"params\":{\"id\":\"The token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"The token which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"height()\":{\"returns\":{\"_0\":\"height\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface\"},\"returns\":{\"_0\":\"True if the interface is supported\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token contract\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"returns\":{\"_0\":\"The URI of the token\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"width()\":{\"returns\":{\"_0\":\"width\"}},\"x(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the x coordinates\"}},\"y(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the y coordinates\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token`id` from `from`.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"height()\":{\"notice\":\"total height of the map\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"},\"width()\":{\"notice\":\"total width of the map\"},\"x(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"y(uint256)\":{\"notice\":\"y coordinate of Land token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/land/PolygonLandV1.sol\":\"PolygonLandV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x33620beff0655c5e728a72fff76fb6ce2dc32fc6b61eb8e435b12ed1adf31525\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9ef7f2874f4a491f253a81eb4c5b9a7b6467a287aa0c32ac3dd684260a3cd7ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC721BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./WithSuperOperators.sol\\\";\\nimport \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"./ERC2771Handler.sol\\\";\\n\\ncontract ERC721BaseToken is IERC721Upgradeable, WithSuperOperators, ERC2771Handler {\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = address(uint160(ownerData));\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _superOperators[msgSender] || _operatorsForAll[owner][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(\\n            msgSender == sender || _superOperators[msgSender] || _operatorsForAll[sender][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(_msgSender(), _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract, you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented. See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = address(uint160(ownerData));\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _superOperators[msgSender] || _operatorsForAll[from][msgSender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msgSender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\\n            require(_checkOnERC721BatchReceived(msgSender, from, to, ids, data), \\\"ERC721_BATCH_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_APPROVAL_CHANGE\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721ReceiverUpgradeable(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address recieving the token.\\n    /// @param id The token being transferred.\\n    /// @return isMetaTx Whether or not the transaction is a MetaTx.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(\\n            msgSender == owner ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender] ||\\n                (operatorEnabled && _operators[id] == msgSender),\\n            \\\"UNAUTHORIZED_TRANSFER\\\"\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0x6ff6d9ad77e791411e3803e359746baf02176926f330e4e8cd82068d814781e3\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"../../../common/BaseWithStorage/ERC721BaseToken.sol\\\";\\n\\ncontract PolygonLandBaseToken is ERC721BaseToken {\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() public view returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() public view returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() public view returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() public view returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function x(uint256 id) public view returns (uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id % GRID_SIZE;\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function y(uint256 id) public view returns (uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id / GRID_SIZE;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return string(abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", uint2str(id), \\\"/metadata.json\\\"));\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function _mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        uint256 quadId;\\n        uint256 id = x + y * GRID_SIZE;\\n\\n        if (size == 1) {\\n            quadId = id;\\n        } else if (size == 3) {\\n            quadId = LAYER_3x3 + id;\\n        } else if (size == 6) {\\n            quadId = LAYER_6x6 + id;\\n        } else if (size == 12) {\\n            quadId = LAYER_12x12 + id;\\n        } else if (size == 24) {\\n            quadId = LAYER_24x24 + id;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n\\n        require(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] == 0, \\\"Already minted as 24x24\\\");\\n\\n        uint256 toX = x + size;\\n        uint256 toY = y + size;\\n        if (size <= 12) {\\n            require(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] == 0, \\\"Already minted as 12x12\\\");\\n        } else {\\n            for (uint256 x12i = x; x12i < toX; x12i += 12) {\\n                for (uint256 y12i = y; y12i < toY; y12i += 12) {\\n                    uint256 id12x12 = LAYER_12x12 + x12i + y12i * GRID_SIZE;\\n                    require(_owners[id12x12] == 0, \\\"Already minted as 12x12\\\");\\n                }\\n            }\\n        }\\n\\n        if (size <= 6) {\\n            require(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE] == 0, \\\"Already minted as 6x6\\\");\\n        } else {\\n            for (uint256 x6i = x; x6i < toX; x6i += 6) {\\n                for (uint256 y6i = y; y6i < toY; y6i += 6) {\\n                    uint256 id6x6 = LAYER_6x6 + x6i + y6i * GRID_SIZE;\\n                    require(_owners[id6x6] == 0, \\\"Already minted as 6x6\\\");\\n                }\\n            }\\n        }\\n\\n        if (size <= 3) {\\n            require(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE] == 0, \\\"Already minted as 3x3\\\");\\n        } else {\\n            for (uint256 x3i = x; x3i < toX; x3i += 3) {\\n                for (uint256 y3i = y; y3i < toY; y3i += 3) {\\n                    uint256 id3x3 = LAYER_3x3 + x3i + y3i * GRID_SIZE;\\n                    require(_owners[id3x3] == 0, \\\"Already minted as 3x3\\\");\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 idPath = _idInPath(i, size, x, y);\\n            require(_owners[id] == 0, \\\"Already minted\\\");\\n            emit Transfer(address(0), to, idPath);\\n        }\\n\\n        _owners[quadId] = uint256(uint160(address(to)));\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(_msgSender(), address(0), to, size, x, y, data);\\n    }\\n\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"invalid data\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _superOperators[_msgSender()] || _operatorsForAll[from][_msgSender()],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(_msgSender(), from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _superOperators[_msgSender()] || _operatorsForAll[from][_msgSender()],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(_msgSender(), from, to, size, x, y, data);\\n    }\\n\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) external view returns (bool) {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        uint256 quadId;\\n        uint256 id = x + y * GRID_SIZE;\\n\\n        if (size == 1) {\\n            quadId = id;\\n        } else if (size == 3) {\\n            quadId = LAYER_3x3 + id;\\n        } else if (size == 6) {\\n            quadId = LAYER_6x6 + id;\\n        } else if (size == 12) {\\n            quadId = LAYER_12x12 + id;\\n        } else if (size == 24) {\\n            quadId = LAYER_24x24 + id;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n\\n        if (_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] != 0) return true;\\n        uint256 toX = x + size;\\n        uint256 toY = y + size;\\n        if (size <= 12) {\\n            if (_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x12i = x; x12i < toX; x12i += 12) {\\n                for (uint256 y12i = y; y12i < toY; y12i += 12) {\\n                    uint256 id12x12 = LAYER_12x12 + x12i + y12i * GRID_SIZE;\\n                    if (_owners[id12x12] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        if (size <= 6) {\\n            if (_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x6i = x; x6i < toX; x6i += 6) {\\n                for (uint256 y6i = y; y6i < toY; y6i += 6) {\\n                    uint256 id6x6 = LAYER_6x6 + x6i + y6i * GRID_SIZE;\\n                    if (_owners[id6x6] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        if (size <= 3) {\\n            if (_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x3i = x; x3i < toX; x3i += 3) {\\n                for (uint256 y3i = y; y3i < toY; y3i += 3) {\\n                    uint256 id3x3 = LAYER_3x3 + x3i + y3i * GRID_SIZE;\\n                    if (_owners[id3x3] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < size * size; i++) {\\n            if (_owners[id] != 0) return true;\\n        }\\n        return false;\\n    }\\n\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        if (size == 1) {\\n            uint256 id1x1 = x + y * GRID_SIZE;\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(uint160(address(to)));\\n        } else {\\n            _regroup(from, to, size, x, y);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // alow ids to follow a path in a quad\\n            return (x + (i % size)) + ((y + row) * GRID_SIZE);\\n        } else {\\n            return ((x + size) - (1 + (i % size))) + ((y + row) * GRID_SIZE);\\n        }\\n    }\\n\\n    function _regroup(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        if (size == 3) {\\n            _regroup3x3(from, to, x, y, true);\\n        } else if (size == 6) {\\n            _regroup6x6(from, to, x, y, true);\\n        } else if (size == 12) {\\n            _regroup12x12(from, to, x, y, true);\\n        } else if (size == 24) {\\n            _regroup24x24(from, to, x, y, true);\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _regroup3x3(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_3x3 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 3; xi++) {\\n            for (uint256 yi = y; yi < y + 3; yi++) {\\n                ownerOfAll = _checkAndClear(from, xi + yi * GRID_SIZE) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup6x6(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_6x6 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 6; xi += 3) {\\n            for (uint256 yi = y; yi < y + 6; yi += 3) {\\n                bool ownAllIndividual = _regroup3x3(from, to, xi, yi, false);\\n                uint256 id3x3 = LAYER_3x3 + xi + yi * GRID_SIZE;\\n                uint256 owner3x3 = _owners[id3x3];\\n                if (owner3x3 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner3x3 == uint256(uint160(address(from))), \\\"not owner of 3x3 quad\\\");\\n                    }\\n                    _owners[id3x3] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner3x3 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup12x12(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_12x12 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 12; xi += 6) {\\n            for (uint256 yi = y; yi < y + 12; yi += 6) {\\n                bool ownAllIndividual = _regroup6x6(from, to, xi, yi, false);\\n                uint256 id6x6 = LAYER_6x6 + xi + yi * GRID_SIZE;\\n                uint256 owner6x6 = _owners[id6x6];\\n                if (owner6x6 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner6x6 == uint256(uint160(address(from))), \\\"not owner of 6x6 quad\\\");\\n                    }\\n                    _owners[id6x6] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner6x6 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup24x24(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_24x24 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 24; xi += 12) {\\n            for (uint256 yi = y; yi < y + 24; yi += 12) {\\n                bool ownAllIndividual = _regroup12x12(from, to, xi, yi, false);\\n                uint256 id12x12 = LAYER_12x12 + xi + yi * GRID_SIZE;\\n                uint256 owner12x12 = _owners[id12x12];\\n                if (owner12x12 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner12x12 == uint256(uint160(address(from))), \\\"not owner of 12x12 quad\\\");\\n                    }\\n                    _owners[id12x12] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner12x12 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads not parent quad\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll || _owners[quadId] == uint256(uint160(address(from)));\\n    }\\n\\n    function _ownerOf(uint256 id) internal view override returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            return address(uint160(owner1x1)); //we check if the quad exists as an 1x1 quad, then 3x3, and so on..\\n        } else {\\n            address owner3x3 = address(uint160(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE]));\\n            if (owner3x3 != address(0)) {\\n                return owner3x3;\\n            } else {\\n                address owner6x6 = address(uint160(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE]));\\n                if (owner6x6 != address(0)) {\\n                    return owner6x6;\\n                } else {\\n                    address owner12x12 = address(\\n                        uint160(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE])\\n                    );\\n                    if (owner12x12 != address(0)) {\\n                        return owner12x12;\\n                    } else {\\n                        return address(uint160(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE]));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkAndClear(address from, uint256 id) internal returns (bool) {\\n        uint256 owner = _owners[id];\\n        if (owner != 0) {\\n            require(address(uint160(owner)) == from, \\\"not owner\\\");\\n            _owners[id] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        override\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            owner = address(uint160(owner1x1));\\n            operatorEnabled = (owner1x1 / 2**255) == 1;\\n        } else {\\n            address owner3x3 = address(uint160(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE]));\\n            if (owner3x3 != address(uint160(0))) {\\n                owner = owner3x3;\\n                operatorEnabled = false;\\n            } else {\\n                address owner6x6 = address(uint160(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE]));\\n                if (owner6x6 != address(uint160(0))) {\\n                    owner = owner6x6;\\n                    operatorEnabled = false;\\n                } else {\\n                    address owner12x12 = address(\\n                        uint160(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE])\\n                    );\\n                    if (owner12x12 != address(uint160(0))) {\\n                        owner = owner12x12;\\n                        operatorEnabled = false;\\n                    } else {\\n                        owner = address(uint160(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE]));\\n                        operatorEnabled = false;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc4c757db8cf6e3ad9eac1956bbea1b0f59af450fabb5f699674b06f91e3cb999\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./PolygonLandBaseToken.sol\\\";\\n\\n// @todo - natspec comments\\n\\ncontract PolygonLandV1 is PolygonLandBaseToken {\\n    address public polygonLandTunnel;\\n\\n    bool internal _initialized;\\n\\n    modifier initializer() {\\n        require(!_initialized, \\\"PolygonLandV1: Contract already initialized\\\");\\n        _;\\n    }\\n\\n    function initialize(address trustedForwarder) external initializer {\\n        _admin = _msgSender();\\n        _initialized = true;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    function setPolygonLandTunnel(address _polygonLandTunnel) external onlyAdmin {\\n        polygonLandTunnel = _polygonLandTunnel;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyAdmin {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function mint(\\n        address user,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external {\\n        require(_msgSender() == polygonLandTunnel, \\\"Invalid sender\\\");\\n        _mintQuad(user, size, x, y, data);\\n    }\\n\\n    // Empty storage space in contracts for future enhancements\\n    // ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13)\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x604832023e2e57a9f5ad8d658def64e85add7d306ce1c9fc3f921538adaa9f2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615498806100206000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c80636e9960c311610160578063ac9fe421116100d8578063ce1b815f1161008c578063e985e9c511610071578063e985e9c514610569578063eaa5e0671461057c578063eeb5a5d11461058f57610277565b8063ce1b815f14610545578063da7422281461055657610277565b8063b88d4fde116100bd578063b88d4fde1461050c578063c4d66de81461051f578063c87b56dd1461053257610277565b8063ac9fe421146104e6578063b49c99b8146104f957610277565b80638f2839701161012f5780639ededf77116101145780639ededf77146102f9578063a0c0fc0e146104c0578063a22cb465146104d357610277565b80638f2839701461047457806395d89b411461048757610277565b80636e9960c31461042a57806370a082311461043b57806379cc67901461044e5780637f87ec681461046157610277565b806338bb305a116101f357806355064d85116101c25780636259e7e1116101a75780636259e7e1146103d85780636352211e146103eb578063654b748a146103fe57610277565b806355064d85146103a3578063572b6c05146103b657610277565b806338bb305a146103575780633f4263ef1461036a57806342842e0e1461037d57806342966c681461039057610277565b80630ef267431161024a57806323b872dd1161022f57806323b872dd1461031e57806328cfbd46146103315780632b9917461461034457610277565b80630ef26743146102f957806315ddc5351461030b57610277565b806301ffc9a71461027c57806306fdde03146102a4578063081812fc146102b9578063095ea7b3146102e4575b600080fd5b61028f61028a366004615150565b6105a2565b60405190151581526020015b60405180910390f35b6102ac610641565b60405161029b91906152fe565b6102cc6102c7366004615188565b610679565b6040516001600160a01b03909116815260200161029b565b6102f76102f23660046150be565b610718565b005b6101985b60405190815260200161029b565b6102f7610319366004614ea4565b610850565b6102f761032c366004614f74565b6108ca565b6102f761033f366004614ea4565b61097f565b6102f7610352366004614f74565b6109f4565b6102f7610365366004615015565b610b84565b6102fd610378366004615188565b610ddc565b6102f761038b366004614f74565b610e4b565b6102f761039e366004615188565b610e66565b61028f6103b13660046151a0565b610e83565b61028f6103c4366004614d75565b6002546001600160a01b0390811691161490565b6102fd6103e6366004615188565b61144d565b6102cc6103f9366004615188565b6114bc565b61028f61040c366004614d75565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03166102cc565b6102fd610449366004614d75565b61151f565b6102f761045c3660046150be565b611593565b6007546102cc906001600160a01b031681565b6102f7610482366004614d75565b6116f0565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526102ac565b6102f76104ce366004614d75565b6117c0565b6102f76104e1366004615095565b611849565b6102f76104f4366004615095565b61185f565b6102f76105073660046150e7565b611942565b6102f761051a366004614faf565b6119b9565b6102f761052d366004614d75565b611a46565b6102ac610540366004615188565b611b60565b6002546001600160a01b03166102cc565b6102f7610564366004614d75565b611bf3565b61028f610577366004614d8f565b611c7c565b6102f761058a366004614dc1565b611cd3565b6102f761059d366004614f32565b61223b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061060557507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061063957507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b60008060006106878461232c565b90925090506001600160a01b0382166106e75760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b801561070d575050506000818152600660205260409020546001600160a01b031661063c565b60009250505061063c565b6000818152600460205260408120549081906107326125f5565b90506001600160a01b03821661078a5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106de565b806001600160a01b0316826001600160a01b031614806107c257506001600160a01b03811660009081526001602052604090205460ff165b806107f257506001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b61083e5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106de565b61084983868661263f565b5050505050565b6108c2868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506126e9915050565b505050505050565b6108d5838383612aad565b506108e1838383612cc5565b6001600160a01b0382163b151580156109065750610906826317a2fd9160e21b612d83565b1561097a5761092e6109166125f5565b84848460405180602001604052806000815250612e4a565b61097a5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106de565b505050565b6108c2868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506126e9915050565b60008181526004602052604081205490610a0c6125f5565b90506001600160a01b038516610a645760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e4445520000000000000000000000000060448201526064016106de565b846001600160a01b0316816001600160a01b03161480610a9c57506001600160a01b03811660009081526001602052604090205460ff165b80610acc57506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b610b185760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106de565b846001600160a01b0316826001600160a01b031614610b795760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e4445520000000000000000000000000000000060448201526064016106de565b61084982858561263f565b6001600160a01b038716610bda5760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106de565b6001600160a01b038616610c305760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106de565b866001600160a01b0316610c426125f5565b6001600160a01b031614610d0a5760016000610c5c6125f5565b6001600160a01b0316815260208101919091526040016000205460ff1680610cbe57506001600160a01b038716600090815260056020526040812090610ca06125f5565b6001600160a01b0316815260208101919091526040016000205460ff165b610d0a5760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e7366657251756164000060448201526064016106de565b610d178787878787612f0a565b610d218580615362565b6001600160a01b03881660009081526003602052604081208054909190610d49908490615381565b90915550610d5990508580615362565b6001600160a01b03871660009081526003602052604081208054909190610d81908490615311565b90915550610dd39050610d926125f5565b888888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061309092505050565b50505050505050565b600080610de8836131f4565b6001600160a01b03161415610e3f5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106de565b610639610198836153f6565b61097a838383604051806020016040528060008152506119b9565b610e80610e716125f5565b610e7a836131f4565b836134a3565b50565b6000610e8f84846153f6565b158015610ea35750610ea184836153f6565b155b610eef5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106de565b610efb84610198615381565b8311158015610f155750610f1184610198615381565b8211155b610f615760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106de565b600080610f7061019885615362565b610f7a9086615311565b90508560011415610f8d57809150611038565b8560031415610fab57610fa481600160f81b615311565b9150611038565b8560061415610fc257610fa481600160f91b615311565b85600c1415610fd957610fa481600360f81b615311565b8560181415610ff057610fa481600160fa1b615311565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106de565b6004600061019861104a60188861534e565b611055906018615362565b61105f9190615362565b61106a60188961534e565b611075906018615362565b61108390600160fa1b615311565b61108d9190615311565b8152602001908152602001600020546000146110ae57600192505050611446565b60006110ba8787615311565b905060006110c88887615311565b9050600c881161114f57600460006101986110e4600c8a61534e565b6110ef90600c615362565b6110f99190615362565b611104600c8b61534e565b61110f90600c615362565b61111d90600360f81b615311565b6111279190615311565b81526020019081526020016000205460001461114a576001945050505050611446565b6111d8565b865b828110156111d657865b828110156111c357600061117161019883615362565b61117f84600360f81b615311565b6111899190615311565b600081815260046020526040902054909150156111b0576001975050505050505050611446565b506111bc600c82615311565b905061115b565b506111cf600c82615311565b9050611151565b505b6006881161125d57600460006101986111f260068a61534e565b6111fd906006615362565b6112079190615362565b61121260068b61534e565b61121d906006615362565b61122b90600160f91b615311565b6112359190615311565b815260200190815260200160002054600014611258576001945050505050611446565b6112e6565b865b828110156112e457865b828110156112d157600061127f61019883615362565b61128d84600160f91b615311565b6112979190615311565b600081815260046020526040902054909150156112be576001975050505050505050611446565b506112ca600682615311565b9050611269565b506112dd600682615311565b905061125f565b505b6003881161136b576004600061019861130060038a61534e565b61130b906003615362565b6113159190615362565b61132060038b61534e565b61132b906003615362565b61133990600160f81b615311565b6113439190615311565b815260200190815260200160002054600014611366576001945050505050611446565b6113f4565b865b828110156113f257865b828110156113df57600061138d61019883615362565b61139b84600160f81b615311565b6113a59190615311565b600081815260046020526040902054909150156113cc576001975050505050505050611446565b506113d8600382615311565b9050611377565b506113eb600382615311565b905061136d565b505b60005b6114018980615362565b81101561143c576000848152600460205260409020541561142a57600195505050505050611446565b80611434816153db565b9150506113f7565b5060009450505050505b9392505050565b600080611459836131f4565b6001600160a01b031614156114b05760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106de565b6106396101988361534e565b60006114c7826131f4565b90506001600160a01b03811661063c5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e00000000000000000000000000000060448201526064016106de565b60006001600160a01b0382166115775760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e4552000000000000000000000000000060448201526064016106de565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b0382166115e95760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106de565b6000806115f58361232c565b9150915060006116036125f5565b9050846001600160a01b0316816001600160a01b03161480611646575081801561164657506000848152600660205260409020546001600160a01b038281169116145b8061166957506001600160a01b03811660009081526001602052604090205460ff165b8061169957506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b6116e55760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e00000000000000000000000000000060448201526064016106de565b6108498584866134a3565b6000546001600160a01b0316331461174a5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e4945440000000000000000000000000060448201526064016106de565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461181a5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106de565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61185b6118546125f5565b83836135ab565b5050565b6000546001600160a01b031633146118df5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f7273000000000000000000000000000000000000000060648201526084016106de565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b6007546001600160a01b03166119566125f5565b6001600160a01b0316146119ac5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c69642073656e64657200000000000000000000000000000000000060448201526064016106de565b6108498585858585613681565b6119c4848484612aad565b506119d0848484612cc5565b6001600160a01b0383163b15611a40576119f46119eb6125f5565b85858585612e4a565b611a405760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106de565b50505050565b60075474010000000000000000000000000000000000000000900460ff1615611ad75760405162461bcd60e51b815260206004820152602b60248201527f506f6c79676f6e4c616e6456313a20436f6e747261637420616c72656164792060448201527f696e697469616c697a656400000000000000000000000000000000000000000060648201526084016106de565b611adf6125f5565b600080546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff1991821617909155600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556002805492841692909116919091179055610e80565b60606000611b6d836131f4565b6001600160a01b03161415611bc45760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f7420657869737400000000000000000000000000000060448201526064016106de565b611bcd82613ed5565b604051602001611bdd91906151f7565b6040516020818303038152906040529050919050565b6000546001600160a01b03163314611c4d5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106de565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff1680611cca57506001600160a01b03821660009081526001602052604090205460ff165b90505b92915050565b6001600160a01b038a16611d295760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106de565b6001600160a01b038916611d7f5760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106de565b8685148015611d8d57508483145b611dd95760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642064617461000000000000000000000000000000000000000060448201526064016106de565b896001600160a01b0316611deb6125f5565b6001600160a01b031614611ed85760016000611e056125f5565b6001600160a01b0316815260208101919091526040016000205460ff1680611e6757506001600160a01b038a16600090815260056020526040812090611e496125f5565b6001600160a01b0316815260208101919091526040016000205460ff165b611ed85760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f756164730000000000000000000000000000000000000000000000000000000060648201526084016106de565b6000805b88811015611f925760008a8a83818110611f0657634e487b7160e01b600052603260045260246000fd5b905060200201359050611f688d8d838c8c87818110611f3557634e487b7160e01b600052603260045260246000fd5b905060200201358b8b88818110611f5c57634e487b7160e01b600052603260045260246000fd5b90506020020135612f0a565b611f728180615362565b611f7c9084615311565b9250508080611f8a906153db565b915050611edc565b506001600160a01b038b1660009081526003602052604081208054839290611fbb908490615381565b90915550506001600160a01b038a1660009081526003602052604081208054839290611fe8908490615311565b90915550506001600160a01b038a163b1515801561201257506120128a6317a2fd9160e21b612d83565b1561222e5760008167ffffffffffffffff81111561204057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612069578160200160208202803683370190505b5090506000805b8a81101561216f5760008c8c8381811061209a57634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6120b08280615362565b81101561215a5761210f81838e8e878181106120dc57634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8881811061210357634e487b7160e01b600052603260045260246000fd5b9050602002013561404f565b85858151811061212f57634e487b7160e01b600052603260045260246000fd5b602090810291909101015283612144816153db565b9450508080612152906153db565b9150506120a6565b50508080612167906153db565b915050612070565b506121ba61217b6125f5565b8e8e8589898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506140f292505050565b61222b5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106de565b50505b5050505050505050505050565b6001600160a01b0383166122915760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e64657220616464726573730000000000000000000060448201526064016106de565b600061229b6125f5565b9050836001600160a01b0316816001600160a01b031614806122d557506001600160a01b03811660009081526001602052604090205460ff165b6123215760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c0000000060448201526064016106de565b611a408484846135ab565b6000807fff0000000000000000000000000000000000000000000000000000000000000083161561239f5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106de565b60006123ad610198856153f6565b905060006123bd6101988661534e565b60008681526004602052604090205490915080156123f0579350836123e6600160ff1b8261534e565b60011493506125ed565b600060048161019861240360038761534e565b61240e906003615362565b6124189190615362565b61242360038861534e565b61242e906003615362565b61243c90600160f81b615311565b6124469190615311565b815260208101919091526040016000205490506001600160a01b0381161561247457809550600094506125eb565b600060048161019861248760068861534e565b612492906006615362565b61249c9190615362565b6124a760068961534e565b6124b2906006615362565b6124c090600160f91b615311565b6124ca9190615311565b815260208101919091526040016000205490506001600160a01b038116156124f857809650600095506125e9565b600060048161019861250b600c8961534e565b61251690600c615362565b6125209190615362565b61252b600c8a61534e565b61253690600c615362565b61254490600360f81b615311565b61254e9190615311565b815260208101919091526040016000205490506001600160a01b0381161561257c57809750600096506125e7565b6004600061019861258e60188961534e565b612599906018615362565b6125a39190615362565b6125ae60188a61534e565b6125b9906018615362565b6125c790600160fa1b615311565b6125d19190615311565b8152602001908152602001600020549750600096505b505b505b505b505050915091565b6002546000906001600160a01b031633141561263857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610676565b5033610676565b826001600160a01b0383166126605761265b82858360006141b1565b6126a2565b61266d82858360016141b1565b6000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b60006126f36125f5565b90506000866001600160a01b0316826001600160a01b0316148061272f57506001600160a01b03821660009081526001602052604090205460ff165b8061275f57506001600160a01b0380881660009081526005602090815260408083209386168352929052205460ff165b90506001600160a01b0387166127b75760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106de565b6001600160a01b03861661280d5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106de565b845160005b818110156129a457600087828151811061283c57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806128528361232c565b915091508b6001600160a01b0316826001600160a01b0316146128b75760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e4552000000000060448201526064016106de565b85806128e457508080156128e457506000838152600660205260409020546001600160a01b038881169116145b6129305760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016106de565b60008381526004602052604081205461294d918591908e906141b1565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050808061299c906153db565b915050612812565b50866001600160a01b0316886001600160a01b031614612a19576001600160a01b038816600090815260036020526040812080548392906129e6908490615381565b90915550506001600160a01b03871660009081526003602052604081208054839290612a13908490615311565b90915550505b6001600160a01b0387163b15158015612a4557508380612a455750612a45876317a2fd9160e21b612d83565b15612aa357612a5783898989896140f2565b612aa35760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f5452414e534645525f52454a4543544544000060448201526064016106de565b5050505050505050565b6000806000612abb8461232c565b915091506000612ac96125f5565b90506001600160a01b038316612b215760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106de565b866001600160a01b0316836001600160a01b031614612b825760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e455200000000000000000060448201526064016106de565b6001600160a01b038616612bd85760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106de565b826001600160a01b0316816001600160a01b03161480612c1057506001600160a01b03811660009081526001602052604090205460ff165b80612c4057506001600160a01b0380881660009081526005602090815260408083209385168352929052205460ff165b80612c6c5750818015612c6c57506000858152600660205260409020546001600160a01b038281169116145b612cb85760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016106de565b5060019695505050505050565b6001600160a01b0383166000908152600360205260408120805491612ce9836153c4565b90915550506001600160a01b0382166000908152600360205260408120805491612d12836153db565b9190505550612d3d8160046000612d268590565b8152602001908152602001600020548460006141b1565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a11612e3657634e487b7160e01b600052600160045260246000fd5b828015612e405750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401612e7f94939291906152cc565b602060405180830381600087803b158015612e9957600080fd5b505af1158015612ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed1919061516c565b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149150505b95945050505050565b8260011415613011576000612f2161019883615362565b612f2b9084615311565b90506000612f38826131f4565b90506001600160a01b038116612f905760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106de565b866001600160a01b0316816001600160a01b031614612ff15760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e736665725175616400000000000060448201526064016106de565b5060009081526004602052604090206001600160a01b038516905561301e565b61301e8585858585614244565b60005b61302b8480615362565b8110156108c25761303e8185858561404f565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480613088816153db565b915050613021565b6001600160a01b0385163b151580156130b557506130b5856317a2fd9160e21b612d83565b15610dd35760006130c68580615362565b67ffffffffffffffff8111156130ec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613115578160200160208202803683370190505b50905060005b6131258680615362565b811015613175576131388187878761404f565b82828151811061315857634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061316d816153db565b91505061311b565b5061318388888884866140f2565b612aa35760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106de565b60007fff000000000000000000000000000000000000000000000000000000000000008216156132665760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106de565b6000613274610198846153f6565b905060006132846101988561534e565b60008581526004602052604090205490915080156132a657925061063c915050565b60006004816101986132b960038761534e565b6132c4906003615362565b6132ce9190615362565b6132d960038861534e565b6132e4906003615362565b6132f290600160f81b615311565b6132fc9190615311565b815260208101919091526040016000205490506001600160a01b0381161561332957935061063c92505050565b600060048161019861333c60068861534e565b613347906006615362565b6133519190615362565b61335c60068961534e565b613367906006615362565b61337590600160f91b615311565b61337f9190615311565b815260208101919091526040016000205490506001600160a01b038116156133ad57945061063c9350505050565b60006004816101986133c0600c8961534e565b6133cb90600c615362565b6133d59190615362565b6133e0600c8a61534e565b6133eb90600c615362565b6133f990600360f81b615311565b6134039190615311565b815260208101919091526040016000205490506001600160a01b0381161561343257955061063c945050505050565b6004600061019861344460188961534e565b61344f906018615362565b6134599190615362565b61346460188a61534e565b61346f906018615362565b61347d90600160fa1b615311565b6134879190615311565b815260200190815260200160002054965050505050505061063c565b816001600160a01b0316836001600160a01b0316146135045760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016106de565b807401000000000000000000000000000000000000000061352a6001600160ff1b615381565b6000838152600460209081526040808320805494909416949094179092556001600160a01b03871681526003909152908120805491613568836153c4565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6001600160a01b03821660009081526001602052604090205460ff16156136145760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e474500000000000000000060448201526064016106de565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0385166136d75760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f2061646472657373000000000000000000000000000060448201526064016106de565b6136e184846153f6565b1580156136f557506136f384836153f6565b155b6137415760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106de565b61374d84610198615381565b8311158015613767575061376384610198615381565b8211155b6137b35760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106de565b6000806137c261019885615362565b6137cc9086615311565b905085600114156137df57809150613842565b85600314156137fd576137f681600160f81b615311565b9150613842565b8560061415613814576137f681600160f91b615311565b85600c141561382b576137f681600360f81b615311565b8560181415610ff0576137f681600160fa1b615311565b6004600061019861385460188861534e565b61385f906018615362565b6138699190615362565b61387460188961534e565b61387f906018615362565b61388d90600160fa1b615311565b6138979190615311565b8152602001908152602001600020546000146138f55760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320323478323400000000000000000060448201526064016106de565b60006139018787615311565b9050600061390f8887615311565b9050600c88116139d1576004600061019861392b600c8a61534e565b61393690600c615362565b6139409190615362565b61394b600c8b61534e565b61395690600c615362565b61396490600360f81b615311565b61396e9190615311565b8152602001908152602001600020546000146139cc5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320313278313200000000000000000060448201526064016106de565b613a92565b865b82811015613a9057865b82811015613a7d5760006139f361019883615362565b613a0184600360f81b615311565b613a0b9190615311565b60008181526004602052604090205490915015613a6a5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320313278313200000000000000000060448201526064016106de565b50613a76600c82615311565b90506139dd565b50613a89600c82615311565b90506139d3565b505b60068811613b525760046000610198613aac60068a61534e565b613ab7906006615362565b613ac19190615362565b613acc60068b61534e565b613ad7906006615362565b613ae590600160f91b615311565b613aef9190615311565b815260200190815260200160002054600014613b4d5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320367836000000000000000000000060448201526064016106de565b613c13565b865b82811015613c1157865b82811015613bfe576000613b7461019883615362565b613b8284600160f91b615311565b613b8c9190615311565b60008181526004602052604090205490915015613beb5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320367836000000000000000000000060448201526064016106de565b50613bf7600682615311565b9050613b5e565b50613c0a600682615311565b9050613b54565b505b60038811613cd35760046000610198613c2d60038a61534e565b613c38906003615362565b613c429190615362565b613c4d60038b61534e565b613c58906003615362565b613c6690600160f81b615311565b613c709190615311565b815260200190815260200160002054600014613cce5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320337833000000000000000000000060448201526064016106de565b613d94565b865b82811015613d9257865b82811015613d7f576000613cf561019883615362565b613d0384600160f81b615311565b613d0d9190615311565b60008181526004602052604090205490915015613d6c5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320337833000000000000000000000060448201526064016106de565b50613d78600382615311565b9050613cdf565b50613d8b600382615311565b9050613cd5565b505b60005b613da18980615362565b811015613e60576000613db6828b8b8b61404f565b60008681526004602052604090205490915015613e155760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206d696e74656400000000000000000000000000000000000060448201526064016106de565b60405181906001600160a01b038d16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080613e58816153db565b915050613d97565b5060008481526004602052604090206001600160a01b038a169055613e858880615362565b6001600160a01b038a1660009081526003602052604081208054909190613ead908490615311565b90915550613eca9050613ebe6125f5565b60008b8b8b8b8b613090565b505050505050505050565b606081613f16575060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015261063c565b8160005b8115613f405780613f2a816153db565b9150613f399050600a8361534e565b9150613f1a565b60008167ffffffffffffffff811115613f6957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613f93576020820181803683370190505b509050815b851561404657613fa9600182615381565b90506000613fb8600a8861534e565b613fc390600a615362565b613fcd9088615381565b613fd8906030615329565b905060008160f81b90508084848151811061400357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061403d600a8961534e565b97505050613f98565b50949350505050565b60008061405c858761534e565b90506140696002826153f6565b6140aa5761019861407a8285615311565b6140849190615362565b61408e86886153f6565b6140989086615311565b6140a29190615311565b9150506140ea565b6101986140b78285615311565b6140c19190615362565b6140cb86886153f6565b6140d6906001615311565b6140e08787615311565b6140989190615381565b949350505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b81526004016141279493929190615263565b602060405180830381600087803b15801561414157600080fd5b505af1158015614155573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614179919061516c565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b80156141f5576000848152600460205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055611a40565b6001600160a01b03821661420e6001600160ff1b615381565b841673ffffffffffffffffffffffffffffffffffffffff1916176004600086815260208101919091526040016000205550505050565b61424e83836153f6565b158015614262575061426083826153f6565b155b6142ae5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106de565b6142ba83610198615381565b82111580156142d457506142d083610198615381565b8111155b6143205760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106de565b826003141561433d57614337858584846001614382565b50610849565b826006141561435457614337858584846001614653565b82600c141561436b576143378585848460016147ef565b8260181415610ff05761433785858484600161498b565b60008061439161019885615362565b61439b9086615311565b905060006143ad82600160f81b615311565b90506001865b6143be886003615311565b81101561442857865b6143d2886003615311565b811015614415576143f88b6143e961019884615362565b6143f39085615311565b614ba6565b80156144015750825b92508061440d816153db565b9150506143c7565b5080614420816153db565b9150506143b3565b5084156146475780614622576000828152600460205260409020546001600160a01b038a1614806144c457506001600160a01b0389166004600061019861447060068b61534e565b61447b906006615362565b6144859190615362565b61449060068c61534e565b61449b906006615362565b6144a990600160f91b615311565b6144b39190615311565b815260200190815260200160002054145b8061453a57506001600160a01b038916600460006101986144e6600c8b61534e565b6144f190600c615362565b6144fb9190615362565b614506600c8c61534e565b61451190600c615362565b61451f90600360f81b615311565b6145299190615311565b815260200190815260200160002054145b806145b057506001600160a01b0389166004600061019861455c60188b61534e565b614567906018615362565b6145719190615362565b61457c60188c61534e565b614587906018615362565b61459590600160fa1b615311565b61459f9190615311565b815260200190815260200160002054145b6146225760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e7420717561647300000000000000000000000000000000000000000060648201526084016106de565b5060009081526004602052604090206001600160a01b03871690555060019050612f01565b98975050505050505050565b60008061466261019885615362565b61466c9086615311565b9050600061467e82600160f91b615311565b90506001865b61468f886006615311565b8110156147a757865b6146a3886006615311565b8110156147945760006146ba8c8c85856000614382565b905060006146ca61019884615362565b6146d885600160f81b615311565b6146e29190615311565b60008181526004602052604090205490915080156147675782614757578d6001600160a01b031681146147575760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203378332071756164000000000000000000000060448201526064016106de565b6000828152600460205260408120555b828061477257508015155b801561477b5750855b955050505060038161478d9190615311565b9050614698565b506147a0600382615311565b9050614684565b5084156146475780614622576000828152600460205260409020546001600160a01b038a16148061453a57506001600160a01b038916600460006101986144e6600c8b61534e565b6000806147fe61019885615362565b6148089086615311565b9050600061481a82600360f81b615311565b90506001865b61482b88600c615311565b81101561494357865b61483f88600c615311565b8110156149305760006148568c8c85856000614653565b9050600061486661019884615362565b61487485600160f91b615311565b61487e9190615311565b600081815260046020526040902054909150801561490357826148f3578d6001600160a01b031681146148f35760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203678362071756164000000000000000000000060448201526064016106de565b6000828152600460205260408120555b828061490e57508015155b80156149175750855b95505050506006816149299190615311565b9050614834565b5061493c600682615311565b9050614820565b5084156146475780614622576000828152600460205260409020546001600160a01b038a1614806145b057506001600160a01b0389166004600061019861455c60188b61534e565b60008061499a61019885615362565b6149a49086615311565b905060006149b682600160fa1b615311565b90506001865b6149c7886018615311565b811015614adf57865b6149db886018615311565b811015614acc5760006149f28c8c858560006147ef565b90506000614a0261019884615362565b614a1085600360f81b615311565b614a1a9190615311565b6000818152600460205260409020549091508015614a9f5782614a8f578d6001600160a01b03168114614a8f5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66203132783132207175616400000000000000000060448201526064016106de565b6000828152600460205260408120555b8280614aaa57508015155b8015614ab35750855b9550505050600c81614ac59190615311565b90506149d0565b50614ad8600c82615311565b90506149bc565b508415614b775780614622576000828152600460205260409020546001600160a01b038a16146146225760405162461bcd60e51b815260206004820152602a60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f74207060448201527f6172656e7420717561640000000000000000000000000000000000000000000060648201526084016106de565b8080614b9957506000828152600460205260409020546001600160a01b038a16145b9998505050505050505050565b6000818152600460205260408120548015614c3457836001600160a01b0316816001600160a01b031614614c1c5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016106de565b50506000818152600460205260408120556001611ccd565b5060009392505050565b80356001600160a01b038116811461063c57600080fd5b60008083601f840112614c66578081fd5b50813567ffffffffffffffff811115614c7d578182fd5b6020830191508360208083028501011115614c9757600080fd5b9250929050565b8035801515811461063c57600080fd5b60008083601f840112614cbf578182fd5b50813567ffffffffffffffff811115614cd6578182fd5b602083019150836020828501011115614c9757600080fd5b600082601f830112614cfe578081fd5b813567ffffffffffffffff80821115614d1957614d19615436565b604051601f8301601f19908116603f01168101908282118183101715614d4157614d41615436565b81604052838152866020858801011115614d59578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215614d86578081fd5b611cca82614c3e565b60008060408385031215614da1578081fd5b614daa83614c3e565b9150614db860208401614c3e565b90509250929050565b60008060008060008060008060008060c08b8d031215614ddf578586fd5b614de88b614c3e565b9950614df660208c01614c3e565b985060408b013567ffffffffffffffff80821115614e12578788fd5b614e1e8e838f01614c55565b909a50985060608d0135915080821115614e36578788fd5b614e428e838f01614c55565b909850965060808d0135915080821115614e5a578586fd5b614e668e838f01614c55565b909650945060a08d0135915080821115614e7e578384fd5b50614e8b8d828e01614cae565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215614ebc578182fd5b614ec587614c3e565b9550614ed360208801614c3e565b9450604087013567ffffffffffffffff80821115614eef578384fd5b614efb8a838b01614c55565b90965094506060890135915080821115614f13578384fd5b50614f2089828a01614cae565b979a9699509497509295939492505050565b600080600060608486031215614f46578283fd5b614f4f84614c3e565b9250614f5d60208501614c3e565b9150614f6b60408501614c9e565b90509250925092565b600080600060608486031215614f88578283fd5b614f9184614c3e565b9250614f9f60208501614c3e565b9150604084013590509250925092565b60008060008060808587031215614fc4578384fd5b614fcd85614c3e565b9350614fdb60208601614c3e565b925060408501359150606085013567ffffffffffffffff811115614ffd578182fd5b61500987828801614cee565b91505092959194509250565b600080600080600080600060c0888a03121561502f578283fd5b61503888614c3e565b965061504660208901614c3e565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115615076578283fd5b6150828a828b01614cae565b989b979a50959850939692959293505050565b600080604083850312156150a7578182fd5b6150b083614c3e565b9150614db860208401614c9e565b600080604083850312156150d0578182fd5b6150d983614c3e565b946020939093013593505050565b600080600080600060a086880312156150fe578283fd5b61510786614c3e565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115615137578182fd5b61514388828901614cee565b9150509295509295909350565b600060208284031215615161578081fd5b81356114468161544c565b60006020828403121561517d578081fd5b81516114468161544c565b600060208284031215615199578081fd5b5035919050565b6000806000606084860312156151b4578081fd5b505081359360208301359350604090920135919050565b600081518084526151e3816020860160208601615398565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f008252825161522f81601f850160208701615398565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b818110156152b75784518452938201939282019260010161529b565b505050838103606085015261464781866151cb565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e4060808301846151cb565b600060208252611cca60208301846151cb565b600082198211156153245761532461540a565b500190565b600060ff821660ff84168060ff038211156153465761534661540a565b019392505050565b60008261535d5761535d615420565b500490565b600081600019048311821515161561537c5761537c61540a565b500290565b6000828210156153935761539361540a565b500390565b60005b838110156153b357818101518382015260200161539b565b83811115611a405750506000910152565b6000816153d3576153d361540a565b506000190190565b60006000198214156153ef576153ef61540a565b5060010190565b60008261540557615405615420565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e8057600080fdfea26469706673582212201e1aad0a5ca5fbf37baba3877b88851a98143a07cc06abb5769ff3443c56157964736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c80636e9960c311610160578063ac9fe421116100d8578063ce1b815f1161008c578063e985e9c511610071578063e985e9c514610569578063eaa5e0671461057c578063eeb5a5d11461058f57610277565b8063ce1b815f14610545578063da7422281461055657610277565b8063b88d4fde116100bd578063b88d4fde1461050c578063c4d66de81461051f578063c87b56dd1461053257610277565b8063ac9fe421146104e6578063b49c99b8146104f957610277565b80638f2839701161012f5780639ededf77116101145780639ededf77146102f9578063a0c0fc0e146104c0578063a22cb465146104d357610277565b80638f2839701461047457806395d89b411461048757610277565b80636e9960c31461042a57806370a082311461043b57806379cc67901461044e5780637f87ec681461046157610277565b806338bb305a116101f357806355064d85116101c25780636259e7e1116101a75780636259e7e1146103d85780636352211e146103eb578063654b748a146103fe57610277565b806355064d85146103a3578063572b6c05146103b657610277565b806338bb305a146103575780633f4263ef1461036a57806342842e0e1461037d57806342966c681461039057610277565b80630ef267431161024a57806323b872dd1161022f57806323b872dd1461031e57806328cfbd46146103315780632b9917461461034457610277565b80630ef26743146102f957806315ddc5351461030b57610277565b806301ffc9a71461027c57806306fdde03146102a4578063081812fc146102b9578063095ea7b3146102e4575b600080fd5b61028f61028a366004615150565b6105a2565b60405190151581526020015b60405180910390f35b6102ac610641565b60405161029b91906152fe565b6102cc6102c7366004615188565b610679565b6040516001600160a01b03909116815260200161029b565b6102f76102f23660046150be565b610718565b005b6101985b60405190815260200161029b565b6102f7610319366004614ea4565b610850565b6102f761032c366004614f74565b6108ca565b6102f761033f366004614ea4565b61097f565b6102f7610352366004614f74565b6109f4565b6102f7610365366004615015565b610b84565b6102fd610378366004615188565b610ddc565b6102f761038b366004614f74565b610e4b565b6102f761039e366004615188565b610e66565b61028f6103b13660046151a0565b610e83565b61028f6103c4366004614d75565b6002546001600160a01b0390811691161490565b6102fd6103e6366004615188565b61144d565b6102cc6103f9366004615188565b6114bc565b61028f61040c366004614d75565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03166102cc565b6102fd610449366004614d75565b61151f565b6102f761045c3660046150be565b611593565b6007546102cc906001600160a01b031681565b6102f7610482366004614d75565b6116f0565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526102ac565b6102f76104ce366004614d75565b6117c0565b6102f76104e1366004615095565b611849565b6102f76104f4366004615095565b61185f565b6102f76105073660046150e7565b611942565b6102f761051a366004614faf565b6119b9565b6102f761052d366004614d75565b611a46565b6102ac610540366004615188565b611b60565b6002546001600160a01b03166102cc565b6102f7610564366004614d75565b611bf3565b61028f610577366004614d8f565b611c7c565b6102f761058a366004614dc1565b611cd3565b6102f761059d366004614f32565b61223b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061060557507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061063957507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b60008060006106878461232c565b90925090506001600160a01b0382166106e75760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b801561070d575050506000818152600660205260409020546001600160a01b031661063c565b60009250505061063c565b6000818152600460205260408120549081906107326125f5565b90506001600160a01b03821661078a5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106de565b806001600160a01b0316826001600160a01b031614806107c257506001600160a01b03811660009081526001602052604090205460ff165b806107f257506001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b61083e5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106de565b61084983868661263f565b5050505050565b6108c2868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506126e9915050565b505050505050565b6108d5838383612aad565b506108e1838383612cc5565b6001600160a01b0382163b151580156109065750610906826317a2fd9160e21b612d83565b1561097a5761092e6109166125f5565b84848460405180602001604052806000815250612e4a565b61097a5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106de565b505050565b6108c2868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506126e9915050565b60008181526004602052604081205490610a0c6125f5565b90506001600160a01b038516610a645760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e4445520000000000000000000000000060448201526064016106de565b846001600160a01b0316816001600160a01b03161480610a9c57506001600160a01b03811660009081526001602052604090205460ff165b80610acc57506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b610b185760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106de565b846001600160a01b0316826001600160a01b031614610b795760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e4445520000000000000000000000000000000060448201526064016106de565b61084982858561263f565b6001600160a01b038716610bda5760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106de565b6001600160a01b038616610c305760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106de565b866001600160a01b0316610c426125f5565b6001600160a01b031614610d0a5760016000610c5c6125f5565b6001600160a01b0316815260208101919091526040016000205460ff1680610cbe57506001600160a01b038716600090815260056020526040812090610ca06125f5565b6001600160a01b0316815260208101919091526040016000205460ff165b610d0a5760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e7366657251756164000060448201526064016106de565b610d178787878787612f0a565b610d218580615362565b6001600160a01b03881660009081526003602052604081208054909190610d49908490615381565b90915550610d5990508580615362565b6001600160a01b03871660009081526003602052604081208054909190610d81908490615311565b90915550610dd39050610d926125f5565b888888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061309092505050565b50505050505050565b600080610de8836131f4565b6001600160a01b03161415610e3f5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106de565b610639610198836153f6565b61097a838383604051806020016040528060008152506119b9565b610e80610e716125f5565b610e7a836131f4565b836134a3565b50565b6000610e8f84846153f6565b158015610ea35750610ea184836153f6565b155b610eef5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106de565b610efb84610198615381565b8311158015610f155750610f1184610198615381565b8211155b610f615760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106de565b600080610f7061019885615362565b610f7a9086615311565b90508560011415610f8d57809150611038565b8560031415610fab57610fa481600160f81b615311565b9150611038565b8560061415610fc257610fa481600160f91b615311565b85600c1415610fd957610fa481600360f81b615311565b8560181415610ff057610fa481600160fa1b615311565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106de565b6004600061019861104a60188861534e565b611055906018615362565b61105f9190615362565b61106a60188961534e565b611075906018615362565b61108390600160fa1b615311565b61108d9190615311565b8152602001908152602001600020546000146110ae57600192505050611446565b60006110ba8787615311565b905060006110c88887615311565b9050600c881161114f57600460006101986110e4600c8a61534e565b6110ef90600c615362565b6110f99190615362565b611104600c8b61534e565b61110f90600c615362565b61111d90600360f81b615311565b6111279190615311565b81526020019081526020016000205460001461114a576001945050505050611446565b6111d8565b865b828110156111d657865b828110156111c357600061117161019883615362565b61117f84600360f81b615311565b6111899190615311565b600081815260046020526040902054909150156111b0576001975050505050505050611446565b506111bc600c82615311565b905061115b565b506111cf600c82615311565b9050611151565b505b6006881161125d57600460006101986111f260068a61534e565b6111fd906006615362565b6112079190615362565b61121260068b61534e565b61121d906006615362565b61122b90600160f91b615311565b6112359190615311565b815260200190815260200160002054600014611258576001945050505050611446565b6112e6565b865b828110156112e457865b828110156112d157600061127f61019883615362565b61128d84600160f91b615311565b6112979190615311565b600081815260046020526040902054909150156112be576001975050505050505050611446565b506112ca600682615311565b9050611269565b506112dd600682615311565b905061125f565b505b6003881161136b576004600061019861130060038a61534e565b61130b906003615362565b6113159190615362565b61132060038b61534e565b61132b906003615362565b61133990600160f81b615311565b6113439190615311565b815260200190815260200160002054600014611366576001945050505050611446565b6113f4565b865b828110156113f257865b828110156113df57600061138d61019883615362565b61139b84600160f81b615311565b6113a59190615311565b600081815260046020526040902054909150156113cc576001975050505050505050611446565b506113d8600382615311565b9050611377565b506113eb600382615311565b905061136d565b505b60005b6114018980615362565b81101561143c576000848152600460205260409020541561142a57600195505050505050611446565b80611434816153db565b9150506113f7565b5060009450505050505b9392505050565b600080611459836131f4565b6001600160a01b031614156114b05760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106de565b6106396101988361534e565b60006114c7826131f4565b90506001600160a01b03811661063c5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e00000000000000000000000000000060448201526064016106de565b60006001600160a01b0382166115775760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e4552000000000000000000000000000060448201526064016106de565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b0382166115e95760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106de565b6000806115f58361232c565b9150915060006116036125f5565b9050846001600160a01b0316816001600160a01b03161480611646575081801561164657506000848152600660205260409020546001600160a01b038281169116145b8061166957506001600160a01b03811660009081526001602052604090205460ff165b8061169957506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b6116e55760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e00000000000000000000000000000060448201526064016106de565b6108498584866134a3565b6000546001600160a01b0316331461174a5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e4945440000000000000000000000000060448201526064016106de565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461181a5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106de565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61185b6118546125f5565b83836135ab565b5050565b6000546001600160a01b031633146118df5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f7273000000000000000000000000000000000000000060648201526084016106de565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b6007546001600160a01b03166119566125f5565b6001600160a01b0316146119ac5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c69642073656e64657200000000000000000000000000000000000060448201526064016106de565b6108498585858585613681565b6119c4848484612aad565b506119d0848484612cc5565b6001600160a01b0383163b15611a40576119f46119eb6125f5565b85858585612e4a565b611a405760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106de565b50505050565b60075474010000000000000000000000000000000000000000900460ff1615611ad75760405162461bcd60e51b815260206004820152602b60248201527f506f6c79676f6e4c616e6456313a20436f6e747261637420616c72656164792060448201527f696e697469616c697a656400000000000000000000000000000000000000000060648201526084016106de565b611adf6125f5565b600080546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff1991821617909155600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556002805492841692909116919091179055610e80565b60606000611b6d836131f4565b6001600160a01b03161415611bc45760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f7420657869737400000000000000000000000000000060448201526064016106de565b611bcd82613ed5565b604051602001611bdd91906151f7565b6040516020818303038152906040529050919050565b6000546001600160a01b03163314611c4d5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106de565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff1680611cca57506001600160a01b03821660009081526001602052604090205460ff165b90505b92915050565b6001600160a01b038a16611d295760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106de565b6001600160a01b038916611d7f5760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106de565b8685148015611d8d57508483145b611dd95760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642064617461000000000000000000000000000000000000000060448201526064016106de565b896001600160a01b0316611deb6125f5565b6001600160a01b031614611ed85760016000611e056125f5565b6001600160a01b0316815260208101919091526040016000205460ff1680611e6757506001600160a01b038a16600090815260056020526040812090611e496125f5565b6001600160a01b0316815260208101919091526040016000205460ff165b611ed85760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f756164730000000000000000000000000000000000000000000000000000000060648201526084016106de565b6000805b88811015611f925760008a8a83818110611f0657634e487b7160e01b600052603260045260246000fd5b905060200201359050611f688d8d838c8c87818110611f3557634e487b7160e01b600052603260045260246000fd5b905060200201358b8b88818110611f5c57634e487b7160e01b600052603260045260246000fd5b90506020020135612f0a565b611f728180615362565b611f7c9084615311565b9250508080611f8a906153db565b915050611edc565b506001600160a01b038b1660009081526003602052604081208054839290611fbb908490615381565b90915550506001600160a01b038a1660009081526003602052604081208054839290611fe8908490615311565b90915550506001600160a01b038a163b1515801561201257506120128a6317a2fd9160e21b612d83565b1561222e5760008167ffffffffffffffff81111561204057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612069578160200160208202803683370190505b5090506000805b8a81101561216f5760008c8c8381811061209a57634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6120b08280615362565b81101561215a5761210f81838e8e878181106120dc57634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8881811061210357634e487b7160e01b600052603260045260246000fd5b9050602002013561404f565b85858151811061212f57634e487b7160e01b600052603260045260246000fd5b602090810291909101015283612144816153db565b9450508080612152906153db565b9150506120a6565b50508080612167906153db565b915050612070565b506121ba61217b6125f5565b8e8e8589898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506140f292505050565b61222b5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106de565b50505b5050505050505050505050565b6001600160a01b0383166122915760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e64657220616464726573730000000000000000000060448201526064016106de565b600061229b6125f5565b9050836001600160a01b0316816001600160a01b031614806122d557506001600160a01b03811660009081526001602052604090205460ff165b6123215760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c0000000060448201526064016106de565b611a408484846135ab565b6000807fff0000000000000000000000000000000000000000000000000000000000000083161561239f5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106de565b60006123ad610198856153f6565b905060006123bd6101988661534e565b60008681526004602052604090205490915080156123f0579350836123e6600160ff1b8261534e565b60011493506125ed565b600060048161019861240360038761534e565b61240e906003615362565b6124189190615362565b61242360038861534e565b61242e906003615362565b61243c90600160f81b615311565b6124469190615311565b815260208101919091526040016000205490506001600160a01b0381161561247457809550600094506125eb565b600060048161019861248760068861534e565b612492906006615362565b61249c9190615362565b6124a760068961534e565b6124b2906006615362565b6124c090600160f91b615311565b6124ca9190615311565b815260208101919091526040016000205490506001600160a01b038116156124f857809650600095506125e9565b600060048161019861250b600c8961534e565b61251690600c615362565b6125209190615362565b61252b600c8a61534e565b61253690600c615362565b61254490600360f81b615311565b61254e9190615311565b815260208101919091526040016000205490506001600160a01b0381161561257c57809750600096506125e7565b6004600061019861258e60188961534e565b612599906018615362565b6125a39190615362565b6125ae60188a61534e565b6125b9906018615362565b6125c790600160fa1b615311565b6125d19190615311565b8152602001908152602001600020549750600096505b505b505b505b505050915091565b6002546000906001600160a01b031633141561263857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610676565b5033610676565b826001600160a01b0383166126605761265b82858360006141b1565b6126a2565b61266d82858360016141b1565b6000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b60006126f36125f5565b90506000866001600160a01b0316826001600160a01b0316148061272f57506001600160a01b03821660009081526001602052604090205460ff165b8061275f57506001600160a01b0380881660009081526005602090815260408083209386168352929052205460ff165b90506001600160a01b0387166127b75760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106de565b6001600160a01b03861661280d5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106de565b845160005b818110156129a457600087828151811061283c57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806128528361232c565b915091508b6001600160a01b0316826001600160a01b0316146128b75760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e4552000000000060448201526064016106de565b85806128e457508080156128e457506000838152600660205260409020546001600160a01b038881169116145b6129305760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016106de565b60008381526004602052604081205461294d918591908e906141b1565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050808061299c906153db565b915050612812565b50866001600160a01b0316886001600160a01b031614612a19576001600160a01b038816600090815260036020526040812080548392906129e6908490615381565b90915550506001600160a01b03871660009081526003602052604081208054839290612a13908490615311565b90915550505b6001600160a01b0387163b15158015612a4557508380612a455750612a45876317a2fd9160e21b612d83565b15612aa357612a5783898989896140f2565b612aa35760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f5452414e534645525f52454a4543544544000060448201526064016106de565b5050505050505050565b6000806000612abb8461232c565b915091506000612ac96125f5565b90506001600160a01b038316612b215760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106de565b866001600160a01b0316836001600160a01b031614612b825760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e455200000000000000000060448201526064016106de565b6001600160a01b038616612bd85760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106de565b826001600160a01b0316816001600160a01b03161480612c1057506001600160a01b03811660009081526001602052604090205460ff165b80612c4057506001600160a01b0380881660009081526005602090815260408083209385168352929052205460ff165b80612c6c5750818015612c6c57506000858152600660205260409020546001600160a01b038281169116145b612cb85760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016106de565b5060019695505050505050565b6001600160a01b0383166000908152600360205260408120805491612ce9836153c4565b90915550506001600160a01b0382166000908152600360205260408120805491612d12836153db565b9190505550612d3d8160046000612d268590565b8152602001908152602001600020548460006141b1565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a11612e3657634e487b7160e01b600052600160045260246000fd5b828015612e405750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401612e7f94939291906152cc565b602060405180830381600087803b158015612e9957600080fd5b505af1158015612ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed1919061516c565b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149150505b95945050505050565b8260011415613011576000612f2161019883615362565b612f2b9084615311565b90506000612f38826131f4565b90506001600160a01b038116612f905760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106de565b866001600160a01b0316816001600160a01b031614612ff15760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e736665725175616400000000000060448201526064016106de565b5060009081526004602052604090206001600160a01b038516905561301e565b61301e8585858585614244565b60005b61302b8480615362565b8110156108c25761303e8185858561404f565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480613088816153db565b915050613021565b6001600160a01b0385163b151580156130b557506130b5856317a2fd9160e21b612d83565b15610dd35760006130c68580615362565b67ffffffffffffffff8111156130ec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613115578160200160208202803683370190505b50905060005b6131258680615362565b811015613175576131388187878761404f565b82828151811061315857634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061316d816153db565b91505061311b565b5061318388888884866140f2565b612aa35760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106de565b60007fff000000000000000000000000000000000000000000000000000000000000008216156132665760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106de565b6000613274610198846153f6565b905060006132846101988561534e565b60008581526004602052604090205490915080156132a657925061063c915050565b60006004816101986132b960038761534e565b6132c4906003615362565b6132ce9190615362565b6132d960038861534e565b6132e4906003615362565b6132f290600160f81b615311565b6132fc9190615311565b815260208101919091526040016000205490506001600160a01b0381161561332957935061063c92505050565b600060048161019861333c60068861534e565b613347906006615362565b6133519190615362565b61335c60068961534e565b613367906006615362565b61337590600160f91b615311565b61337f9190615311565b815260208101919091526040016000205490506001600160a01b038116156133ad57945061063c9350505050565b60006004816101986133c0600c8961534e565b6133cb90600c615362565b6133d59190615362565b6133e0600c8a61534e565b6133eb90600c615362565b6133f990600360f81b615311565b6134039190615311565b815260208101919091526040016000205490506001600160a01b0381161561343257955061063c945050505050565b6004600061019861344460188961534e565b61344f906018615362565b6134599190615362565b61346460188a61534e565b61346f906018615362565b61347d90600160fa1b615311565b6134879190615311565b815260200190815260200160002054965050505050505061063c565b816001600160a01b0316836001600160a01b0316146135045760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016106de565b807401000000000000000000000000000000000000000061352a6001600160ff1b615381565b6000838152600460209081526040808320805494909416949094179092556001600160a01b03871681526003909152908120805491613568836153c4565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6001600160a01b03821660009081526001602052604090205460ff16156136145760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e474500000000000000000060448201526064016106de565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0385166136d75760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f2061646472657373000000000000000000000000000060448201526064016106de565b6136e184846153f6565b1580156136f557506136f384836153f6565b155b6137415760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106de565b61374d84610198615381565b8311158015613767575061376384610198615381565b8211155b6137b35760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106de565b6000806137c261019885615362565b6137cc9086615311565b905085600114156137df57809150613842565b85600314156137fd576137f681600160f81b615311565b9150613842565b8560061415613814576137f681600160f91b615311565b85600c141561382b576137f681600360f81b615311565b8560181415610ff0576137f681600160fa1b615311565b6004600061019861385460188861534e565b61385f906018615362565b6138699190615362565b61387460188961534e565b61387f906018615362565b61388d90600160fa1b615311565b6138979190615311565b8152602001908152602001600020546000146138f55760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320323478323400000000000000000060448201526064016106de565b60006139018787615311565b9050600061390f8887615311565b9050600c88116139d1576004600061019861392b600c8a61534e565b61393690600c615362565b6139409190615362565b61394b600c8b61534e565b61395690600c615362565b61396490600360f81b615311565b61396e9190615311565b8152602001908152602001600020546000146139cc5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320313278313200000000000000000060448201526064016106de565b613a92565b865b82811015613a9057865b82811015613a7d5760006139f361019883615362565b613a0184600360f81b615311565b613a0b9190615311565b60008181526004602052604090205490915015613a6a5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320313278313200000000000000000060448201526064016106de565b50613a76600c82615311565b90506139dd565b50613a89600c82615311565b90506139d3565b505b60068811613b525760046000610198613aac60068a61534e565b613ab7906006615362565b613ac19190615362565b613acc60068b61534e565b613ad7906006615362565b613ae590600160f91b615311565b613aef9190615311565b815260200190815260200160002054600014613b4d5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320367836000000000000000000000060448201526064016106de565b613c13565b865b82811015613c1157865b82811015613bfe576000613b7461019883615362565b613b8284600160f91b615311565b613b8c9190615311565b60008181526004602052604090205490915015613beb5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320367836000000000000000000000060448201526064016106de565b50613bf7600682615311565b9050613b5e565b50613c0a600682615311565b9050613b54565b505b60038811613cd35760046000610198613c2d60038a61534e565b613c38906003615362565b613c429190615362565b613c4d60038b61534e565b613c58906003615362565b613c6690600160f81b615311565b613c709190615311565b815260200190815260200160002054600014613cce5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320337833000000000000000000000060448201526064016106de565b613d94565b865b82811015613d9257865b82811015613d7f576000613cf561019883615362565b613d0384600160f81b615311565b613d0d9190615311565b60008181526004602052604090205490915015613d6c5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320337833000000000000000000000060448201526064016106de565b50613d78600382615311565b9050613cdf565b50613d8b600382615311565b9050613cd5565b505b60005b613da18980615362565b811015613e60576000613db6828b8b8b61404f565b60008681526004602052604090205490915015613e155760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206d696e74656400000000000000000000000000000000000060448201526064016106de565b60405181906001600160a01b038d16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080613e58816153db565b915050613d97565b5060008481526004602052604090206001600160a01b038a169055613e858880615362565b6001600160a01b038a1660009081526003602052604081208054909190613ead908490615311565b90915550613eca9050613ebe6125f5565b60008b8b8b8b8b613090565b505050505050505050565b606081613f16575060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015261063c565b8160005b8115613f405780613f2a816153db565b9150613f399050600a8361534e565b9150613f1a565b60008167ffffffffffffffff811115613f6957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613f93576020820181803683370190505b509050815b851561404657613fa9600182615381565b90506000613fb8600a8861534e565b613fc390600a615362565b613fcd9088615381565b613fd8906030615329565b905060008160f81b90508084848151811061400357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061403d600a8961534e565b97505050613f98565b50949350505050565b60008061405c858761534e565b90506140696002826153f6565b6140aa5761019861407a8285615311565b6140849190615362565b61408e86886153f6565b6140989086615311565b6140a29190615311565b9150506140ea565b6101986140b78285615311565b6140c19190615362565b6140cb86886153f6565b6140d6906001615311565b6140e08787615311565b6140989190615381565b949350505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b81526004016141279493929190615263565b602060405180830381600087803b15801561414157600080fd5b505af1158015614155573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614179919061516c565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b80156141f5576000848152600460205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055611a40565b6001600160a01b03821661420e6001600160ff1b615381565b841673ffffffffffffffffffffffffffffffffffffffff1916176004600086815260208101919091526040016000205550505050565b61424e83836153f6565b158015614262575061426083826153f6565b155b6142ae5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106de565b6142ba83610198615381565b82111580156142d457506142d083610198615381565b8111155b6143205760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106de565b826003141561433d57614337858584846001614382565b50610849565b826006141561435457614337858584846001614653565b82600c141561436b576143378585848460016147ef565b8260181415610ff05761433785858484600161498b565b60008061439161019885615362565b61439b9086615311565b905060006143ad82600160f81b615311565b90506001865b6143be886003615311565b81101561442857865b6143d2886003615311565b811015614415576143f88b6143e961019884615362565b6143f39085615311565b614ba6565b80156144015750825b92508061440d816153db565b9150506143c7565b5080614420816153db565b9150506143b3565b5084156146475780614622576000828152600460205260409020546001600160a01b038a1614806144c457506001600160a01b0389166004600061019861447060068b61534e565b61447b906006615362565b6144859190615362565b61449060068c61534e565b61449b906006615362565b6144a990600160f91b615311565b6144b39190615311565b815260200190815260200160002054145b8061453a57506001600160a01b038916600460006101986144e6600c8b61534e565b6144f190600c615362565b6144fb9190615362565b614506600c8c61534e565b61451190600c615362565b61451f90600360f81b615311565b6145299190615311565b815260200190815260200160002054145b806145b057506001600160a01b0389166004600061019861455c60188b61534e565b614567906018615362565b6145719190615362565b61457c60188c61534e565b614587906018615362565b61459590600160fa1b615311565b61459f9190615311565b815260200190815260200160002054145b6146225760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e7420717561647300000000000000000000000000000000000000000060648201526084016106de565b5060009081526004602052604090206001600160a01b03871690555060019050612f01565b98975050505050505050565b60008061466261019885615362565b61466c9086615311565b9050600061467e82600160f91b615311565b90506001865b61468f886006615311565b8110156147a757865b6146a3886006615311565b8110156147945760006146ba8c8c85856000614382565b905060006146ca61019884615362565b6146d885600160f81b615311565b6146e29190615311565b60008181526004602052604090205490915080156147675782614757578d6001600160a01b031681146147575760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203378332071756164000000000000000000000060448201526064016106de565b6000828152600460205260408120555b828061477257508015155b801561477b5750855b955050505060038161478d9190615311565b9050614698565b506147a0600382615311565b9050614684565b5084156146475780614622576000828152600460205260409020546001600160a01b038a16148061453a57506001600160a01b038916600460006101986144e6600c8b61534e565b6000806147fe61019885615362565b6148089086615311565b9050600061481a82600360f81b615311565b90506001865b61482b88600c615311565b81101561494357865b61483f88600c615311565b8110156149305760006148568c8c85856000614653565b9050600061486661019884615362565b61487485600160f91b615311565b61487e9190615311565b600081815260046020526040902054909150801561490357826148f3578d6001600160a01b031681146148f35760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203678362071756164000000000000000000000060448201526064016106de565b6000828152600460205260408120555b828061490e57508015155b80156149175750855b95505050506006816149299190615311565b9050614834565b5061493c600682615311565b9050614820565b5084156146475780614622576000828152600460205260409020546001600160a01b038a1614806145b057506001600160a01b0389166004600061019861455c60188b61534e565b60008061499a61019885615362565b6149a49086615311565b905060006149b682600160fa1b615311565b90506001865b6149c7886018615311565b811015614adf57865b6149db886018615311565b811015614acc5760006149f28c8c858560006147ef565b90506000614a0261019884615362565b614a1085600360f81b615311565b614a1a9190615311565b6000818152600460205260409020549091508015614a9f5782614a8f578d6001600160a01b03168114614a8f5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66203132783132207175616400000000000000000060448201526064016106de565b6000828152600460205260408120555b8280614aaa57508015155b8015614ab35750855b9550505050600c81614ac59190615311565b90506149d0565b50614ad8600c82615311565b90506149bc565b508415614b775780614622576000828152600460205260409020546001600160a01b038a16146146225760405162461bcd60e51b815260206004820152602a60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f74207060448201527f6172656e7420717561640000000000000000000000000000000000000000000060648201526084016106de565b8080614b9957506000828152600460205260409020546001600160a01b038a16145b9998505050505050505050565b6000818152600460205260408120548015614c3457836001600160a01b0316816001600160a01b031614614c1c5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016106de565b50506000818152600460205260408120556001611ccd565b5060009392505050565b80356001600160a01b038116811461063c57600080fd5b60008083601f840112614c66578081fd5b50813567ffffffffffffffff811115614c7d578182fd5b6020830191508360208083028501011115614c9757600080fd5b9250929050565b8035801515811461063c57600080fd5b60008083601f840112614cbf578182fd5b50813567ffffffffffffffff811115614cd6578182fd5b602083019150836020828501011115614c9757600080fd5b600082601f830112614cfe578081fd5b813567ffffffffffffffff80821115614d1957614d19615436565b604051601f8301601f19908116603f01168101908282118183101715614d4157614d41615436565b81604052838152866020858801011115614d59578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215614d86578081fd5b611cca82614c3e565b60008060408385031215614da1578081fd5b614daa83614c3e565b9150614db860208401614c3e565b90509250929050565b60008060008060008060008060008060c08b8d031215614ddf578586fd5b614de88b614c3e565b9950614df660208c01614c3e565b985060408b013567ffffffffffffffff80821115614e12578788fd5b614e1e8e838f01614c55565b909a50985060608d0135915080821115614e36578788fd5b614e428e838f01614c55565b909850965060808d0135915080821115614e5a578586fd5b614e668e838f01614c55565b909650945060a08d0135915080821115614e7e578384fd5b50614e8b8d828e01614cae565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215614ebc578182fd5b614ec587614c3e565b9550614ed360208801614c3e565b9450604087013567ffffffffffffffff80821115614eef578384fd5b614efb8a838b01614c55565b90965094506060890135915080821115614f13578384fd5b50614f2089828a01614cae565b979a9699509497509295939492505050565b600080600060608486031215614f46578283fd5b614f4f84614c3e565b9250614f5d60208501614c3e565b9150614f6b60408501614c9e565b90509250925092565b600080600060608486031215614f88578283fd5b614f9184614c3e565b9250614f9f60208501614c3e565b9150604084013590509250925092565b60008060008060808587031215614fc4578384fd5b614fcd85614c3e565b9350614fdb60208601614c3e565b925060408501359150606085013567ffffffffffffffff811115614ffd578182fd5b61500987828801614cee565b91505092959194509250565b600080600080600080600060c0888a03121561502f578283fd5b61503888614c3e565b965061504660208901614c3e565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115615076578283fd5b6150828a828b01614cae565b989b979a50959850939692959293505050565b600080604083850312156150a7578182fd5b6150b083614c3e565b9150614db860208401614c9e565b600080604083850312156150d0578182fd5b6150d983614c3e565b946020939093013593505050565b600080600080600060a086880312156150fe578283fd5b61510786614c3e565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115615137578182fd5b61514388828901614cee565b9150509295509295909350565b600060208284031215615161578081fd5b81356114468161544c565b60006020828403121561517d578081fd5b81516114468161544c565b600060208284031215615199578081fd5b5035919050565b6000806000606084860312156151b4578081fd5b505081359360208301359350604090920135919050565b600081518084526151e3816020860160208601615398565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f008252825161522f81601f850160208701615398565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b818110156152b75784518452938201939282019260010161529b565b505050838103606085015261464781866151cb565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e4060808301846151cb565b600060208252611cca60208301846151cb565b600082198211156153245761532461540a565b500190565b600060ff821660ff84168060ff038211156153465761534661540a565b019392505050565b60008261535d5761535d615420565b500490565b600081600019048311821515161561537c5761537c61540a565b500290565b6000828210156153935761539361540a565b500390565b60005b838110156153b357818101518382015260200161539b565b83811115611a405750506000910152565b6000816153d3576153d361540a565b506000190190565b60006000198214156153ef576153ef61540a565b5060010190565b60008261540557615405615420565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e8057600080fdfea26469706673582212201e1aad0a5ca5fbf37baba3877b88851a98143a07cc06abb5769ff3443c56157964736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "The token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "The token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "height()": {
        "returns": {
          "_0": "height"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface"
        },
        "returns": {
          "_0": "True if the interface is supported"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token contract"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "returns": {
          "_0": "The URI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "width()": {
        "returns": {
          "_0": "width"
        }
      },
      "x(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the x coordinates"
        }
      },
      "y(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the y coordinates"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token`id` from `from`."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "height()": {
        "notice": "total height of the map"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      },
      "width()": {
        "notice": "total width of the map"
      },
      "x(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "y(uint256)": {
        "notice": "y coordinate of Land token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22604,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22836,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20711,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 20895,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20899,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20905,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20909,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 30702,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "polygonLandTunnel",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 30704,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_initialized",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 30794,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}