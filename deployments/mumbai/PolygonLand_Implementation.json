{
  "address": "0x101D6e384f791ad584d32421CC60DCB6b92bA211",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonLandTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_polygonLandTunnel",
          "type": "address"
        }
      ],
      "name": "setPolygonLandTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "x",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "y",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a2b82ac056ae9938f90ff615332c9f36c5e60e4abed33eae3a50a421c82ab6c",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x101D6e384f791ad584d32421CC60DCB6b92bA211",
    "transactionIndex": 27,
    "gasUsed": "4732450",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000004000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000200000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000108040000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x6699d5d7b2b94fd25518d6150d90c054270c4ff9daf4f7f97c02b13010c068bd",
    "transactionHash": "0x7a2b82ac056ae9938f90ff615332c9f36c5e60e4abed33eae3a50a421c82ab6c",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 24121378,
        "transactionHash": "0x7a2b82ac056ae9938f90ff615332c9f36c5e60e4abed33eae3a50a421c82ab6c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000021a046bfcbc0ce0000000000000000000000000000000000000000000000000ea5d1e377ebdf3200000000000000000000000000000000000000000000051206b2403ccd96bf7d0000000000000000000000000000000000000000000000000e84319cb8201e6400000000000000000000000000000000000000000000051206d3e0838d62804b",
        "logIndex": 67,
        "blockHash": "0x6699d5d7b2b94fd25518d6150d90c054270c4ff9daf4f7f97c02b13010c068bd"
      }
    ],
    "blockNumber": 24121378,
    "cumulativeGasUsed": "8643984",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "efa8d3004b37415d5d86fb4290b5b96e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonLandTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_polygonLandTunnel\",\"type\":\"address\"}],\"name\":\"setPolygonLandTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"x\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"burn(uint256)\":{\"params\":{\"id\":\"The token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"The token which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"height()\":{\"returns\":{\"_0\":\"height\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface\"},\"returns\":{\"_0\":\"True if the interface is supported\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token contract\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"returns\":{\"_0\":\"The URI of the token\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"width()\":{\"returns\":{\"_0\":\"width\"}},\"x(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the x coordinates\"}},\"y(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the y coordinates\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token`id` from `from`.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"height()\":{\"notice\":\"total height of the map\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"},\"width()\":{\"notice\":\"total width of the map\"},\"x(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"y(uint256)\":{\"notice\":\"y coordinate of Land token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/land/PolygonLandV1.sol\":\"PolygonLandV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x33620beff0655c5e728a72fff76fb6ce2dc32fc6b61eb8e435b12ed1adf31525\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9ef7f2874f4a491f253a81eb4c5b9a7b6467a287aa0c32ac3dd684260a3cd7ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC721BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./WithSuperOperators.sol\\\";\\nimport \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"./ERC2771Handler.sol\\\";\\n\\ncontract ERC721BaseToken is Initializable, IERC721Upgradeable, WithSuperOperators, ERC2771Handler {\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = address(uint160(ownerData));\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _superOperators[msgSender] || _operatorsForAll[owner][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(\\n            msgSender == sender || _superOperators[msgSender] || _operatorsForAll[sender][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(_msgSender(), _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract, you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented. See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = address(uint160(ownerData));\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _superOperators[msgSender] || _operatorsForAll[from][msgSender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msgSender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\\n            require(_checkOnERC721BatchReceived(msgSender, from, to, ids, data), \\\"ERC721_BATCH_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_APPROVAL_CHANGE\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721ReceiverUpgradeable(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address recieving the token.\\n    /// @param id The token being transferred.\\n    /// @return isMetaTx Whether or not the transaction is a MetaTx.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(\\n            msgSender == owner ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender] ||\\n                (operatorEnabled && _operators[id] == msgSender),\\n            \\\"UNAUTHORIZED_TRANSFER\\\"\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0xdfb54950cd58091b3553ab72885881466b08903b428e3326a22f567dfb3a9d93\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"../../../common/BaseWithStorage/ERC721BaseToken.sol\\\";\\n\\ncontract PolygonLandBaseToken is ERC721BaseToken {\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() public view returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() public view returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() public view returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() public view returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function x(uint256 id) public view returns (uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id % GRID_SIZE;\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function y(uint256 id) public view returns (uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id / GRID_SIZE;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return string(abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", uint2str(id), \\\"/metadata.json\\\"));\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function _mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        uint256 quadId;\\n        uint256 id = x + y * GRID_SIZE;\\n\\n        if (size == 1) {\\n            quadId = id;\\n        } else if (size == 3) {\\n            quadId = LAYER_3x3 + id;\\n        } else if (size == 6) {\\n            quadId = LAYER_6x6 + id;\\n        } else if (size == 12) {\\n            quadId = LAYER_12x12 + id;\\n        } else if (size == 24) {\\n            quadId = LAYER_24x24 + id;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n\\n        require(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] == 0, \\\"Already minted as 24x24\\\");\\n\\n        uint256 toX = x + size;\\n        uint256 toY = y + size;\\n        if (size <= 12) {\\n            require(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] == 0, \\\"Already minted as 12x12\\\");\\n        } else {\\n            for (uint256 x12i = x; x12i < toX; x12i += 12) {\\n                for (uint256 y12i = y; y12i < toY; y12i += 12) {\\n                    uint256 id12x12 = LAYER_12x12 + x12i + y12i * GRID_SIZE;\\n                    require(_owners[id12x12] == 0, \\\"Already minted as 12x12\\\");\\n                }\\n            }\\n        }\\n\\n        if (size <= 6) {\\n            require(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE] == 0, \\\"Already minted as 6x6\\\");\\n        } else {\\n            for (uint256 x6i = x; x6i < toX; x6i += 6) {\\n                for (uint256 y6i = y; y6i < toY; y6i += 6) {\\n                    uint256 id6x6 = LAYER_6x6 + x6i + y6i * GRID_SIZE;\\n                    require(_owners[id6x6] == 0, \\\"Already minted as 6x6\\\");\\n                }\\n            }\\n        }\\n\\n        if (size <= 3) {\\n            require(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE] == 0, \\\"Already minted as 3x3\\\");\\n        } else {\\n            for (uint256 x3i = x; x3i < toX; x3i += 3) {\\n                for (uint256 y3i = y; y3i < toY; y3i += 3) {\\n                    uint256 id3x3 = LAYER_3x3 + x3i + y3i * GRID_SIZE;\\n                    require(_owners[id3x3] == 0, \\\"Already minted as 3x3\\\");\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 idPath = _idInPath(i, size, x, y);\\n            require(_owners[id] == 0, \\\"Already minted\\\");\\n            emit Transfer(address(0), to, idPath);\\n        }\\n\\n        _owners[quadId] = uint256(uint160(address(to)));\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(_msgSender(), address(0), to, size, x, y, data);\\n    }\\n\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"invalid data\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _superOperators[_msgSender()] || _operatorsForAll[from][_msgSender()],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(_msgSender(), from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _superOperators[_msgSender()] || _operatorsForAll[from][_msgSender()],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(_msgSender(), from, to, size, x, y, data);\\n    }\\n\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) external view returns (bool) {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        uint256 quadId;\\n        uint256 id = x + y * GRID_SIZE;\\n\\n        if (size == 1) {\\n            quadId = id;\\n        } else if (size == 3) {\\n            quadId = LAYER_3x3 + id;\\n        } else if (size == 6) {\\n            quadId = LAYER_6x6 + id;\\n        } else if (size == 12) {\\n            quadId = LAYER_12x12 + id;\\n        } else if (size == 24) {\\n            quadId = LAYER_24x24 + id;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n\\n        if (_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] != 0) return true;\\n        uint256 toX = x + size;\\n        uint256 toY = y + size;\\n        if (size <= 12) {\\n            if (_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x12i = x; x12i < toX; x12i += 12) {\\n                for (uint256 y12i = y; y12i < toY; y12i += 12) {\\n                    uint256 id12x12 = LAYER_12x12 + x12i + y12i * GRID_SIZE;\\n                    if (_owners[id12x12] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        if (size <= 6) {\\n            if (_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x6i = x; x6i < toX; x6i += 6) {\\n                for (uint256 y6i = y; y6i < toY; y6i += 6) {\\n                    uint256 id6x6 = LAYER_6x6 + x6i + y6i * GRID_SIZE;\\n                    if (_owners[id6x6] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        if (size <= 3) {\\n            if (_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x3i = x; x3i < toX; x3i += 3) {\\n                for (uint256 y3i = y; y3i < toY; y3i += 3) {\\n                    uint256 id3x3 = LAYER_3x3 + x3i + y3i * GRID_SIZE;\\n                    if (_owners[id3x3] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < size * size; i++) {\\n            if (_owners[id] != 0) return true;\\n        }\\n        return false;\\n    }\\n\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        if (size == 1) {\\n            uint256 id1x1 = x + y * GRID_SIZE;\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(uint160(address(to)));\\n        } else {\\n            _regroup(from, to, size, x, y);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // alow ids to follow a path in a quad\\n            return (x + (i % size)) + ((y + row) * GRID_SIZE);\\n        } else {\\n            return ((x + size) - (1 + (i % size))) + ((y + row) * GRID_SIZE);\\n        }\\n    }\\n\\n    function _regroup(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        if (size == 3) {\\n            _regroup3x3(from, to, x, y, true);\\n        } else if (size == 6) {\\n            _regroup6x6(from, to, x, y, true);\\n        } else if (size == 12) {\\n            _regroup12x12(from, to, x, y, true);\\n        } else if (size == 24) {\\n            _regroup24x24(from, to, x, y, true);\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _regroup3x3(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_3x3 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 3; xi++) {\\n            for (uint256 yi = y; yi < y + 3; yi++) {\\n                ownerOfAll = _checkAndClear(from, xi + yi * GRID_SIZE) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup6x6(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_6x6 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 6; xi += 3) {\\n            for (uint256 yi = y; yi < y + 6; yi += 3) {\\n                bool ownAllIndividual = _regroup3x3(from, to, xi, yi, false);\\n                uint256 id3x3 = LAYER_3x3 + xi + yi * GRID_SIZE;\\n                uint256 owner3x3 = _owners[id3x3];\\n                if (owner3x3 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner3x3 == uint256(uint160(address(from))), \\\"not owner of 3x3 quad\\\");\\n                    }\\n                    _owners[id3x3] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner3x3 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup12x12(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_12x12 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 12; xi += 6) {\\n            for (uint256 yi = y; yi < y + 12; yi += 6) {\\n                bool ownAllIndividual = _regroup6x6(from, to, xi, yi, false);\\n                uint256 id6x6 = LAYER_6x6 + xi + yi * GRID_SIZE;\\n                uint256 owner6x6 = _owners[id6x6];\\n                if (owner6x6 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner6x6 == uint256(uint160(address(from))), \\\"not owner of 6x6 quad\\\");\\n                    }\\n                    _owners[id6x6] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner6x6 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup24x24(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_24x24 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 24; xi += 12) {\\n            for (uint256 yi = y; yi < y + 24; yi += 12) {\\n                bool ownAllIndividual = _regroup12x12(from, to, xi, yi, false);\\n                uint256 id12x12 = LAYER_12x12 + xi + yi * GRID_SIZE;\\n                uint256 owner12x12 = _owners[id12x12];\\n                if (owner12x12 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner12x12 == uint256(uint160(address(from))), \\\"not owner of 12x12 quad\\\");\\n                    }\\n                    _owners[id12x12] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner12x12 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads not parent quad\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll || _owners[quadId] == uint256(uint160(address(from)));\\n    }\\n\\n    function _ownerOf(uint256 id) internal view override returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            return address(uint160(owner1x1)); //we check if the quad exists as an 1x1 quad, then 3x3, and so on..\\n        } else {\\n            address owner3x3 = address(uint160(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE]));\\n            if (owner3x3 != address(0)) {\\n                return owner3x3;\\n            } else {\\n                address owner6x6 = address(uint160(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE]));\\n                if (owner6x6 != address(0)) {\\n                    return owner6x6;\\n                } else {\\n                    address owner12x12 =\\n                        address(uint160(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE]));\\n                    if (owner12x12 != address(0)) {\\n                        return owner12x12;\\n                    } else {\\n                        return address(uint160(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE]));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkAndClear(address from, uint256 id) internal returns (bool) {\\n        uint256 owner = _owners[id];\\n        if (owner != 0) {\\n            require(address(uint160(owner)) == from, \\\"not owner\\\");\\n            _owners[id] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        override\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            owner = address(uint160(owner1x1));\\n            operatorEnabled = (owner1x1 / 2**255) == 1;\\n        } else {\\n            address owner3x3 = address(uint160(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE]));\\n            if (owner3x3 != address(uint160(0))) {\\n                owner = owner3x3;\\n                operatorEnabled = false;\\n            } else {\\n                address owner6x6 = address(uint160(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE]));\\n                if (owner6x6 != address(uint160(0))) {\\n                    owner = owner6x6;\\n                    operatorEnabled = false;\\n                } else {\\n                    address owner12x12 =\\n                        address(uint160(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE]));\\n                    if (owner12x12 != address(uint160(0))) {\\n                        owner = owner12x12;\\n                        operatorEnabled = false;\\n                    } else {\\n                        owner = address(uint160(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE]));\\n                        operatorEnabled = false;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef4ce63c2e74d8151f37ea1e34e87cf49331bdb62405866eea4d52e9cf35df11\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./PolygonLandBaseToken.sol\\\";\\n\\n// @todo - natspec comments\\n\\ncontract PolygonLandV1 is PolygonLandBaseToken {\\n    address public polygonLandTunnel;\\n\\n    function initialize(address trustedForwarder) external initializer {\\n        _admin = _msgSender();\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    function setPolygonLandTunnel(address _polygonLandTunnel) external onlyAdmin {\\n        polygonLandTunnel = _polygonLandTunnel;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyAdmin {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function mint(\\n        address user,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external {\\n        require(_msgSender() == polygonLandTunnel, \\\"Invalid sender\\\");\\n        _mintQuad(user, size, x, y, data);\\n    }\\n\\n    // Empty storage space in contracts for future enhancements\\n    // ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13)\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x402f679337b5e60900f14f132dc4b54149ce31f03aa5279b0a59094a7864902f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c80636e9960c311610160578063ac9fe421116100d8578063ce1b815f1161008c578063e985e9c511610071578063e985e9c514610570578063eaa5e06714610583578063eeb5a5d11461059657610277565b8063ce1b815f1461054c578063da7422281461055d57610277565b8063b88d4fde116100bd578063b88d4fde14610513578063c4d66de814610526578063c87b56dd1461053957610277565b8063ac9fe421146104ed578063b49c99b81461050057610277565b80638f2839701161012f5780639ededf77116101145780639ededf77146102f9578063a0c0fc0e146104c7578063a22cb465146104da57610277565b80638f2839701461047b57806395d89b411461048e57610277565b80636e9960c31461042a57806370a082311461044257806379cc6790146104555780637f87ec681461046857610277565b806338bb305a116101f357806355064d85116101c25780636259e7e1116101a75780636259e7e1146103d85780636352211e146103eb578063654b748a146103fe57610277565b806355064d85146103a3578063572b6c05146103b657610277565b806338bb305a146103575780633f4263ef1461036a57806342842e0e1461037d57806342966c681461039057610277565b80630ef267431161024a57806323b872dd1161022f57806323b872dd1461031e57806328cfbd46146103315780632b9917461461034457610277565b80630ef26743146102f957806315ddc5351461030b57610277565b806301ffc9a71461027c57806306fdde03146102a4578063081812fc146102b9578063095ea7b3146102e4575b600080fd5b61028f61028a36600461519e565b6105a9565b60405190151581526020015b60405180910390f35b6102ac610648565b60405161029b919061534c565b6102cc6102c73660046151d6565b610680565b6040516001600160a01b03909116815260200161029b565b6102f76102f236600461510c565b61071f565b005b6101985b60405190815260200161029b565b6102f7610319366004614ef2565b610857565b6102f761032c366004614fc2565b6108d1565b6102f761033f366004614ef2565b610986565b6102f7610352366004614fc2565b6109fb565b6102f7610365366004615063565b610b8b565b6102fd6103783660046151d6565b610de3565b6102f761038b366004614fc2565b610e52565b6102f761039e3660046151d6565b610e6d565b61028f6103b13660046151ee565b610e8a565b61028f6103c4366004614dc3565b6002546001600160a01b0390811691161490565b6102fd6103e63660046151d6565b611454565b6102cc6103f93660046151d6565b6114c3565b61028f61040c366004614dc3565b6001600160a01b031660009081526001602052604090205460ff1690565b6102cc6000546201000090046001600160a01b031690565b6102fd610450366004614dc3565b611526565b6102f761046336600461510c565b61159a565b6007546102cc906001600160a01b031681565b6102f7610489366004614dc3565b6116f7565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526102ac565b6102f76104d5366004614dc3565b6117e4565b6102f76104e83660046150e3565b611873565b6102f76104fb3660046150e3565b611889565b6102f761050e366004615135565b611972565b6102f7610521366004614ffd565b6119e9565b6102f7610534366004614dc3565b611a76565b6102ac6105473660046151d6565b611ba8565b6002546001600160a01b03166102cc565b6102f761056b366004614dc3565b611c3b565b61028f61057e366004614ddd565b611cca565b6102f7610591366004614e0f565b611d21565b6102f76105a4366004614f80565b612289565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061060c57507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061064057507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b600080600061068e8461237a565b90925090506001600160a01b0382166106ee5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b8015610714575050506000818152600660205260409020546001600160a01b0316610643565b600092505050610643565b600081815260046020526040812054908190610739612643565b90506001600160a01b0382166107915760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106e5565b806001600160a01b0316826001600160a01b031614806107c957506001600160a01b03811660009081526001602052604090205460ff165b806107f957506001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b6108455760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106e5565b61085083868661268d565b5050505050565b6108c9868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201829052509250612737915050565b505050505050565b6108dc838383612afb565b506108e8838383612d13565b6001600160a01b0382163b1515801561090d575061090d826317a2fd9160e21b612dd1565b156109815761093561091d612643565b84848460405180602001604052806000815250612e98565b6109815760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106e5565b505050565b6108c9868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525060019250612737915050565b60008181526004602052604081205490610a13612643565b90506001600160a01b038516610a6b5760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e4445520000000000000000000000000060448201526064016106e5565b846001600160a01b0316816001600160a01b03161480610aa357506001600160a01b03811660009081526001602052604090205460ff165b80610ad357506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b610b1f5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106e5565b846001600160a01b0316826001600160a01b031614610b805760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e4445520000000000000000000000000000000060448201526064016106e5565b61085082858561268d565b6001600160a01b038716610be15760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106e5565b6001600160a01b038616610c375760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106e5565b866001600160a01b0316610c49612643565b6001600160a01b031614610d115760016000610c63612643565b6001600160a01b0316815260208101919091526040016000205460ff1680610cc557506001600160a01b038716600090815260056020526040812090610ca7612643565b6001600160a01b0316815260208101919091526040016000205460ff165b610d115760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e7366657251756164000060448201526064016106e5565b610d1e8787878787612f58565b610d2885806153b0565b6001600160a01b03881660009081526003602052604081208054909190610d509084906153cf565b90915550610d60905085806153b0565b6001600160a01b03871660009081526003602052604081208054909190610d8890849061535f565b90915550610dda9050610d99612643565b888888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506130de92505050565b50505050505050565b600080610def83613242565b6001600160a01b03161415610e465760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106e5565b61064061019883615444565b610981838383604051806020016040528060008152506119e9565b610e87610e78612643565b610e8183613242565b836134f1565b50565b6000610e968484615444565b158015610eaa5750610ea88483615444565b155b610ef65760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106e5565b610f02846101986153cf565b8311158015610f1c5750610f18846101986153cf565b8211155b610f685760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106e5565b600080610f77610198856153b0565b610f81908661535f565b90508560011415610f945780915061103f565b8560031415610fb257610fab81600160f81b61535f565b915061103f565b8560061415610fc957610fab81600160f91b61535f565b85600c1415610fe057610fab81600360f81b61535f565b8560181415610ff757610fab81600160fa1b61535f565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106e5565b6004600061019861105160188861539c565b61105c9060186153b0565b61106691906153b0565b61107160188961539c565b61107c9060186153b0565b61108a90600160fa1b61535f565b611094919061535f565b8152602001908152602001600020546000146110b55760019250505061144d565b60006110c1878761535f565b905060006110cf888761535f565b9050600c881161115657600460006101986110eb600c8a61539c565b6110f690600c6153b0565b61110091906153b0565b61110b600c8b61539c565b61111690600c6153b0565b61112490600360f81b61535f565b61112e919061535f565b81526020019081526020016000205460001461115157600194505050505061144d565b6111df565b865b828110156111dd57865b828110156111ca576000611178610198836153b0565b61118684600360f81b61535f565b611190919061535f565b600081815260046020526040902054909150156111b757600197505050505050505061144d565b506111c3600c8261535f565b9050611162565b506111d6600c8261535f565b9050611158565b505b6006881161126457600460006101986111f960068a61539c565b6112049060066153b0565b61120e91906153b0565b61121960068b61539c565b6112249060066153b0565b61123290600160f91b61535f565b61123c919061535f565b81526020019081526020016000205460001461125f57600194505050505061144d565b6112ed565b865b828110156112eb57865b828110156112d8576000611286610198836153b0565b61129484600160f91b61535f565b61129e919061535f565b600081815260046020526040902054909150156112c557600197505050505050505061144d565b506112d160068261535f565b9050611270565b506112e460068261535f565b9050611266565b505b60038811611372576004600061019861130760038a61539c565b6113129060036153b0565b61131c91906153b0565b61132760038b61539c565b6113329060036153b0565b61134090600160f81b61535f565b61134a919061535f565b81526020019081526020016000205460001461136d57600194505050505061144d565b6113fb565b865b828110156113f957865b828110156113e6576000611394610198836153b0565b6113a284600160f81b61535f565b6113ac919061535f565b600081815260046020526040902054909150156113d357600197505050505050505061144d565b506113df60038261535f565b905061137e565b506113f260038261535f565b9050611374565b505b60005b61140889806153b0565b81101561144357600084815260046020526040902054156114315760019550505050505061144d565b8061143b81615429565b9150506113fe565b5060009450505050505b9392505050565b60008061146083613242565b6001600160a01b031614156114b75760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106e5565b6106406101988361539c565b60006114ce82613242565b90506001600160a01b0381166106435760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e00000000000000000000000000000060448201526064016106e5565b60006001600160a01b03821661157e5760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e4552000000000000000000000000000060448201526064016106e5565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b0382166115f05760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106e5565b6000806115fc8361237a565b91509150600061160a612643565b9050846001600160a01b0316816001600160a01b0316148061164d575081801561164d57506000848152600660205260409020546001600160a01b038281169116145b8061167057506001600160a01b03811660009081526001602052604090205460ff165b806116a057506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b6116ec5760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e00000000000000000000000000000060448201526064016106e5565b6108508584866134f1565b6000546201000090046001600160a01b031633146117575760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e4945440000000000000000000000000060448201526064016106e5565b600054604080516001600160a01b03620100009093048316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a1600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6000546201000090046001600160a01b031633146118445760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106e5565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61188561187e612643565b83836135f9565b5050565b6000546201000090046001600160a01b0316331461190f5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f7273000000000000000000000000000000000000000060648201526084016106e5565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b6007546001600160a01b0316611986612643565b6001600160a01b0316146119dc5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c69642073656e64657200000000000000000000000000000000000060448201526064016106e5565b61085085858585856136cf565b6119f4848484612afb565b50611a00848484612d13565b6001600160a01b0383163b15611a7057611a24611a1b612643565b85858585612e98565b611a705760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106e5565b50505050565b600054610100900460ff1680611a8f575060005460ff16155b611b015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106e5565b600054610100900460ff16158015611b2c576000805460ff1961ff0019909116610100171660011790555b611b34612643565b600080546001600160a01b0392831662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff9091161790556002805473ffffffffffffffffffffffffffffffffffffffff19169184169190911790558015611885576000805461ff00191690555050565b60606000611bb583613242565b6001600160a01b03161415611c0c5760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f7420657869737400000000000000000000000000000060448201526064016106e5565b611c1582613f23565b604051602001611c259190615245565b6040516020818303038152906040529050919050565b6000546201000090046001600160a01b03163314611c9b5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106e5565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff1680611d1857506001600160a01b03821660009081526001602052604090205460ff165b90505b92915050565b6001600160a01b038a16611d775760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106e5565b6001600160a01b038916611dcd5760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106e5565b8685148015611ddb57508483145b611e275760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642064617461000000000000000000000000000000000000000060448201526064016106e5565b896001600160a01b0316611e39612643565b6001600160a01b031614611f265760016000611e53612643565b6001600160a01b0316815260208101919091526040016000205460ff1680611eb557506001600160a01b038a16600090815260056020526040812090611e97612643565b6001600160a01b0316815260208101919091526040016000205460ff165b611f265760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f756164730000000000000000000000000000000000000000000000000000000060648201526084016106e5565b6000805b88811015611fe05760008a8a83818110611f5457634e487b7160e01b600052603260045260246000fd5b905060200201359050611fb68d8d838c8c87818110611f8357634e487b7160e01b600052603260045260246000fd5b905060200201358b8b88818110611faa57634e487b7160e01b600052603260045260246000fd5b90506020020135612f58565b611fc081806153b0565b611fca908461535f565b9250508080611fd890615429565b915050611f2a565b506001600160a01b038b16600090815260036020526040812080548392906120099084906153cf565b90915550506001600160a01b038a166000908152600360205260408120805483929061203690849061535f565b90915550506001600160a01b038a163b1515801561206057506120608a6317a2fd9160e21b612dd1565b1561227c5760008167ffffffffffffffff81111561208e57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156120b7578160200160208202803683370190505b5090506000805b8a8110156121bd5760008c8c838181106120e857634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6120fe82806153b0565b8110156121a85761215d81838e8e8781811061212a57634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8881811061215157634e487b7160e01b600052603260045260246000fd5b9050602002013561409d565b85858151811061217d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361219281615429565b94505080806121a090615429565b9150506120f4565b505080806121b590615429565b9150506120be565b506122086121c9612643565b8e8e8589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061414092505050565b6122795760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106e5565b50505b5050505050505050505050565b6001600160a01b0383166122df5760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e64657220616464726573730000000000000000000060448201526064016106e5565b60006122e9612643565b9050836001600160a01b0316816001600160a01b0316148061232357506001600160a01b03811660009081526001602052604090205460ff165b61236f5760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c0000000060448201526064016106e5565b611a708484846135f9565b6000807fff000000000000000000000000000000000000000000000000000000000000008316156123ed5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106e5565b60006123fb61019885615444565b9050600061240b6101988661539c565b600086815260046020526040902054909150801561243e57935083612434600160ff1b8261539c565b600114935061263b565b600060048161019861245160038761539c565b61245c9060036153b0565b61246691906153b0565b61247160038861539c565b61247c9060036153b0565b61248a90600160f81b61535f565b612494919061535f565b815260208101919091526040016000205490506001600160a01b038116156124c25780955060009450612639565b60006004816101986124d560068861539c565b6124e09060066153b0565b6124ea91906153b0565b6124f560068961539c565b6125009060066153b0565b61250e90600160f91b61535f565b612518919061535f565b815260208101919091526040016000205490506001600160a01b038116156125465780965060009550612637565b6000600481610198612559600c8961539c565b61256490600c6153b0565b61256e91906153b0565b612579600c8a61539c565b61258490600c6153b0565b61259290600360f81b61535f565b61259c919061535f565b815260208101919091526040016000205490506001600160a01b038116156125ca5780975060009650612635565b600460006101986125dc60188961539c565b6125e79060186153b0565b6125f191906153b0565b6125fc60188a61539c565b6126079060186153b0565b61261590600160fa1b61535f565b61261f919061535f565b8152602001908152602001600020549750600096505b505b505b505b505050915091565b6002546000906001600160a01b031633141561268657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61067d565b503361067d565b826001600160a01b0383166126ae576126a982858360006141ff565b6126f0565b6126bb82858360016141ff565b6000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b6000612741612643565b90506000866001600160a01b0316826001600160a01b0316148061277d57506001600160a01b03821660009081526001602052604090205460ff165b806127ad57506001600160a01b0380881660009081526005602090815260408083209386168352929052205460ff165b90506001600160a01b0387166128055760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106e5565b6001600160a01b03861661285b5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106e5565b845160005b818110156129f257600087828151811061288a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806128a08361237a565b915091508b6001600160a01b0316826001600160a01b0316146129055760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e4552000000000060448201526064016106e5565b8580612932575080801561293257506000838152600660205260409020546001600160a01b038881169116145b61297e5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016106e5565b60008381526004602052604081205461299b918591908e906141ff565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505080806129ea90615429565b915050612860565b50866001600160a01b0316886001600160a01b031614612a67576001600160a01b03881660009081526003602052604081208054839290612a349084906153cf565b90915550506001600160a01b03871660009081526003602052604081208054839290612a6190849061535f565b90915550505b6001600160a01b0387163b15158015612a9357508380612a935750612a93876317a2fd9160e21b612dd1565b15612af157612aa58389898989614140565b612af15760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f5452414e534645525f52454a4543544544000060448201526064016106e5565b5050505050505050565b6000806000612b098461237a565b915091506000612b17612643565b90506001600160a01b038316612b6f5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106e5565b866001600160a01b0316836001600160a01b031614612bd05760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e455200000000000000000060448201526064016106e5565b6001600160a01b038616612c265760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106e5565b826001600160a01b0316816001600160a01b03161480612c5e57506001600160a01b03811660009081526001602052604090205460ff165b80612c8e57506001600160a01b0380881660009081526005602090815260408083209385168352929052205460ff165b80612cba5750818015612cba57506000858152600660205260409020546001600160a01b038281169116145b612d065760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016106e5565b5060019695505050505050565b6001600160a01b0383166000908152600360205260408120805491612d3783615412565b90915550506001600160a01b0382166000908152600360205260408120805491612d6083615429565b9190505550612d8b8160046000612d748590565b8152602001908152602001600020548460006141ff565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a11612e8457634e487b7160e01b600052600160045260246000fd5b828015612e8e5750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401612ecd949392919061531a565b602060405180830381600087803b158015612ee757600080fd5b505af1158015612efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1f91906151ba565b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149150505b95945050505050565b826001141561305f576000612f6f610198836153b0565b612f79908461535f565b90506000612f8682613242565b90506001600160a01b038116612fde5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106e5565b866001600160a01b0316816001600160a01b03161461303f5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e736665725175616400000000000060448201526064016106e5565b5060009081526004602052604090206001600160a01b038516905561306c565b61306c8585858585614292565b60005b61307984806153b0565b8110156108c95761308c8185858561409d565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4806130d681615429565b91505061306f565b6001600160a01b0385163b151580156131035750613103856317a2fd9160e21b612dd1565b15610dda57600061311485806153b0565b67ffffffffffffffff81111561313a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613163578160200160208202803683370190505b50905060005b61317386806153b0565b8110156131c3576131868187878761409d565b8282815181106131a657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806131bb81615429565b915050613169565b506131d18888888486614140565b612af15760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106e5565b60007fff000000000000000000000000000000000000000000000000000000000000008216156132b45760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106e5565b60006132c261019884615444565b905060006132d26101988561539c565b60008581526004602052604090205490915080156132f4579250610643915050565b600060048161019861330760038761539c565b6133129060036153b0565b61331c91906153b0565b61332760038861539c565b6133329060036153b0565b61334090600160f81b61535f565b61334a919061535f565b815260208101919091526040016000205490506001600160a01b0381161561337757935061064392505050565b600060048161019861338a60068861539c565b6133959060066153b0565b61339f91906153b0565b6133aa60068961539c565b6133b59060066153b0565b6133c390600160f91b61535f565b6133cd919061535f565b815260208101919091526040016000205490506001600160a01b038116156133fb5794506106439350505050565b600060048161019861340e600c8961539c565b61341990600c6153b0565b61342391906153b0565b61342e600c8a61539c565b61343990600c6153b0565b61344790600360f81b61535f565b613451919061535f565b815260208101919091526040016000205490506001600160a01b03811615613480579550610643945050505050565b6004600061019861349260188961539c565b61349d9060186153b0565b6134a791906153b0565b6134b260188a61539c565b6134bd9060186153b0565b6134cb90600160fa1b61535f565b6134d5919061535f565b8152602001908152602001600020549650505050505050610643565b816001600160a01b0316836001600160a01b0316146135525760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016106e5565b80740100000000000000000000000000000000000000006135786001600160ff1b6153cf565b6000838152600460209081526040808320805494909416949094179092556001600160a01b038716815260039091529081208054916135b683615412565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6001600160a01b03821660009081526001602052604090205460ff16156136625760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e474500000000000000000060448201526064016106e5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0385166137255760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f2061646472657373000000000000000000000000000060448201526064016106e5565b61372f8484615444565b15801561374357506137418483615444565b155b61378f5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106e5565b61379b846101986153cf565b83111580156137b557506137b1846101986153cf565b8211155b6138015760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106e5565b600080613810610198856153b0565b61381a908661535f565b9050856001141561382d57809150613890565b856003141561384b5761384481600160f81b61535f565b9150613890565b85600614156138625761384481600160f91b61535f565b85600c14156138795761384481600360f81b61535f565b8560181415610ff75761384481600160fa1b61535f565b600460006101986138a260188861539c565b6138ad9060186153b0565b6138b791906153b0565b6138c260188961539c565b6138cd9060186153b0565b6138db90600160fa1b61535f565b6138e5919061535f565b8152602001908152602001600020546000146139435760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320323478323400000000000000000060448201526064016106e5565b600061394f878761535f565b9050600061395d888761535f565b9050600c8811613a1f5760046000610198613979600c8a61539c565b61398490600c6153b0565b61398e91906153b0565b613999600c8b61539c565b6139a490600c6153b0565b6139b290600360f81b61535f565b6139bc919061535f565b815260200190815260200160002054600014613a1a5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320313278313200000000000000000060448201526064016106e5565b613ae0565b865b82811015613ade57865b82811015613acb576000613a41610198836153b0565b613a4f84600360f81b61535f565b613a59919061535f565b60008181526004602052604090205490915015613ab85760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206d696e74656420617320313278313200000000000000000060448201526064016106e5565b50613ac4600c8261535f565b9050613a2b565b50613ad7600c8261535f565b9050613a21565b505b60068811613ba05760046000610198613afa60068a61539c565b613b059060066153b0565b613b0f91906153b0565b613b1a60068b61539c565b613b259060066153b0565b613b3390600160f91b61535f565b613b3d919061535f565b815260200190815260200160002054600014613b9b5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320367836000000000000000000000060448201526064016106e5565b613c61565b865b82811015613c5f57865b82811015613c4c576000613bc2610198836153b0565b613bd084600160f91b61535f565b613bda919061535f565b60008181526004602052604090205490915015613c395760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320367836000000000000000000000060448201526064016106e5565b50613c4560068261535f565b9050613bac565b50613c5860068261535f565b9050613ba2565b505b60038811613d215760046000610198613c7b60038a61539c565b613c869060036153b0565b613c9091906153b0565b613c9b60038b61539c565b613ca69060036153b0565b613cb490600160f81b61535f565b613cbe919061535f565b815260200190815260200160002054600014613d1c5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320337833000000000000000000000060448201526064016106e5565b613de2565b865b82811015613de057865b82811015613dcd576000613d43610198836153b0565b613d5184600160f81b61535f565b613d5b919061535f565b60008181526004602052604090205490915015613dba5760405162461bcd60e51b815260206004820152601560248201527f416c7265616479206d696e74656420617320337833000000000000000000000060448201526064016106e5565b50613dc660038261535f565b9050613d2d565b50613dd960038261535f565b9050613d23565b505b60005b613def89806153b0565b811015613eae576000613e04828b8b8b61409d565b60008681526004602052604090205490915015613e635760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206d696e74656400000000000000000000000000000000000060448201526064016106e5565b60405181906001600160a01b038d16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080613ea681615429565b915050613de5565b5060008481526004602052604090206001600160a01b038a169055613ed388806153b0565b6001600160a01b038a1660009081526003602052604081208054909190613efb90849061535f565b90915550613f189050613f0c612643565b60008b8b8b8b8b6130de565b505050505050505050565b606081613f64575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610643565b8160005b8115613f8e5780613f7881615429565b9150613f879050600a8361539c565b9150613f68565b60008167ffffffffffffffff811115613fb757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613fe1576020820181803683370190505b509050815b851561409457613ff76001826153cf565b90506000614006600a8861539c565b61401190600a6153b0565b61401b90886153cf565b614026906030615377565b905060008160f81b90508084848151811061405157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061408b600a8961539c565b97505050613fe6565b50949350505050565b6000806140aa858761539c565b90506140b7600282615444565b6140f8576101986140c8828561535f565b6140d291906153b0565b6140dc8688615444565b6140e6908661535f565b6140f0919061535f565b915050614138565b610198614105828561535f565b61410f91906153b0565b6141198688615444565b61412490600161535f565b61412e878761535f565b6140e691906153cf565b949350505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b815260040161417594939291906152b1565b602060405180830381600087803b15801561418f57600080fd5b505af11580156141a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c791906151ba565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b8015614243576000848152600460205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055611a70565b6001600160a01b03821661425c6001600160ff1b6153cf565b841673ffffffffffffffffffffffffffffffffffffffff1916176004600086815260208101919091526040016000205550505050565b61429c8383615444565b1580156142b057506142ae8382615444565b155b6142fc5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106e5565b614308836101986153cf565b8211158015614322575061431e836101986153cf565b8111155b61436e5760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106e5565b826003141561438b576143858585848460016143d0565b50610850565b82600614156143a2576143858585848460016146a1565b82600c14156143b95761438585858484600161483d565b8260181415610ff7576143858585848460016149d9565b6000806143df610198856153b0565b6143e9908661535f565b905060006143fb82600160f81b61535f565b90506001865b61440c88600361535f565b81101561447657865b61442088600361535f565b811015614463576144468b614437610198846153b0565b614441908561535f565b614bf4565b801561444f5750825b92508061445b81615429565b915050614415565b508061446e81615429565b915050614401565b5084156146955780614670576000828152600460205260409020546001600160a01b038a16148061451257506001600160a01b038916600460006101986144be60068b61539c565b6144c99060066153b0565b6144d391906153b0565b6144de60068c61539c565b6144e99060066153b0565b6144f790600160f91b61535f565b614501919061535f565b815260200190815260200160002054145b8061458857506001600160a01b03891660046000610198614534600c8b61539c565b61453f90600c6153b0565b61454991906153b0565b614554600c8c61539c565b61455f90600c6153b0565b61456d90600360f81b61535f565b614577919061535f565b815260200190815260200160002054145b806145fe57506001600160a01b038916600460006101986145aa60188b61539c565b6145b59060186153b0565b6145bf91906153b0565b6145ca60188c61539c565b6145d59060186153b0565b6145e390600160fa1b61535f565b6145ed919061535f565b815260200190815260200160002054145b6146705760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e7420717561647300000000000000000000000000000000000000000060648201526084016106e5565b5060009081526004602052604090206001600160a01b03871690555060019050612f4f565b98975050505050505050565b6000806146b0610198856153b0565b6146ba908661535f565b905060006146cc82600160f91b61535f565b90506001865b6146dd88600661535f565b8110156147f557865b6146f188600661535f565b8110156147e25760006147088c8c858560006143d0565b90506000614718610198846153b0565b61472685600160f81b61535f565b614730919061535f565b60008181526004602052604090205490915080156147b557826147a5578d6001600160a01b031681146147a55760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203378332071756164000000000000000000000060448201526064016106e5565b6000828152600460205260408120555b82806147c057508015155b80156147c95750855b95505050506003816147db919061535f565b90506146e6565b506147ee60038261535f565b90506146d2565b5084156146955780614670576000828152600460205260409020546001600160a01b038a16148061458857506001600160a01b03891660046000610198614534600c8b61539c565b60008061484c610198856153b0565b614856908661535f565b9050600061486882600360f81b61535f565b90506001865b61487988600c61535f565b81101561499157865b61488d88600c61535f565b81101561497e5760006148a48c8c858560006146a1565b905060006148b4610198846153b0565b6148c285600160f91b61535f565b6148cc919061535f565b60008181526004602052604090205490915080156149515782614941578d6001600160a01b031681146149415760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203678362071756164000000000000000000000060448201526064016106e5565b6000828152600460205260408120555b828061495c57508015155b80156149655750855b9550505050600681614977919061535f565b9050614882565b5061498a60068261535f565b905061486e565b5084156146955780614670576000828152600460205260409020546001600160a01b038a1614806145fe57506001600160a01b038916600460006101986145aa60188b61539c565b6000806149e8610198856153b0565b6149f2908661535f565b90506000614a0482600160fa1b61535f565b90506001865b614a1588601861535f565b811015614b2d57865b614a2988601861535f565b811015614b1a576000614a408c8c8585600061483d565b90506000614a50610198846153b0565b614a5e85600360f81b61535f565b614a68919061535f565b6000818152600460205260409020549091508015614aed5782614add578d6001600160a01b03168114614add5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66203132783132207175616400000000000000000060448201526064016106e5565b6000828152600460205260408120555b8280614af857508015155b8015614b015750855b9550505050600c81614b13919061535f565b9050614a1e565b50614b26600c8261535f565b9050614a0a565b508415614bc55780614670576000828152600460205260409020546001600160a01b038a16146146705760405162461bcd60e51b815260206004820152602a60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f74207060448201527f6172656e7420717561640000000000000000000000000000000000000000000060648201526084016106e5565b8080614be757506000828152600460205260409020546001600160a01b038a16145b9998505050505050505050565b6000818152600460205260408120548015614c8257836001600160a01b0316816001600160a01b031614614c6a5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016106e5565b50506000818152600460205260408120556001611d1b565b5060009392505050565b80356001600160a01b038116811461064357600080fd5b60008083601f840112614cb4578081fd5b50813567ffffffffffffffff811115614ccb578182fd5b6020830191508360208083028501011115614ce557600080fd5b9250929050565b8035801515811461064357600080fd5b60008083601f840112614d0d578182fd5b50813567ffffffffffffffff811115614d24578182fd5b602083019150836020828501011115614ce557600080fd5b600082601f830112614d4c578081fd5b813567ffffffffffffffff80821115614d6757614d67615484565b604051601f8301601f19908116603f01168101908282118183101715614d8f57614d8f615484565b81604052838152866020858801011115614da7578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215614dd4578081fd5b611d1882614c8c565b60008060408385031215614def578081fd5b614df883614c8c565b9150614e0660208401614c8c565b90509250929050565b60008060008060008060008060008060c08b8d031215614e2d578586fd5b614e368b614c8c565b9950614e4460208c01614c8c565b985060408b013567ffffffffffffffff80821115614e60578788fd5b614e6c8e838f01614ca3565b909a50985060608d0135915080821115614e84578788fd5b614e908e838f01614ca3565b909850965060808d0135915080821115614ea8578586fd5b614eb48e838f01614ca3565b909650945060a08d0135915080821115614ecc578384fd5b50614ed98d828e01614cfc565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215614f0a578182fd5b614f1387614c8c565b9550614f2160208801614c8c565b9450604087013567ffffffffffffffff80821115614f3d578384fd5b614f498a838b01614ca3565b90965094506060890135915080821115614f61578384fd5b50614f6e89828a01614cfc565b979a9699509497509295939492505050565b600080600060608486031215614f94578283fd5b614f9d84614c8c565b9250614fab60208501614c8c565b9150614fb960408501614cec565b90509250925092565b600080600060608486031215614fd6578283fd5b614fdf84614c8c565b9250614fed60208501614c8c565b9150604084013590509250925092565b60008060008060808587031215615012578384fd5b61501b85614c8c565b935061502960208601614c8c565b925060408501359150606085013567ffffffffffffffff81111561504b578182fd5b61505787828801614d3c565b91505092959194509250565b600080600080600080600060c0888a03121561507d578283fd5b61508688614c8c565b965061509460208901614c8c565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff8111156150c4578283fd5b6150d08a828b01614cfc565b989b979a50959850939692959293505050565b600080604083850312156150f5578182fd5b6150fe83614c8c565b9150614e0660208401614cec565b6000806040838503121561511e578182fd5b61512783614c8c565b946020939093013593505050565b600080600080600060a0868803121561514c578283fd5b61515586614c8c565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115615185578182fd5b61519188828901614d3c565b9150509295509295909350565b6000602082840312156151af578081fd5b813561144d8161549a565b6000602082840312156151cb578081fd5b815161144d8161549a565b6000602082840312156151e7578081fd5b5035919050565b600080600060608486031215615202578081fd5b505081359360208301359350604090920135919050565b600081518084526152318160208601602086016153e6565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f008252825161527d81601f8501602087016153e6565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015615305578451845293820193928201926001016152e9565b50505083810360608501526146958186615219565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e8e6080830184615219565b600060208252611d186020830184615219565b6000821982111561537257615372615458565b500190565b600060ff821660ff84168060ff0382111561539457615394615458565b019392505050565b6000826153ab576153ab61546e565b500490565b60008160001904831182151516156153ca576153ca615458565b500290565b6000828210156153e1576153e1615458565b500390565b60005b838110156154015781810151838201526020016153e9565b83811115611a705750506000910152565b60008161542157615421615458565b506000190190565b600060001982141561543d5761543d615458565b5060010190565b6000826154535761545361546e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e8757600080fdfea2646970667358221220647b34b06fd22c62236075e45bbecc473546aee1840ca20248191061a112854864736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "The token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "The token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "height()": {
        "returns": {
          "_0": "height"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface"
        },
        "returns": {
          "_0": "True if the interface is supported"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token contract"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "returns": {
          "_0": "The URI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "width()": {
        "returns": {
          "_0": "width"
        }
      },
      "x(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the x coordinates"
        }
      },
      "y(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the y coordinates"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token`id` from `from`."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "height()": {
        "notice": "total height of the map"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      },
      "width()": {
        "notice": "total width of the map"
      },
      "x(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "y(uint256)": {
        "notice": "y coordinate of Land token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2101,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2104,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22604,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_admin",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22836,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20708,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 20895,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20899,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20905,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20909,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 30702,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "polygonLandTunnel",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 30778,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}