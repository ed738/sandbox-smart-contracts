{
  "address": "0xD28870B33Ba77973044a4639c217934da51556c7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "contract IPolygonAssetERC1155",
          "name": "_childToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxTransferLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "SetTransferLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "batchWithdrawToRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childToken",
      "outputs": [
        {
          "internalType": "contract IPolygonAssetERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTransferLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTransferLimit",
          "type": "uint256"
        }
      ],
      "name": "setTransferLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3f92ff13d66e9a439f64d74d9f6902c6404784f9b3e091eb68df316319f8d43",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xD28870B33Ba77973044a4639c217934da51556c7",
    "transactionIndex": 8,
    "gasUsed": "1932519",
    "logsBloom": "0x
    "blockHash": "0x57676c14d5c399606e732c1e81500aa37b63e2917d480d889e384b6bbda11795",
    "transactionHash": "0xa3f92ff13d66e9a439f64d74d9f6902c6404784f9b3e091eb68df316319f8d43",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 27157280,
        "transactionHash": "0xa3f92ff13d66e9a439f64d74d9f6902c6404784f9b3e091eb68df316319f8d43",
        "address": "0xD28870B33Ba77973044a4639c217934da51556c7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x57676c14d5c399606e732c1e81500aa37b63e2917d480d889e384b6bbda11795"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 27157280,
        "transactionHash": "0xa3f92ff13d66e9a439f64d74d9f6902c6404784f9b3e091eb68df316319f8d43",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000010265a0c0225f0000000000000000000000000000000000000000000000000045620e5610aabc5000000000000000000000000000000000000000000001138b5f540f43116f0610000000000000000000000000000000000000000000000000445fa8b550885d5000000000000000000000000000000000000000000001138b605674e3d191651",
        "logIndex": 52,
        "blockHash": "0x57676c14d5c399606e732c1e81500aa37b63e2917d480d889e384b6bbda11795"
      }
    ],
    "blockNumber": 27157280,
    "cumulativeGasUsed": "4130971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf73231F28B7331BBe3124B907840A94851f9f11",
    "0x93dFD2ed5b3FFbDaF52bd6cA1E0751cc3E51F787",
    "0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",
    20
  ],
  "numDeployments": 1,
  "solcInputHash": "371a1c7bc065c121c5374a99315a8141",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"contract IPolygonAssetERC1155\",\"name\":\"_childToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransferLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetTransferLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdrawToRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childToken\",\"outputs\":[{\"internalType\":\"contract IPolygonAssetERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransferLimit\",\"type\":\"uint256\"}],\"name\":\"setTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token transfers across bridge\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers across bridge\"}},\"title\":\"ASSETERC1155 bridge on L2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol\":\"PolygonAssetERC1155Tunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xf5b498e3d85967e8bedcfa7f10078d6018b6168eb56926d1b18a526e68e1c467\",\"license\":\"MIT\"},\"src/solc_0.8/asset/libraries/ERC1155ERC721Helper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary ERC1155ERC721Helper {\\n    bytes32 private constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n\\n    uint256 public constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\\n    uint256 public constant IS_NFT_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1);\\n    uint256 public constant CHAIN_INDEX_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 8);\\n    uint256 public constant PACK_ID_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40);\\n    uint256 public constant PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40 - 12);\\n    uint256 public constant NFT_INDEX_OFFSET = 63;\\n\\n    uint256 public constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\\n    uint256 public constant NOT_IS_NFT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant NFT_INDEX = 0x0000000000000000000000000000000000000000007FFFFF8000000000000000;\\n    uint256 public constant NOT_NFT_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000007FFFFFFFFFFFFFFF;\\n    uint256 public constant URI_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFFFFF800;\\n    uint256 public constant PACK_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFF800000;\\n    uint256 public constant PACK_INDEX = 0x00000000000000000000000000000000000000000000000000000000000007FF;\\n    uint256 public constant PACK_NUM_FT_TYPES = 0x00000000000000000000000000000000000000000000000000000000007FF800;\\n    uint256 public constant CHAIN_INDEX = 0x00000000000000000000000000000000000000007F8000000000000000000000;\\n    uint256 public constant NOT_CHAIN_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF807FFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 public constant MAX_SUPPLY = uint256(2)**32 - 1;\\n    uint256 public constant MAX_PACK_SIZE = uint256(2)**11;\\n    uint256 public constant MAX_NUM_FT = uint256(2)**12;\\n\\n    function toFullURI(bytes32 hash, uint256 id) external pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", uint2str(id & PACK_INDEX), \\\".json\\\"));\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function hash2base32(bytes32 hash) public pure returns (string memory _uintAsString) {\\n        uint256 _i = uint256(hash);\\n        uint256 k = 52;\\n        bytes memory bstr = new bytes(k);\\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\\n        _i /= 8;\\n        while (k > 0) {\\n            bstr[--k] = base32Alphabet[_i % 32];\\n            _i /= 32;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            bstr[--k] = bytes1(uint8(48 + uint8(_i % 10)));\\n            _i /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x0fa0ba1d7e2e46c9fb7e1029731be7ddbb648c6909c08967d7106f5d4956d6b3\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC1155/AssetBaseERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../common/interfaces/IAssetERC721.sol\\\";\\nimport \\\"../common/Libraries/ObjectLib32.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithSuperOperators.sol\\\";\\nimport \\\"../asset/libraries/ERC1155ERC721Helper.sol\\\";\\n\\n// solhint-disable max-states-count\\nabstract contract AssetBaseERC1155 is WithSuperOperators, IERC1155 {\\n    using Address for address;\\n    using ObjectLib32 for ObjectLib32.Operations;\\n    using ObjectLib32 for uint256;\\n\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    mapping(address => uint256) private _numNFTPerAddress; // erc721\\n    mapping(uint256 => uint256) private _owners; // erc721\\n    mapping(address => mapping(uint256 => uint256)) private _packedTokenBalance; // erc1155\\n    mapping(address => mapping(address => bool)) private _operatorsForAll; // erc721 and erc1155\\n    mapping(uint256 => address) private _erc721operators; // erc721\\n    mapping(uint256 => bytes32) internal _metadataHash; // erc721 and erc1155\\n    mapping(uint256 => bytes) internal _rarityPacks; // rarity configuration per packs (2 bits per Asset) *DEPRECATED*\\n    mapping(uint256 => uint32) private _nextCollectionIndex; // extraction\\n\\n    // @note : Deprecated.\\n    mapping(address => address) private _creatorship; // creatorship transfer // deprecated\\n\\n    mapping(address => bool) private _bouncers; // the contracts allowed to mint\\n\\n    // @note : Deprecated.\\n    mapping(address => bool) private _metaTransactionContracts;\\n\\n    address private _bouncerAdmin;\\n\\n    bool internal _init;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n    uint256 internal _initBits;\\n    address internal _predicate; // used in place of polygon's `PREDICATE_ROLE`\\n\\n    uint8 internal _chainIndex; // modify this for l2\\n\\n    address internal _trustedForwarder;\\n\\n    IAssetERC721 public _assetERC721;\\n\\n    uint256[20] private __gap;\\n    // solhint-enable max-states-count\\n\\n    event BouncerAdminChanged(address indexed oldBouncerAdmin, address indexed newBouncerAdmin);\\n    event Bouncer(address indexed bouncer, bool indexed enabled);\\n    event Extraction(uint256 indexed id, uint256 indexed newId);\\n    event AssetERC721Set(IAssetERC721 indexed assetERC721);\\n\\n    function init(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        IAssetERC721 assetERC721,\\n        uint8 chainIndex\\n    ) public {\\n        // one-time init of bitfield's previous versions\\n        _checkInit(1);\\n        _admin = admin;\\n        _bouncerAdmin = bouncerAdmin;\\n        _assetERC721 = assetERC721;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        _chainIndex = chainIndex;\\n    }\\n\\n    /// @notice Change the minting administrator to be `newBouncerAdmin`.\\n    /// @param newBouncerAdmin address of the new minting administrator.\\n    function changeBouncerAdmin(address newBouncerAdmin) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        require(newBouncerAdmin != address(0), \\\"AssetBaseERC1155: new bouncer admin can't be zero address\\\");\\n        emit BouncerAdminChanged(_bouncerAdmin, newBouncerAdmin);\\n        _bouncerAdmin = newBouncerAdmin;\\n    }\\n\\n    /// @notice Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\\n    /// @param bouncer address that will be given/removed minting bouncer rights.\\n    /// @param enabled set whether the address is enabled or disabled as a minting bouncer.\\n    function setBouncer(address bouncer, bool enabled) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        _bouncers[bouncer] = enabled;\\n        emit Bouncer(bouncer, enabled);\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param value amount of token transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override {\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        bool success = _transferFrom(from, to, id, value);\\n        if (success) {\\n            require(_checkOnERC1155Received(_msgSender(), from, to, id, value, data), \\\"1155_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param values amount of each token type transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"MISMATCHED_ARR_LEN\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        address msgSender = _msgSender();\\n        bool authorized = from == msgSender || isApprovedForAll(from, msgSender);\\n\\n        _batchTransferFrom(from, to, ids, values, authorized);\\n        emit TransferBatch(msgSender, from, to, ids, values);\\n        require(_checkOnERC1155BatchReceived(msgSender, from, to, ids, values, data), \\\"1155_TRANSFER_REJECTED\\\");\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all `sender`'s tokens.\\n    /// @dev used for Meta Transaction (from metaTransactionContract).\\n    /// @param sender address which grant approval.\\n    /// @param operator address which will be granted rights to transfer all token owned by `sender`.\\n    /// @param approved whether to approve or revoke.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender == _msgSender() || _superOperators[_msgSender()], \\\"!AUTHORIZED\\\");\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved) external override(IERC1155) {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Returns the current administrator in charge of minting rights.\\n    /// @return the current minting administrator in charge of minting rights.\\n    function getBouncerAdmin() external view returns (address) {\\n        return _bouncerAdmin;\\n    }\\n\\n    /// @notice check whether address `who` is given minting bouncer rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minting rights.\\n    function isBouncer(address who) public view returns (bool) {\\n        return _bouncers[who];\\n    }\\n\\n    /// @notice Get the balance of `owners` for each token type `ids`.\\n    /// @param owners the addresses of the token holders queried.\\n    /// @param ids ids of each token type to query.\\n    /// @return the balance of each `owners` for each token type `ids`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"ARG_LENGTH_MISMATCH\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    /// @notice A descriptive name for the collection of tokens in this contract.\\n    /// @return _name the name of the tokens.\\n    function name() external pure returns (string memory _name) {\\n        return \\\"Sandbox's ASSETs\\\";\\n    }\\n\\n    /// @notice An abbreviated name for the collection of tokens in this contract.\\n    /// @return _symbol the symbol of the tokens.\\n    function symbol() external pure returns (string memory _symbol) {\\n        return \\\"ASSET\\\";\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param id the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 id) external pure override returns (bool) {\\n        return\\n            id == 0x01ffc9a7 || //ERC165\\n            id == 0xd9b67a26 || // ERC1155\\n            id == 0x0e89341c || // ERC1155 metadata\\n            id == 0x572b6c05; // ERC2771\\n    }\\n\\n    /// Collection methods for ERC721s extracted from an ERC1155 -----------------------------------------------------\\n\\n    /// @notice Gives the collection a specific token belongs to.\\n    /// @param id the token to get the collection of.\\n    /// @return the collection the NFT is part of.\\n    function collectionOf(uint256 id) public view returns (uint256) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\"); // Note: doesHashExist must track ERC721s\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        require(doesHashExist(collectionId), \\\"UNMINTED_COLLECTION\\\");\\n        return collectionId;\\n    }\\n\\n    /// @notice Return wether the id is a collection\\n    /// @param id collectionId to check.\\n    /// @return whether the id is a collection.\\n    function isCollection(uint256 id) external view returns (bool) {\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        return doesHashExist(collectionId);\\n    }\\n\\n    /// @notice Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\\n    /// @param id the token to get the index of.\\n    /// @return the index/order at which the token `id` was minted in a collection.\\n    function collectionIndexOf(uint256 id) external view returns (uint256) {\\n        collectionOf(id); // this check if id and collection indeed was ever minted\\n        return uint24((id & ERC1155ERC721Helper.NFT_INDEX) >> ERC1155ERC721Helper.NFT_INDEX_OFFSET);\\n    }\\n\\n    /// end collection methods ---------------------------------------------------------------------------------------\\n\\n    /// @notice Whether or not an ERC1155 or ERC721 tokenId has a valid structure and the metadata hash exists.\\n    /// @param id the token to check.\\n    /// @return bool whether a given id has a valid structure.\\n    /// @dev if IS_NFT > 0 then PACK_NUM_FT_TYPES may be 0\\n    function doesHashExist(uint256 id) public view returns (bool) {\\n        return (((id & ERC1155ERC721Helper.PACK_INDEX) <=\\n            ((id & ERC1155ERC721Helper.PACK_NUM_FT_TYPES) / ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER)) &&\\n            _metadataHash[id & ERC1155ERC721Helper.URI_ID] != 0);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given ERC1155 asset.\\n    /// @param id ERC1155 token to get the uri of.\\n    /// @return URI string\\n    function uri(uint256 id) public view returns (string memory) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\"); // prevent returning invalid uri\\n        return ERC1155ERC721Helper.toFullURI(_metadataHash[id & ERC1155ERC721Helper.URI_ID], id);\\n    }\\n\\n    /// @notice Get the balance of `owner` for the token type `id`.\\n    /// @param owner The address of the token holder.\\n    /// @param id the token type of which to get the balance of.\\n    /// @return the balance of `owner` for the token type `id`.\\n    function balanceOf(address owner, uint256 id) public view override returns (uint256) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\");\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedTokenBalance[owner][bin].getValueInBin(index);\\n    }\\n\\n    /// @notice Extracts an EIP-721 Asset from an EIP-1155 Asset.\\n    /// @dev Extraction is limited to bouncers.\\n    /// @param sender address which own the token to be extracted.\\n    /// @param id the token type to extract from.\\n    /// @param to address which will receive the token.\\n    /// @return newId the id of the newly minted NFT.\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256) {\\n        require(sender == _msgSender() || isApprovedForAll(sender, _msgSender()), \\\"!AUTHORIZED\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(id & ERC1155ERC721Helper.IS_NFT == 0, \\\"UNIQUE_ERC1155\\\");\\n        uint24 tokenCollectionIndex = uint24(_nextCollectionIndex[id]) + 1;\\n        _nextCollectionIndex[id] = tokenCollectionIndex;\\n        string memory metaData = uri(id);\\n        uint256 newId =\\n            id +\\n                ERC1155ERC721Helper.IS_NFT_OFFSET_MULTIPLIER + // newId is always an NFT; IS_NFT is 1\\n                (tokenCollectionIndex) *\\n                2**ERC1155ERC721Helper.NFT_INDEX_OFFSET; // uint24 nft index\\n        _burnFT(sender, id, 1);\\n        _assetERC721.mint(to, newId, bytes(abi.encode(metaData)));\\n        emit Extraction(id, newId);\\n        return newId;\\n    }\\n\\n    /// @notice Set the ERC721 contract.\\n    /// @param assetERC721 the contract address to set the ERC721 contract to.\\n    /// @return true if the operation completes successfully.\\n    function setAssetERC721(IAssetERC721 assetERC721) external returns (bool) {\\n        require(_admin == _msgSender(), \\\"!AUTHORIZED\\\");\\n        _assetERC721 = assetERC721;\\n        emit AssetERC721Set(assetERC721);\\n        return true;\\n    }\\n\\n    /// @notice Queries the approval status of `operator` for owner `owner`.\\n    /// @param owner the owner of the tokens.\\n    /// @param operator address of authorized operator.\\n    /// @return isOperator true if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override(IERC1155)\\n        returns (bool isOperator)\\n    {\\n        require(owner != address(0), \\\"OWNER==0\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Queries the chainIndex that a token was minted on originally.\\n    /// @param id the token id to query.\\n    /// @return chainIndex the chainIndex that the token was minted on originally.\\n    /// @dev take care not to confuse chainIndex with chain ID.\\n    function getChainIndex(uint256 id) external pure returns (uint256) {\\n        return uint8((id & ERC1155ERC721Helper.CHAIN_INDEX) / ERC1155ERC721Helper.CHAIN_INDEX_OFFSET_MULTIPLIER);\\n    }\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(sender != address(0), \\\"SENDER==0\\\");\\n        require(sender != operator, \\\"SENDER==OPERATOR\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        require(!_superOperators[operator], \\\"APPR_EXISTING_SUPEROPERATOR\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /* solhint-disable code-complexity */\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bool authorized\\n    ) internal {\\n        uint256 numItems = ids.length;\\n        uint256 bin;\\n        uint256 index;\\n        uint256 balFrom;\\n        uint256 balTo;\\n\\n        uint256 lastBin;\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n\\n        for (uint256 i = 0; i < numItems; i++) {\\n            if (from == to) {\\n                _checkEnoughBalance(from, ids[i], values[i]);\\n            } else if (values[i] > 0) {\\n                (bin, index) = ids[i].getTokenBinIndex();\\n                if (lastBin == 0) {\\n                    lastBin = bin;\\n                    balFrom = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[from][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.SUB\\n                    );\\n                    balTo = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[to][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.ADD\\n                    );\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        _packedTokenBalance[to][lastBin] = balTo;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        balTo = _packedTokenBalance[to][bin];\\n                        lastBin = bin;\\n                    }\\n\\n                    balFrom = balFrom.updateTokenBalance(index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = balTo.updateTokenBalance(index, values[i], ObjectLib32.Operations.ADD);\\n                }\\n            }\\n        }\\n\\n        if (bin != 0 && from != to) {\\n            _packedTokenBalance[from][bin] = balFrom;\\n            _packedTokenBalance[to][bin] = balTo;\\n        }\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0 && amount <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n        _burnFT(from, id, uint32(amount));\\n        emit TransferSingle(_msgSender(), from, address(0), id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        address operator = _msgSender();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(amounts[i] > 0 && amounts[i] <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n            _burnFT(from, ids[i], uint32(amounts[i]));\\n        }\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    function _burnFT(\\n        address from,\\n        uint256 id,\\n        uint32 amount\\n    ) internal {\\n        (uint256 bin, uint256 index) = (id).getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.SUB\\n        );\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        uint16 offset = 0;\\n        while (offset < amounts.length) {\\n            _mintPack(offset, amounts, to, ids);\\n            offset += 8;\\n        }\\n        _completeBatchMint(_msgSender(), to, ids, amounts, data);\\n    }\\n\\n    function _mintPack(\\n        uint16 offset,\\n        uint256[] memory supplies,\\n        address owner,\\n        uint256[] memory ids\\n    ) internal {\\n        (uint256 bin, uint256 index) = ids[offset].getTokenBinIndex();\\n        for (uint256 i = 0; i < 8 && offset + i < supplies.length; i++) {\\n            uint256 j = offset + i;\\n            if (supplies[j] > 0) {\\n                _packedTokenBalance[owner][bin] = _packedTokenBalance[owner][bin].updateTokenBalance(\\n                    index + i,\\n                    supplies[j],\\n                    ObjectLib32.Operations.ADD\\n                );\\n            }\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal returns (bool) {\\n        address sender = _msgSender();\\n        bool authorized = from == sender || isApprovedForAll(from, sender);\\n\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n        if (value > 0) {\\n            (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n            _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.SUB\\n            );\\n            _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.ADD\\n            );\\n        }\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n        return true;\\n    }\\n\\n    function _mint(\\n        address operator,\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[account][bin] = _packedTokenBalance[account][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.REPLACE\\n        );\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n        require(_checkOnERC1155Received(operator, address(0), account, id, amount, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    function _mintBatches(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] > 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(\\n                    index,\\n                    amounts[i],\\n                    ObjectLib32.Operations.REPLACE\\n                );\\n            }\\n        }\\n        _completeBatchMint(_msgSender(), to, ids, amounts, data);\\n    }\\n\\n    function _mintDeficit(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        address sender = _msgSender();\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[account][bin] = _packedTokenBalance[account][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.ADD\\n        );\\n\\n        emit TransferSingle(sender, address(0), account, id, amount);\\n        require(_checkOnERC1155Received(sender, address(0), account, id, amount, \\\"\\\"), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    /// @dev Allows the use of a bitfield to track the initialized status of the version `v` passed in as an arg.\\n    /// If the bit at the index corresponding to the given version is already set, revert.\\n    /// Otherwise, set the bit and return.\\n    /// @param v The version of this contract.\\n    function _checkInit(uint256 v) internal {\\n        require((_initBits >> v) & uint256(1) != 1, \\\"ALREADY_INITIALISED\\\");\\n        _initBits = _initBits | (uint256(1) << v);\\n    }\\n\\n    function _completeBatchMint(\\n        address operator,\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory supplies,\\n        bytes memory data\\n    ) internal {\\n        emit TransferBatch(operator, address(0), owner, ids, supplies);\\n        require(_checkOnERC1155BatchReceived(operator, address(0), owner, ids, supplies, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    function _checkEnoughBalance(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal view {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        require(_packedTokenBalance[from][bin].getValueInBin(index) >= value, \\\"BALANCE_TOO_LOW\\\");\\n    }\\n\\n    function _checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        return IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) == ERC1155_RECEIVED;\\n    }\\n\\n    function _checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes4 retval = IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data);\\n        return (retval == ERC1155_BATCH_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x479397c156421b904b18355cf427a668707db0aaccd5af9a300b9684fed7b7b3\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// with an initializer for proxies and a mutable forwarder\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc02a58a6fed654dc6ecd5c0ecb81192eb47daf61d093c5342b5f8d74481c0692\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x0239f3f826576fc7c050503f29a708b20b8b682df569e3d67bd83a836b0c925a\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x007c3f90984d5b3e4f47ac067040c66cb7dbee1dc7de1ce7777e5c38a44b6734\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/ObjectLib32.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nlibrary ObjectLib32 {\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 internal constant TYPES_BITS_SIZE = 32; // Max size of each object\\n    uint256 internal constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n    uint256 internal constant TYPE_ELIMINATOR = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /// @dev Return the bin number and index within that bin where ID is\\n    /// @param tokenId Object type\\n    /// @return bin Bin number.\\n    /// @return index ID's index within that bin.\\n    function getTokenBinIndex(uint256 tokenId) internal pure returns (uint256 bin, uint256 index) {\\n        uint256 id = tokenId & TYPE_ELIMINATOR;\\n        unchecked {bin = (id * TYPES_BITS_SIZE) / 256;}\\n        index = tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n     * @dev update the balance of a type provided in binBalances\\n     * @param binBalances Uint256 containing the balances of objects\\n     * @param index Index of the object in the provided bin\\n     * @param amount Value to update the type balance\\n     * @param operation Which operation to conduct :\\n     *     Operations.REPLACE : Replace type balance with amount\\n     *     Operations.ADD     : ADD amount to type balance\\n     *     Operations.SUB     : Substract amount from type balance\\n     */\\n    function updateTokenBalance(\\n        uint256 binBalances,\\n        uint256 index,\\n        uint256 amount,\\n        Operations operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (operation == Operations.ADD) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance + amount);\\n        } else if (operation == Operations.SUB) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            require(objectBalance >= amount, \\\"can't substract more than there is\\\");\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance - amount);\\n        } else if (operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(binBalances, index, amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n\\n    /*\\n     * @dev return value in binValue at position index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index index at which to retrieve value\\n     * @return Value at given index in bin\\n     */\\n    function getValueInBin(uint256 binValue, uint256 index) internal pure returns (uint256) {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n     * @dev return the updated binValue after writing amount at index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index Index at which to retrieve value\\n     * @param amount Value to store at index in bin\\n     * @return Value at given index in bin\\n     */\\n    function writeValueInBin(\\n        uint256 binValue,\\n        uint256 index,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        require(amount < 2**TYPES_BITS_SIZE, \\\"Amount to write in bin is too large\\\");\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue & ~(mask << leftShift)) | (amount << leftShift);\\n    }\\n}\\n\",\"keccak256\":\"0x1971311157835cb7d98deba635ae3dd28d72ff562632b8808fad43236e916fbc\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Base} from \\\"./IERC721Base.sol\\\";\\n\\ninterface IAssetERC721 is IERC721Base {\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa9a1229c39d9183bae268c1dc80150390b1a64483b8c785161e92faa51b5c1a0\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"./IERC721ExtendedToken.sol\\\";\\n\\ninterface IERC721Base is IERC721Upgradeable {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function supportsInterface(bytes4 id) external view override returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x515a9d8e988c63547108b16b7efd4942ab15887529a98861a522dea6dbb0437d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721ExtendedToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721ExtendedToken {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xe574d923fe66e20909df0d06b73478d2922e4865d85c578db60bda34f6273d45\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonAssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IAssetERC721} from \\\"./IAssetERC721.sol\\\";\\n\\ninterface IPolygonAssetERC1155 {\\n    function changeBouncerAdmin(address newBouncerAdmin) external;\\n\\n    function setBouncer(address bouncer, bool enabled) external;\\n\\n    function setPredicate(address predicate) external;\\n\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id);\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintDeficit(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids);\\n\\n    // fails on non-NFT or nft who do not have collection (was a mistake)\\n    function collectionOf(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    // return true for Non-NFT ERC1155 tokens which exists\\n    function isCollection(uint256 id) external view returns (bool);\\n\\n    function collectionIndexOf(uint256 id) external view returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function getBouncerAdmin() external view returns (address);\\n\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256 newId);\\n\\n    function isBouncer(address who) external view returns (bool);\\n\\n    function creatorOf(uint256 id) external view returns (address);\\n\\n    function doesHashExist(uint256 id) external view returns (bool);\\n\\n    function isSuperOperator(address who) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool isOperator);\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external returns (uint256[] memory);\\n\\n    function name() external returns (string memory _name);\\n\\n    function symbol() external returns (string memory _symbol);\\n\\n    function supportsInterface(bytes4 id) external returns (bool);\\n\\n    function uri(uint256 id) external returns (string memory);\\n\\n    function setAssetERC721(IAssetERC721 assetERC721) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address);\\n\\n    function metadataHash(uint256 id) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4b10fe8de200ddfafad56903d3ac3ec897314f38d0d66c385c4c942598c1ec30\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/pos-portal/child/IChildToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IChildToken {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\",\"keccak256\":\"0x6a612c9bbc2b7e6a141986d9a0ab8d4f58de5ea6ae0dff8b190125ae74b83771\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../../assetERC1155/AssetBaseERC1155.sol\\\";\\nimport \\\"../../../common/interfaces/pos-portal/child/IChildToken.sol\\\";\\n\\n/// @title This contract is for AssetERC1155 which can be minted by a minter role.\\n/// @dev AssetERC1155 will be minted only on L2 and can be transferred to L1 and not minted on L1.\\n/// @dev This contract supports meta transactions.\\n/// @dev This contract is final, don't inherit from it.\\ncontract PolygonAssetERC1155 is AssetBaseERC1155, IChildToken {\\n    address public _childChainManager;\\n\\n    function initialize(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        address childChainManager,\\n        IAssetERC721 polygonAssetERC721,\\n        uint8 chainIndex\\n    ) external {\\n        require(address(childChainManager) != address(0), \\\"PolygonAssetERC1155Tunnel: childChainManager can't be zero\\\");\\n        init(trustedForwarder, admin, bouncerAdmin, polygonAssetERC721, chainIndex);\\n        _childChainManager = childChainManager;\\n    }\\n\\n    /// @notice Mint a token type for `creator` on slot `packId`.\\n    /// @dev For this function it is not required to provide data.\\n    /// @param creator address of the creator of the token.\\n    /// @param packId unique packId for that token.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.\\n    /// @param supply number of tokens minted for that token type.\\n    /// @param owner address that will receive the tokens.\\n    /// @param data extra data to accompany the minting call.\\n    /// @return id the id of the newly minted token type.\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id) {\\n        require(hash != 0, \\\"HASH==0\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(owner != address(0), \\\"TO==0\\\");\\n        id = _generateTokenId(creator, supply, packId, supply == 1 ? 0 : 1, 0);\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[uriId] = hash;\\n        _mint(_msgSender(), owner, id, supply, data);\\n    }\\n\\n    /// @notice Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n    /// @dev Should be used only by PolygonAssetERC1155Tunnel.\\n    /// @dev This function can be called when the token ID exists on another layer.\\n    /// @dev Encoded bytes32 metadata hash must be provided as data.\\n    /// @param owner address that will receive the tokens.\\n    /// @param id the id of the newly minted token.\\n    /// @param supply number of tokens minted for that token type.\\n    /// @param data token metadata.\\n    function mint(\\n        address owner,\\n        uint256 id,\\n        uint256 supply,\\n        bytes calldata data\\n    ) external {\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(data.length > 0, \\\"METADATA_MISSING\\\");\\n        require(owner != address(0), \\\"TO==0\\\");\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[uriId] = abi.decode(data, (bytes32));\\n        _mint(_msgSender(), owner, id, supply, data);\\n    }\\n\\n    /// @notice Mint multiple token types for `creator` on slot `packId`.\\n    /// @dev For this function it is not required to provide data.\\n    /// @param creator address of the creator of the tokens.\\n    /// @param packId unique packId for the tokens.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of each token type in the files: 0.json, 1.json, 2.json, etc...\\n    /// @param supplies number of tokens minted for each token type.\\n    /// @param rarityPack rarity power of each token types packed into 2 bits each.\\n    /// @param owner address that will receive the tokens.\\n    /// @param data extra data to accompany the minting call.\\n    /// @return ids the ids of each newly minted token types.\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids) {\\n        require(hash != 0, \\\"HASH==0\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(owner != address(0), \\\"TO==0\\\");\\n        ids = _allocateIds(creator, supplies, rarityPack, packId, hash);\\n        _mintBatch(owner, ids, supplies, data);\\n    }\\n\\n    /// @notice function to be called by tunnel to mint deficit of minted tokens\\n    /// @dev This mint calls for add instead of replace in packedTokenBalance\\n    /// @param account address of the ownerof tokens.\\n    /// @param id id of the token to be minted.\\n    /// @param amount quantity of the token to be minted.\\n    function mintDeficit(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        _mintDeficit(account, id, amount);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id`.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burn(uint256 id, uint256 amount) external {\\n        _burn(_msgSender(), id, amount);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"!AUTHORIZED\\\");\\n        _burn(from, id, amount);\\n    }\\n\\n    /// @notice This function is called when a token is deposited to the root chain.\\n    /// @dev Should be callable only by ChildChainManager.\\n    /// @dev Should handle deposit by minting the required tokenId(s) for user.\\n    /// @dev Minting can also be done by other functions.\\n    /// @param user user address for whom deposit is being done.\\n    /// @param depositData abi encoded tokenIds. Batch deposit also supported.\\n    function deposit(address user, bytes calldata depositData) external override {\\n        require(_msgSender() == _childChainManager, \\\"!DEPOSITOR\\\");\\n        require(user != address(0), \\\"INVALID_DEPOSIT_USER\\\");\\n        (uint256[] memory ids, uint256[] memory amounts, bytes memory data) =\\n            abi.decode(depositData, (uint256[], uint256[], bytes));\\n\\n        _mintBatches(user, ids, amounts, data);\\n    }\\n\\n    /// @notice called when user wants to withdraw single token back to root chain.\\n    /// @dev Should burn user's tokens. This transaction will be verified when exiting on root chain.\\n    /// @param id id to withdraw.\\n    /// @param amount amount to withdraw.\\n    function withdrawSingle(uint256 id, uint256 amount) external {\\n        _burn(_msgSender(), id, amount);\\n    }\\n\\n    /// @notice called when user wants to batch withdraw tokens back to root chain.\\n    /// @dev Should burn user's tokens. This transaction will be verified when exiting on root chain.\\n    /// @param ids ids to withdraw.\\n    /// @param amounts amounts to withdraw.\\n    function withdrawBatch(uint256[] calldata ids, uint256[] calldata amounts) external {\\n        _burnBatch(_msgSender(), ids, amounts);\\n    }\\n\\n    function metadataHash(uint256 id) external view returns (bytes32) {\\n        return _metadataHash[id & ERC1155ERC721Helper.URI_ID];\\n    }\\n\\n    function _allocateIds(\\n        address creator,\\n        uint256[] memory supplies,\\n        bytes memory rarityPack,\\n        uint40 packId,\\n        bytes32 hash\\n    ) internal returns (uint256[] memory ids) {\\n        require(supplies.length > 0, \\\"SUPPLIES<=0\\\");\\n        require(supplies.length <= ERC1155ERC721Helper.MAX_PACK_SIZE, \\\"BATCH_TOO_BIG\\\");\\n        ids = _generateTokenIds(creator, supplies, packId);\\n\\n        require(uint256(_metadataHash[ids[0] & ERC1155ERC721Helper.URI_ID]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[ids[0] & ERC1155ERC721Helper.URI_ID] = hash;\\n        _rarityPacks[ids[0] & ERC1155ERC721Helper.URI_ID] = rarityPack;\\n    }\\n\\n    function _generateTokenIds(\\n        address creator,\\n        uint256[] memory supplies,\\n        uint40 packId\\n    ) internal view returns (uint256[] memory) {\\n        uint16 numTokenTypes = uint16(supplies.length);\\n        uint256[] memory ids = new uint256[](numTokenTypes);\\n        uint16 numNFTs = 0;\\n        for (uint16 i = 0; i < numTokenTypes; i++) {\\n            if (numNFTs == 0) {\\n                if (supplies[i] == 1) {\\n                    numNFTs = uint16(numTokenTypes - i);\\n                }\\n            } else {\\n                require(supplies[i] == 1, \\\"NFTS_MUST_BE_LAST\\\");\\n            }\\n        }\\n        uint16 numFTs = numTokenTypes - numNFTs;\\n        for (uint16 i = 0; i < numTokenTypes; i++) {\\n            ids[i] = _generateTokenId(creator, supplies[i], packId, numFTs, i);\\n        }\\n        return ids;\\n    }\\n\\n    function _generateTokenId(\\n        address creator,\\n        uint256 supply,\\n        uint40 packId,\\n        uint16 numFTs,\\n        uint16 packIndex\\n    ) internal view returns (uint256) {\\n        require(supply > 0 && supply <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"SUPPLY_OUT_OF_BOUNDS\\\");\\n        require(numFTs >= 0 && numFTs <= ERC1155ERC721Helper.MAX_NUM_FT, \\\"NUM_FT_OUT_OF_BOUNDS\\\");\\n        return\\n            uint256(uint160(creator)) *\\n            ERC1155ERC721Helper.CREATOR_OFFSET_MULTIPLIER + // CREATOR uint160\\n            (supply == 1 ? uint256(1) * ERC1155ERC721Helper.IS_NFT_OFFSET_MULTIPLIER : 0) + // minted as NFT(1)|FT(0), 1 bit\\n            uint256(_chainIndex) *\\n            ERC1155ERC721Helper.CHAIN_INDEX_OFFSET_MULTIPLIER + // mainnet = 0, polygon = 1, uint8\\n            uint256(packId) *\\n            ERC1155ERC721Helper.PACK_ID_OFFSET_MULTIPLIER + // packId (unique pack), uint40\\n            numFTs *\\n            ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER + // number of fungible token in the pack, 12 bits\\n            packIndex; // packIndex (position in the pack), 11 bits\\n    }\\n}\\n\",\"keccak256\":\"0xcd527420405fb4e8a304d2ebf25ef529b871748ba971462064cf3211f537a9c5\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/security/Pausable.sol\\\";\\nimport \\\"../../../common/interfaces/IPolygonAssetERC1155.sol\\\";\\nimport \\\"../../common/ERC1155Receiver.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\n\\nimport \\\"./PolygonAssetERC1155.sol\\\";\\n\\n/// @title ASSETERC1155 bridge on L2\\ncontract PolygonAssetERC1155Tunnel is FxBaseChildTunnel, ERC1155Receiver, ERC2771Handler, Ownable, Pausable {\\n    IPolygonAssetERC1155 public childToken;\\n    uint256 public maxTransferLimit = 20;\\n    bool private fetchingAssets = false;\\n\\n    event SetTransferLimit(uint256 limit);\\n    event Deposit(address user, uint256 id, uint256 value, bytes data);\\n    event Withdraw(address user, uint256 id, uint256 value, bytes data);\\n\\n    function setTransferLimit(uint256 _maxTransferLimit) external onlyOwner {\\n        maxTransferLimit = _maxTransferLimit;\\n        emit SetTransferLimit(_maxTransferLimit);\\n    }\\n\\n    constructor(\\n        address _fxChild,\\n        IPolygonAssetERC1155 _childToken,\\n        address trustedForwarder,\\n        uint256 _maxTransferLimit\\n    ) FxBaseChildTunnel(_fxChild) {\\n        require(address(_childToken) != address(0), \\\"PolygonAssetERC1155Tunnel: _childToken can't be zero\\\");\\n        childToken = _childToken;\\n        maxTransferLimit = _maxTransferLimit;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    function batchWithdrawToRoot(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) external whenNotPaused {\\n        require(to != address(0), \\\"PolygonAssetERC1155Tunnel: to can't be zero\\\");\\n        require(ids.length > 0, \\\"MISSING_TOKEN_IDS\\\");\\n        require(ids.length < maxTransferLimit, \\\"EXCEEDS_TRANSFER_LIMIT\\\");\\n        bytes32[] memory metadataHashes = new bytes32[](ids.length);\\n        fetchingAssets = true;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            bytes32 metadataHash = childToken.metadataHash(ids[i]);\\n            metadataHashes[i] = metadataHash;\\n            bytes memory metadata = abi.encode(metadataHash);\\n            childToken.safeTransferFrom(_msgSender(), address(this), ids[i], values[i], abi.encode(metadataHash));\\n            emit Withdraw(to, ids[i], values[i], metadata);\\n        }\\n        fetchingAssets = false;\\n        _sendMessageToRoot(abi.encode(to, ids, values, abi.encode(metadataHashes)));\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @dev Pauses all token transfers across bridge\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @dev Unpauses all token transfers across bridge\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _processMessageFromRoot(\\n        uint256, /* stateId */\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        _syncDeposit(data);\\n    }\\n\\n    function _syncDeposit(bytes memory syncData) internal {\\n        (address to, uint256[] memory ids, uint256[] memory values, bytes memory data) =\\n            abi.decode(syncData, (address, uint256[], uint256[], bytes));\\n        bytes32[] memory metadataHashes = abi.decode(data, (bytes32[]));\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            bytes memory metadata = abi.encode(metadataHashes[i]);\\n            if (childToken.doesHashExist(ids[i])) {\\n                _depositMinted(to, ids[i], values[i], metadata);\\n            } else {\\n                childToken.mint(to, ids[i], values[i], metadata);\\n            }\\n            emit Deposit(to, ids[i], values[i], metadata);\\n        }\\n    }\\n\\n    function _depositMinted(\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        uint256 balance = childToken.balanceOf(address(this), id);\\n        if (balance >= value) {\\n            childToken.safeTransferFrom(address(this), to, id, value, data);\\n        } else {\\n            if (balance > 0) childToken.safeTransferFrom(address(this), to, id, balance, data);\\n            childToken.mintDeficit(to, id, (value - balance));\\n        }\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    function onERC1155Received(\\n        address, /*_operator*/\\n        address, /*_from*/\\n        uint256, /*_id*/\\n        uint256, /*_value*/\\n        bytes calldata /*_data*/\\n    ) external view override returns (bytes4) {\\n        require(fetchingAssets == true, \\\"PolygonAssetERC1155Tunnel: can't directly send Assets\\\");\\n        return 0xf23a6e61; //bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /*_operator*/\\n        address, /*_from*/\\n        uint256[] calldata, /*_ids*/\\n        uint256[] calldata, /*_values*/\\n        bytes calldata /*_data*/\\n    ) external view override returns (bytes4) {\\n        require(fetchingAssets == true, \\\"PolygonAssetERC1155Tunnel: can't directly send Assets\\\");\\n        return 0xbc197c81; //bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return\\n            interfaceId == 0x4e2312e0 || // ERC1155Receiver\\n            interfaceId == 0x01ffc9a7; // ERC165\\n    }\\n}\\n\",\"keccak256\":\"0x9a02a73655a5fda07bef5a8b88edd61e120eb711bb81638bc563f65ebe874a31\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/common/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nabstract contract ERC1155Receiver is IERC1155Receiver {\\n    function onERC1155Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* id */\\n        uint256, /* value */\\n        bytes calldata /* data */\\n    ) external view virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata, /* ids */\\n        uint256[] calldata, /* values */\\n        bytes calldata /* data */\\n    ) external view virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2f4a54d05c492e864b44fce3c778f97cd558d4d15cb7e75e6001a357cca15d40\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260146005556006805460ff191690553480156200002057600080fd5b5060405162002247380380620022478339810160408190526200004391620001ef565b600080546001600160a01b0319166001600160a01b038616179055620000726200006c62000151565b6200016e565b6003805460ff60a01b191690556001600160a01b038316620001005760405162461bcd60e51b815260206004820152603460248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a205f6368696c60448201527f64546f6b656e2063616e2774206265207a65726f000000000000000000000000606482015260840160405180910390fd5b600480546001600160a01b0319166001600160a01b03851617905560058190556200014782600280546001600160a01b0319166001600160a01b0392909216919091179055565b5050505062000261565b600062000168620001c060201b62000f641760201c565b90505b90565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002546000906001600160a01b0316331415620001e7575060131936013560601c6200016b565b50336200016b565b6000806000806080858703121562000205578384fd5b8451620002128162000248565b6020860151909450620002258162000248565b6040860151909350620002388162000248565b6060959095015193969295505050565b6001600160a01b03811681146200025e57600080fd5b50565b611fd680620002716000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80638da5cb5b116100cd578063ce1b815f11610081578063da74222811610066578063da742228146102f7578063f23a6e611461030a578063f2fde38b1461031d5761016c565b8063ce1b815f146102d3578063cf0927f5146102e45761016c565b8063ac0007de116100b2578063ac0007de14610265578063bc197c8114610278578063bd85e93b146102bc5761016c565b80638da5cb5b146102415780639a7c4b71146102525761016c565b8063715018a6116101245780637f1e9cb0116101095780637f1e9cb0146102135780638456cb5914610226578063888370941461022e5761016c565b8063715018a6146101f85780637a17feff146102005761016c565b8063450d11f011610155578063450d11f0146101a3578063572b6c05146101ce5780635c975abb146101f05761016c565b806301ffc9a7146101715780633f4ba83a14610199575b600080fd5b61018461017f366004611c3a565b610330565b60405190151581526020015b60405180910390f35b6101a16103c9565b005b6000546101b6906001600160a01b031681565b6040516001600160a01b039091168152602001610190565b6101846101dc3660046118af565b6002546001600160a01b0390811691161490565b610184610451565b6101a1610473565b6101a161020e366004611c7a565b6104f6565b6001546101b6906001600160a01b031681565b6101a16105ab565b6101a161023c3660046118af565b61062c565b6003546001600160a01b03166101b6565b6101a1610260366004611c92565b6106da565b6004546101b6906001600160a01b031681565b61028b6102863660046119bd565b6107a1565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610190565b6102c560055481565b604051908152602001610190565b6002546001600160a01b03166101b6565b6101a16102f2366004611af2565b61084f565b6101a16103053660046118af565b610d0f565b61028b610318366004611a78565b610db7565b6101a161032b3660046118af565b610e63565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103c357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6103d1610fae565b6001600160a01b03166103ec6003546001600160a01b031690565b6001600160a01b0316146104475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61044f610fbd565b565b60035474010000000000000000000000000000000000000000900460ff165b90565b61047b610fae565b6001600160a01b03166104966003546001600160a01b031690565b6001600160a01b0316146104ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b61044f600061107f565b6104fe610fae565b6001600160a01b03166105196003546001600160a01b031690565b6001600160a01b03161461056f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b60058190556040518181527f3fc6a03e501b3ca46f5b6c08064272abf4e2b0d2bbdeeaeba4e4a4f22c9e616d906020015b60405180910390a150565b6105b3610fae565b6001600160a01b03166105ce6003546001600160a01b031690565b6001600160a01b0316146106245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b61044f6110de565b6001546001600160a01b0316156106ab5760405162461bcd60e51b815260206004820152602a60248201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160448201527f4c52454144595f53455400000000000000000000000000000000000000000000606482015260840161043e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461075a5760405162461bcd60e51b815260206004820152602160248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f5200000000000000000000000000000000000000000000000000000000000000606482015260840161043e565b61079b848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061119b92505050565b50505050565b60065460009060ff1615156001146108215760405162461bcd60e51b815260206004820152603560248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a2063616e277460448201527f206469726563746c792073656e64204173736574730000000000000000000000606482015260840161043e565b507fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b610857610451565b156108a45760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161043e565b6001600160a01b0385166109205760405162461bcd60e51b815260206004820152602b60248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a20746f20636160448201527f6e2774206265207a65726f000000000000000000000000000000000000000000606482015260840161043e565b8261096d5760405162461bcd60e51b815260206004820152601160248201527f4d495353494e475f544f4b454e5f494453000000000000000000000000000000604482015260640161043e565b60055483106109be5760405162461bcd60e51b815260206004820152601660248201527f455843454544535f5452414e534645525f4c494d495400000000000000000000604482015260640161043e565b60008367ffffffffffffffff8111156109e757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a10578160200160208202803683370190505b506006805460ff19166001179055905060005b84811015610ca7576004546000906001600160a01b031663219cc8bc888885818110610a5f57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610a8491815260200190565b602060405180830381600087803b158015610a9e57600080fd5b505af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190611c22565b905080838381518110610af957634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600081604051602001610b1a91815260200190565b60408051601f198184030181529190526004549091506001600160a01b031663f242432a610b46610fae565b308b8b88818110610b6757634e487b7160e01b600052603260045260246000fd5b905060200201358a8a89818110610b8e57634e487b7160e01b600052603260045260246000fd5b9050602002013587604051602001610ba891815260200190565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610bd7959493929190611d65565b600060405180830381600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050507f5b60e6b7a1385a03cd29f6ac8c80abbd3fe29663ec7d8bbe63bb79a35c176da489898986818110610c4b57634e487b7160e01b600052603260045260246000fd5b90506020020135888887818110610c7257634e487b7160e01b600052603260045260246000fd5b9050602002013584604051610c8a9493929190611dff565b60405180910390a150508080610c9f90611f26565b915050610a23565b506006805460ff19169055604051610d079087908790879087908790610cd1908890602001611e37565b60408051601f1981840301815290829052610cf3969594939291602001611da8565b604051602081830303815290604052611229565b505050505050565b610d17610fae565b6001600160a01b0316610d326003546001600160a01b031690565b6001600160a01b031614610d885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60065460009060ff161515600114610e375760405162461bcd60e51b815260206004820152603560248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a2063616e277460448201527f206469726563746c792073656e64204173736574730000000000000000000000606482015260840161043e565b507ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b610e6b610fae565b6001600160a01b0316610e866003546001600160a01b031690565b6001600160a01b031614610edc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b6001600160a01b038116610f585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161043e565b610f618161107f565b50565b6002546000906001600160a01b0316331415610fa757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610470565b5033610470565b6000610fb8610f64565b905090565b610fc5610451565b6110115760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161043e565b600380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611062610fae565b6040516001600160a01b03909116815260200160405180910390a1565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6110e6610451565b156111335760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161043e565b600380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611062610fae565b60015482906001600160a01b038083169116146112205760405162461bcd60e51b815260206004820152602b60248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000606482015260840161043e565b61079b82611258565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036816040516105a09190611e7b565b6000806000808480602001905181019061127291906118d2565b93509350935093506000818060200190518101906112909190611b72565b905060005b84518110156115565760008282815181106112c057634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016112da91815260200190565b60408051601f1981840301815291905260045487519192506001600160a01b03169063f6c983fb9088908590811061132257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161134891815260200190565b60206040518083038186803b15801561136057600080fd5b505afa158015611374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113989190611c02565b156113fc576113f7878784815181106113c157634e487b7160e01b600052603260045260246000fd5b60200260200101518785815181106113e957634e487b7160e01b600052603260045260246000fd5b60200260200101518461155f565b6114b8565b60045486516001600160a01b039091169063731133e990899089908690811061143557634e487b7160e01b600052603260045260246000fd5b602002602001015188868151811061145d57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518563ffffffff1660e01b81526004016114859493929190611dff565b600060405180830381600087803b15801561149f57600080fd5b505af11580156114b3573d6000803e3d6000fd5b505050505b7f07c6d86eb9c47d0224ebbb590d5fbb1d9d0d7aca54f94611e5ed37a2c6ee20a7878784815181106114fa57634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061152257634e487b7160e01b600052603260045260246000fd5b60200260200101518460405161153b9493929190611dff565b60405180910390a1508061154e81611f26565b915050611295565b50505050505050565b600480546040517efdd58e0000000000000000000000000000000000000000000000000000000081523092810192909252602482018590526000916001600160a01b039091169062fdd58e9060440160206040518083038186803b1580156115c657600080fd5b505afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe9190611c22565b905082811061168e57600480546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163f242432a916116579130918a918a918a918a9101611d65565b600060405180830381600087803b15801561167157600080fd5b505af1158015611685573d6000803e3d6000fd5b505050506117b3565b801561171757600480546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163f242432a916116e49130918a918a9188918a9101611d65565b600060405180830381600087803b1580156116fe57600080fd5b505af1158015611712573d6000803e3d6000fd5b505050505b6004546001600160a01b0316634091461386866117348588611ee3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561179a57600080fd5b505af11580156117ae573d6000803e3d6000fd5b505050505b5050505050565b60008083601f8401126117cb578182fd5b50813567ffffffffffffffff8111156117e2578182fd5b60208301915083602080830285010111156117fc57600080fd5b9250929050565b600082601f830112611813578081fd5b8151602061182861182383611ebf565b611e8e565b8281528181019085830183850287018401881015611844578586fd5b855b8581101561186257815184529284019290840190600101611846565b5090979650505050505050565b60008083601f840112611880578182fd5b50813567ffffffffffffffff811115611897578182fd5b6020830191508360208285010111156117fc57600080fd5b6000602082840312156118c0578081fd5b81356118cb81611f8b565b9392505050565b600080600080608085870312156118e7578283fd5b84516118f281611f8b565b602086015190945067ffffffffffffffff8082111561190f578485fd5b61191b88838901611803565b94506040870151915080821115611930578384fd5b61193c88838901611803565b93506060870151915080821115611951578283fd5b818701915087601f830112611964578283fd5b81518181111561197657611976611f75565b6119896020601f19601f84011601611e8e565b915080825288602082850101111561199f578384fd5b6119b0816020840160208601611efa565b5094979396509194505050565b60008060008060008060008060a0898b0312156119d8578384fd5b88356119e381611f8b565b975060208901356119f381611f8b565b9650604089013567ffffffffffffffff80821115611a0f578586fd5b611a1b8c838d016117ba565b909850965060608b0135915080821115611a33578586fd5b611a3f8c838d016117ba565b909650945060808b0135915080821115611a57578384fd5b50611a648b828c0161186f565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215611a90578182fd5b8635611a9b81611f8b565b95506020870135611aab81611f8b565b94506040870135935060608701359250608087013567ffffffffffffffff811115611ad4578283fd5b611ae089828a0161186f565b979a9699509497509295939492505050565b600080600080600060608688031215611b09578081fd5b8535611b1481611f8b565b9450602086013567ffffffffffffffff80821115611b30578283fd5b611b3c89838a016117ba565b90965094506040880135915080821115611b54578283fd5b50611b61888289016117ba565b969995985093965092949392505050565b60006020808385031215611b84578182fd5b825167ffffffffffffffff811115611b9a578283fd5b8301601f81018513611baa578283fd5b8051611bb861182382611ebf565b8181528381019083850185840285018601891015611bd4578687fd5b8694505b83851015611bf6578051835260019490940193918501918501611bd8565b50979650505050505050565b600060208284031215611c13578081fd5b815180151581146118cb578182fd5b600060208284031215611c33578081fd5b5051919050565b600060208284031215611c4b578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146118cb578182fd5b600060208284031215611c8b578081fd5b5035919050565b60008060008060608587031215611ca7578182fd5b843593506020850135611cb981611f8b565b9250604085013567ffffffffffffffff811115611cd4578283fd5b611ce08782880161186f565b95989497509550505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611d1d578081fd5b6020830280836020870137939093016020019283525090919050565b60008151808452611d51816020860160208601611efa565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152611d9d60a0830184611d39565b979650505050505050565b60006001600160a01b038816825260806020830152611dcb608083018789611cec565b8281036040840152611dde818688611cec565b90508281036060840152611df28185611d39565b9998505050505050505050565b60006001600160a01b038616825284602083015283604083015260806060830152611e2d6080830184611d39565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611e6f57835183529284019291840191600101611e53565b50909695505050505050565b6000602082526118cb6020830184611d39565b604051601f8201601f1916810167ffffffffffffffff81118282101715611eb757611eb7611f75565b604052919050565b600067ffffffffffffffff821115611ed957611ed9611f75565b5060209081020190565b600082821015611ef557611ef5611f5f565b500390565b60005b83811015611f15578181015183820152602001611efd565b8381111561079b5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f5857611f58611f5f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f6157600080fdfea2646970667358221220eb9c42b37315e2bf8a0a47ee812e98ee5107842787123d3498c97e38ba9dc34064736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c80638da5cb5b116100cd578063ce1b815f11610081578063da74222811610066578063da742228146102f7578063f23a6e611461030a578063f2fde38b1461031d5761016c565b8063ce1b815f146102d3578063cf0927f5146102e45761016c565b8063ac0007de116100b2578063ac0007de14610265578063bc197c8114610278578063bd85e93b146102bc5761016c565b80638da5cb5b146102415780639a7c4b71146102525761016c565b8063715018a6116101245780637f1e9cb0116101095780637f1e9cb0146102135780638456cb5914610226578063888370941461022e5761016c565b8063715018a6146101f85780637a17feff146102005761016c565b8063450d11f011610155578063450d11f0146101a3578063572b6c05146101ce5780635c975abb146101f05761016c565b806301ffc9a7146101715780633f4ba83a14610199575b600080fd5b61018461017f366004611c3a565b610330565b60405190151581526020015b60405180910390f35b6101a16103c9565b005b6000546101b6906001600160a01b031681565b6040516001600160a01b039091168152602001610190565b6101846101dc3660046118af565b6002546001600160a01b0390811691161490565b610184610451565b6101a1610473565b6101a161020e366004611c7a565b6104f6565b6001546101b6906001600160a01b031681565b6101a16105ab565b6101a161023c3660046118af565b61062c565b6003546001600160a01b03166101b6565b6101a1610260366004611c92565b6106da565b6004546101b6906001600160a01b031681565b61028b6102863660046119bd565b6107a1565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610190565b6102c560055481565b604051908152602001610190565b6002546001600160a01b03166101b6565b6101a16102f2366004611af2565b61084f565b6101a16103053660046118af565b610d0f565b61028b610318366004611a78565b610db7565b6101a161032b3660046118af565b610e63565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103c357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6103d1610fae565b6001600160a01b03166103ec6003546001600160a01b031690565b6001600160a01b0316146104475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61044f610fbd565b565b60035474010000000000000000000000000000000000000000900460ff165b90565b61047b610fae565b6001600160a01b03166104966003546001600160a01b031690565b6001600160a01b0316146104ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b61044f600061107f565b6104fe610fae565b6001600160a01b03166105196003546001600160a01b031690565b6001600160a01b03161461056f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b60058190556040518181527f3fc6a03e501b3ca46f5b6c08064272abf4e2b0d2bbdeeaeba4e4a4f22c9e616d906020015b60405180910390a150565b6105b3610fae565b6001600160a01b03166105ce6003546001600160a01b031690565b6001600160a01b0316146106245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b61044f6110de565b6001546001600160a01b0316156106ab5760405162461bcd60e51b815260206004820152602a60248201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160448201527f4c52454144595f53455400000000000000000000000000000000000000000000606482015260840161043e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461075a5760405162461bcd60e51b815260206004820152602160248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f5200000000000000000000000000000000000000000000000000000000000000606482015260840161043e565b61079b848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061119b92505050565b50505050565b60065460009060ff1615156001146108215760405162461bcd60e51b815260206004820152603560248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a2063616e277460448201527f206469726563746c792073656e64204173736574730000000000000000000000606482015260840161043e565b507fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b610857610451565b156108a45760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161043e565b6001600160a01b0385166109205760405162461bcd60e51b815260206004820152602b60248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a20746f20636160448201527f6e2774206265207a65726f000000000000000000000000000000000000000000606482015260840161043e565b8261096d5760405162461bcd60e51b815260206004820152601160248201527f4d495353494e475f544f4b454e5f494453000000000000000000000000000000604482015260640161043e565b60055483106109be5760405162461bcd60e51b815260206004820152601660248201527f455843454544535f5452414e534645525f4c494d495400000000000000000000604482015260640161043e565b60008367ffffffffffffffff8111156109e757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a10578160200160208202803683370190505b506006805460ff19166001179055905060005b84811015610ca7576004546000906001600160a01b031663219cc8bc888885818110610a5f57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610a8491815260200190565b602060405180830381600087803b158015610a9e57600080fd5b505af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190611c22565b905080838381518110610af957634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600081604051602001610b1a91815260200190565b60408051601f198184030181529190526004549091506001600160a01b031663f242432a610b46610fae565b308b8b88818110610b6757634e487b7160e01b600052603260045260246000fd5b905060200201358a8a89818110610b8e57634e487b7160e01b600052603260045260246000fd5b9050602002013587604051602001610ba891815260200190565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610bd7959493929190611d65565b600060405180830381600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050507f5b60e6b7a1385a03cd29f6ac8c80abbd3fe29663ec7d8bbe63bb79a35c176da489898986818110610c4b57634e487b7160e01b600052603260045260246000fd5b90506020020135888887818110610c7257634e487b7160e01b600052603260045260246000fd5b9050602002013584604051610c8a9493929190611dff565b60405180910390a150508080610c9f90611f26565b915050610a23565b506006805460ff19169055604051610d079087908790879087908790610cd1908890602001611e37565b60408051601f1981840301815290829052610cf3969594939291602001611da8565b604051602081830303815290604052611229565b505050505050565b610d17610fae565b6001600160a01b0316610d326003546001600160a01b031690565b6001600160a01b031614610d885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60065460009060ff161515600114610e375760405162461bcd60e51b815260206004820152603560248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a2063616e277460448201527f206469726563746c792073656e64204173736574730000000000000000000000606482015260840161043e565b507ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b610e6b610fae565b6001600160a01b0316610e866003546001600160a01b031690565b6001600160a01b031614610edc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043e565b6001600160a01b038116610f585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161043e565b610f618161107f565b50565b6002546000906001600160a01b0316331415610fa757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610470565b5033610470565b6000610fb8610f64565b905090565b610fc5610451565b6110115760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161043e565b600380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611062610fae565b6040516001600160a01b03909116815260200160405180910390a1565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6110e6610451565b156111335760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161043e565b600380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611062610fae565b60015482906001600160a01b038083169116146112205760405162461bcd60e51b815260206004820152602b60248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000606482015260840161043e565b61079b82611258565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036816040516105a09190611e7b565b6000806000808480602001905181019061127291906118d2565b93509350935093506000818060200190518101906112909190611b72565b905060005b84518110156115565760008282815181106112c057634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016112da91815260200190565b60408051601f1981840301815291905260045487519192506001600160a01b03169063f6c983fb9088908590811061132257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161134891815260200190565b60206040518083038186803b15801561136057600080fd5b505afa158015611374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113989190611c02565b156113fc576113f7878784815181106113c157634e487b7160e01b600052603260045260246000fd5b60200260200101518785815181106113e957634e487b7160e01b600052603260045260246000fd5b60200260200101518461155f565b6114b8565b60045486516001600160a01b039091169063731133e990899089908690811061143557634e487b7160e01b600052603260045260246000fd5b602002602001015188868151811061145d57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518563ffffffff1660e01b81526004016114859493929190611dff565b600060405180830381600087803b15801561149f57600080fd5b505af11580156114b3573d6000803e3d6000fd5b505050505b7f07c6d86eb9c47d0224ebbb590d5fbb1d9d0d7aca54f94611e5ed37a2c6ee20a7878784815181106114fa57634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061152257634e487b7160e01b600052603260045260246000fd5b60200260200101518460405161153b9493929190611dff565b60405180910390a1508061154e81611f26565b915050611295565b50505050505050565b600480546040517efdd58e0000000000000000000000000000000000000000000000000000000081523092810192909252602482018590526000916001600160a01b039091169062fdd58e9060440160206040518083038186803b1580156115c657600080fd5b505afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe9190611c22565b905082811061168e57600480546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163f242432a916116579130918a918a918a918a9101611d65565b600060405180830381600087803b15801561167157600080fd5b505af1158015611685573d6000803e3d6000fd5b505050506117b3565b801561171757600480546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163f242432a916116e49130918a918a9188918a9101611d65565b600060405180830381600087803b1580156116fe57600080fd5b505af1158015611712573d6000803e3d6000fd5b505050505b6004546001600160a01b0316634091461386866117348588611ee3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561179a57600080fd5b505af11580156117ae573d6000803e3d6000fd5b505050505b5050505050565b60008083601f8401126117cb578182fd5b50813567ffffffffffffffff8111156117e2578182fd5b60208301915083602080830285010111156117fc57600080fd5b9250929050565b600082601f830112611813578081fd5b8151602061182861182383611ebf565b611e8e565b8281528181019085830183850287018401881015611844578586fd5b855b8581101561186257815184529284019290840190600101611846565b5090979650505050505050565b60008083601f840112611880578182fd5b50813567ffffffffffffffff811115611897578182fd5b6020830191508360208285010111156117fc57600080fd5b6000602082840312156118c0578081fd5b81356118cb81611f8b565b9392505050565b600080600080608085870312156118e7578283fd5b84516118f281611f8b565b602086015190945067ffffffffffffffff8082111561190f578485fd5b61191b88838901611803565b94506040870151915080821115611930578384fd5b61193c88838901611803565b93506060870151915080821115611951578283fd5b818701915087601f830112611964578283fd5b81518181111561197657611976611f75565b6119896020601f19601f84011601611e8e565b915080825288602082850101111561199f578384fd5b6119b0816020840160208601611efa565b5094979396509194505050565b60008060008060008060008060a0898b0312156119d8578384fd5b88356119e381611f8b565b975060208901356119f381611f8b565b9650604089013567ffffffffffffffff80821115611a0f578586fd5b611a1b8c838d016117ba565b909850965060608b0135915080821115611a33578586fd5b611a3f8c838d016117ba565b909650945060808b0135915080821115611a57578384fd5b50611a648b828c0161186f565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215611a90578182fd5b8635611a9b81611f8b565b95506020870135611aab81611f8b565b94506040870135935060608701359250608087013567ffffffffffffffff811115611ad4578283fd5b611ae089828a0161186f565b979a9699509497509295939492505050565b600080600080600060608688031215611b09578081fd5b8535611b1481611f8b565b9450602086013567ffffffffffffffff80821115611b30578283fd5b611b3c89838a016117ba565b90965094506040880135915080821115611b54578283fd5b50611b61888289016117ba565b969995985093965092949392505050565b60006020808385031215611b84578182fd5b825167ffffffffffffffff811115611b9a578283fd5b8301601f81018513611baa578283fd5b8051611bb861182382611ebf565b8181528381019083850185840285018601891015611bd4578687fd5b8694505b83851015611bf6578051835260019490940193918501918501611bd8565b50979650505050505050565b600060208284031215611c13578081fd5b815180151581146118cb578182fd5b600060208284031215611c33578081fd5b5051919050565b600060208284031215611c4b578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146118cb578182fd5b600060208284031215611c8b578081fd5b5035919050565b60008060008060608587031215611ca7578182fd5b843593506020850135611cb981611f8b565b9250604085013567ffffffffffffffff811115611cd4578283fd5b611ce08782880161186f565b95989497509550505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611d1d578081fd5b6020830280836020870137939093016020019283525090919050565b60008151808452611d51816020860160208601611efa565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152611d9d60a0830184611d39565b979650505050505050565b60006001600160a01b038816825260806020830152611dcb608083018789611cec565b8281036040840152611dde818688611cec565b90508281036060840152611df28185611d39565b9998505050505050505050565b60006001600160a01b038616825284602083015283604083015260806060830152611e2d6080830184611d39565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611e6f57835183529284019291840191600101611e53565b50909695505050505050565b6000602082526118cb6020830184611d39565b604051601f8201601f1916810167ffffffffffffffff81118282101715611eb757611eb7611f75565b604052919050565b600067ffffffffffffffff821115611ed957611ed9611f75565b5060209081020190565b600082821015611ef557611ef5611f5f565b500390565b60005b83811015611f15578181015183820152602001611efd565b8381111561079b5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f5857611f58611f5f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f6157600080fdfea2646970667358221220eb9c42b37315e2bf8a0a47ee812e98ee5107842787123d3498c97e38ba9dc34064736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token transfers across bridge"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers across bridge"
      }
    },
    "title": "ASSETERC1155 bridge on L2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12474,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol:PolygonAssetERC1155Tunnel",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12476,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol:PolygonAssetERC1155Tunnel",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 29686,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol:PolygonAssetERC1155Tunnel",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol:PolygonAssetERC1155Tunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 654,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol:PolygonAssetERC1155Tunnel",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 41389,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol:PolygonAssetERC1155Tunnel",
        "label": "childToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPolygonAssetERC1155)36515"
      },
      {
        "astId": 41392,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol:PolygonAssetERC1155Tunnel",
        "label": "maxTransferLimit",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 41395,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155Tunnel.sol:PolygonAssetERC1155Tunnel",
        "label": "fetchingAssets",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPolygonAssetERC1155)36515": {
        "encoding": "inplace",
        "label": "contract IPolygonAssetERC1155",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}