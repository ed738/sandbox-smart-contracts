{
  "address": "0xd16F5779103DFa0AA368a7a72Ca34306D5978A18",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "contract IMintableERC721",
          "name": "_rootAvatarToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMintableERC721",
          "name": "rootAvatarToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "minted",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AvatarReceivedFromL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMintableERC721",
          "name": "rootAvatarToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AvatarSentToL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveAvatarFromL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootAvatarToken",
      "outputs": [
        {
          "internalType": "contract IMintableERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "sendAvatarToL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMintableERC721",
          "name": "_rootAvatarToken",
          "type": "address"
        }
      ],
      "name": "setRootAvatarToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08fe9e240c241d036a29e9d2c21b9386b2a5ac595941a3de329c045a2154ab21",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xd16F5779103DFa0AA368a7a72Ca34306D5978A18",
    "transactionIndex": 25,
    "gasUsed": "2723882",
    "logsBloom": "0x
    "blockHash": "0xfe40b21b139fcef91f925db2d7e838a4994201f4a246eb92f1ac151724b45246",
    "transactionHash": "0x08fe9e240c241d036a29e9d2c21b9386b2a5ac595941a3de329c045a2154ab21",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 6739068,
        "transactionHash": "0x08fe9e240c241d036a29e9d2c21b9386b2a5ac595941a3de329c045a2154ab21",
        "address": "0xd16F5779103DFa0AA368a7a72Ca34306D5978A18",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0xfe40b21b139fcef91f925db2d7e838a4994201f4a246eb92f1ac151724b45246"
      }
    ],
    "blockNumber": 6739068,
    "cumulativeGasUsed": "10922298",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0x518666188037bfa3DEa885CcA3c324c16A79322f",
    "0x96E8789B195713B279c163847A7a0A107CDf6FCf"
  ],
  "numDeployments": 1,
  "solcInputHash": "6b48e6b588e999663b82a35ee494a1bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"contract IMintableERC721\",\"name\":\"_rootAvatarToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMintableERC721\",\"name\":\"rootAvatarToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AvatarReceivedFromL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMintableERC721\",\"name\":\"rootAvatarToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AvatarSentToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveAvatarFromL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootAvatarToken\",\"outputs\":[{\"internalType\":\"contract IMintableERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sendAvatarToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMintableERC721\",\"name\":\"_rootAvatarToken\",\"type\":\"address\"}],\"name\":\"setRootAvatarToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"on matic-pos terms a mix of RootChainManager + MintableERC721Predicate\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveAvatarFromL2(bytes)\":{\"details\":\"receive token from L2, event must be emitted by fxChildTunnel\",\"params\":{\"inputData\":\"an encoded prove that the token was locked on L2\"}},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendAvatarToL2(address,uint256)\":{\"details\":\"send token to L2, message is sent specifically to fxChildTunnelan event is emitted and detected by the matic POS bridge that calls the tunnel on L2\",\"params\":{\"to\":\"user that will receive the avatar on L2\",\"tokenId\":\"id of the token that will be send\"}},\"setChildTunnel(address)\":{\"details\":\"set fxChildTunnel if not set alreadywe cannot override setFxChildTunnel, we must wait for the latest matic-fx release\"},\"setRootAvatarToken(address)\":{\"details\":\"Change the address of the root token\",\"params\":{\"_rootAvatarToken\":\"the address of the avatar token contract\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Avatar Polygon matic-fx bridge on L1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol\":\"AvatarTunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"@maticnetwork/fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/@maticnetwork/pos-portal/root/RootToken/IMintableERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// import {IERC721} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\n\\npragma solidity 0.8.2;\\n\\ninterface IMintableERC721 {\\n    // is IERC721 {\\n\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing\\n     * @dev Should be callable only by MintableERC721Predicate\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom token is being minted\\n     * @param tokenId tokenId being minted\\n     */\\n    function mint(address user, uint256 tokenId) external;\\n\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing with metadata from L2\\n     * @dev Should be callable only by MintableERC721Predicate\\n     * Make sure minting is only done either by this function/ \\ud83d\\udc46\\n     * @param user user address for whom token is being minted\\n     * @param tokenId tokenId being minted\\n     * @param metaData Associated token metadata, to be decoded & set using `setTokenMetadata`\\n     *\\n     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must\\n     * implement this method\\n     */\\n    function mint(\\n        address user,\\n        uint256 tokenId,\\n        bytes calldata metaData\\n    ) external;\\n\\n    /**\\n     * @notice check if token already exists, return true if it does exist\\n     * @dev this check will be used by the predicate to determine if the token needs to be minted or transfered\\n     * @param tokenId tokenId being checked\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    // This one came form ERC721 and is used by the predicate!!!\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf55de53097913882caa72ed9d73bd32294354f7c87c69f05ae544c9d1bcbd9a8\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {FxBaseRootTunnel} from \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts-0.8/interfaces/IERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {ERC2771Handler} from \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport {IERC721MandatoryTokenReceiver} from \\\"../../../common/interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport {IMintableERC721} from \\\"../../../common/interfaces/@maticnetwork/pos-portal/root/RootToken/IMintableERC721.sol\\\";\\n\\n/// @title Avatar Polygon matic-fx bridge on L1\\n/// @dev on matic-pos terms a mix of RootChainManager + MintableERC721Predicate\\ncontract AvatarTunnel is FxBaseRootTunnel, ERC2771Handler, IERC721MandatoryTokenReceiver, Ownable {\\n    IMintableERC721 public rootAvatarToken;\\n\\n    event AvatarReceivedFromL2(\\n        IMintableERC721 rootAvatarToken,\\n        address indexed depositor,\\n        address indexed to,\\n        bool minted,\\n        uint256 id\\n    );\\n    event AvatarSentToL2(IMintableERC721 rootAvatarToken, address indexed depositor, address indexed to, uint256 id);\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot,\\n        IMintableERC721 _rootAvatarToken,\\n        address _trustedForwarder\\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n        rootAvatarToken = _rootAvatarToken;\\n    }\\n\\n    /**\\n     * @dev send token to L2, message is sent specifically to fxChildTunnel\\n     * @dev an event is emitted and detected by the matic POS bridge that calls the tunnel on L2\\n     * @param to user that will receive the avatar on L2\\n     * @param tokenId id of the token that will be send\\n     */\\n    function sendAvatarToL2(address to, uint256 tokenId) external {\\n        require(fxChildTunnel != address(0), \\\"AvatarTunnel: fxChildTunnel must be set\\\");\\n        require(to != address(0), \\\"AvatarTunnel: INVALID_USER\\\");\\n        // transfer from depositor to this contract\\n        rootAvatarToken.safeTransferFrom(_msgSender(), address(this), tokenId);\\n        _sendMessageToChild(abi.encode(_msgSender(), to, tokenId));\\n        emit AvatarSentToL2(rootAvatarToken, _msgSender(), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev receive token from L2, event must be emitted by fxChildTunnel\\n     * @param inputData an encoded prove that the token was locked on L2\\n     */\\n    function receiveAvatarFromL2(bytes memory inputData) external {\\n        require(fxChildTunnel != address(0), \\\"AvatarTunnel: fxChildTunnel must be set\\\");\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    function onERC721Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* tokenId */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC721BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata, /* ids */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC721MandatoryTokenReceiver).interfaceId;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @dev Change the address of the root token\\n    /// @param _rootAvatarToken the address of the avatar token contract\\n    function setRootAvatarToken(IMintableERC721 _rootAvatarToken) external onlyOwner {\\n        rootAvatarToken = _rootAvatarToken;\\n    }\\n\\n    /// @dev set fxChildTunnel if not set already\\n    /// @dev we cannot override setFxChildTunnel, we must wait for the latest matic-fx release\\n    function setChildTunnel(address _fxChildTunnel) external onlyOwner {\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /// @dev get a message from L2, aka transfer if locked or mint into L1\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        (address depositor, address to, uint256 tokenId) = abi.decode(message, (address, address, uint256));\\n        // Transfer or mint\\n        bool exist = rootAvatarToken.exists(tokenId);\\n        if (exist) {\\n            rootAvatarToken.safeTransferFrom(address(this), to, tokenId);\\n        } else {\\n            rootAvatarToken.mint(to, tokenId);\\n        }\\n        emit AvatarReceivedFromL2(rootAvatarToken, depositor, to, !exist, tokenId);\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x0af5a2113708f9d6d27efb5a39d08b6a9f9626b6df9f49d56be54010385697c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200302f3803806200302f83398101604081905262000034916200015b565b600180546001600160a01b038087166001600160a01b03199283161790925560008054928616929091169190911790556200007862000072620000bd565b620000da565b600480546001600160a01b0319166001600160a01b03831617905550600680546001600160a01b0319166001600160a01b039290921691909117905550620001db9050565b6000620000d46200012c60201b62000b4e1760201c565b90505b90565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6004546000906001600160a01b031633141562000153575060131936013560601c620000d7565b5033620000d7565b6000806000806080858703121562000171578384fd5b84516200017e81620001c2565b60208601519094506200019181620001c2565b6040860151909350620001a481620001c2565b6060860151909250620001b781620001c2565b939692955090935050565b6001600160a01b0381168114620001d857600080fd5b50565b612e4480620001eb6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80637b2ad9da116100d8578063ca02b2671161008c578063de9b771f11610066578063de9b771f146103a6578063f2fde38b146103b9578063f953cec7146103cc57610177565b8063ca02b2671461036f578063ce1b815f14610382578063da7422281461039357610177565b8063972c4928116100bd578063972c492814610336578063aea4e49e14610349578063c0857ba01461035c57610177565b80637b2ad9da1461031b5780638da5cb5b1461032e57610177565b8063413d4cad1161012f578063572b6c0511610114578063572b6c05146102ce578063607f2d42146102f0578063715018a61461031357610177565b8063413d4cad146102825780634b808c461461029557610177565b8063137f310211610160578063137f3102146101d9578063150b7a02146101ee5780634133dfd01461025757610177565b806301ffc9a71461017c5780630e387de6146101a4575b600080fd5b61018f61018a366004612986565b6103df565b60405190151581526020015b60405180910390f35b6101cb7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161019b565b6101ec6101e7366004612749565b6104c6565b005b6102266101fc366004612866565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161019b565b60065461026a906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b6101ec6102903660046128d7565b610569565b6102266102a33660046127a7565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61018f6102dc366004612749565b6004546001600160a01b0390811691161490565b61018f6102fe366004612922565b60036020526000908152604090205460ff1681565b6101ec610779565b6101ec6103293660046129c6565b6107f4565b61026a61088c565b60025461026a906001600160a01b031681565b6101ec610357366004612749565b61089c565b60015461026a906001600160a01b031681565b6101ec61037d366004612749565b61094a565b6004546001600160a01b031661026a565b6101ec6103a1366004612749565b6109b9565b60005461026a906001600160a01b031681565b6101ec6103c7366004612749565b610a57565b6101ec6103da3660046129c6565b610872565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061047257507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b806104be57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5e8bf64400000000000000000000000000000000000000000000000000000000145b90505b919050565b6104ce610b98565b6001600160a01b03166104df61088c565b6001600160a01b03161461053a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b03166105e75760405162461bcd60e51b815260206004820152602760248201527f41766174617254756e6e656c3a2066784368696c6454756e6e656c206d75737460448201527f20626520736574000000000000000000000000000000000000000000000000006064820152608401610531565b6001600160a01b03821661063d5760405162461bcd60e51b815260206004820152601a60248201527f41766174617254756e6e656c3a20494e56414c49445f555345520000000000006044820152606401610531565b6006546001600160a01b03166342842e0e610656610b98565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401600060405180830381600087803b1580156106bc57600080fd5b505af11580156106d0573d6000803e3d6000fd5b505050506107186106df610b98565b604080516001600160a01b0392831660208201529185169082015260608101839052608001604051602081830303815290604052610ba7565b816001600160a01b031661072a610b98565b600654604080516001600160a01b0392831681526020810186905292909116917fbf97cb7a465b71a56f97de3b42accb5ba95e9e89ea79fff2779d4a21f2846d10910160405180910390a35050565b610781610b98565b6001600160a01b031661079261088c565b6001600160a01b0316146107e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6107f26000610c2b565b565b6002546001600160a01b03166108725760405162461bcd60e51b815260206004820152602760248201527f41766174617254756e6e656c3a2066784368696c6454756e6e656c206d75737460448201527f20626520736574000000000000000000000000000000000000000000000000006064820152608401610531565b600061087d82610c8a565b905061088881610fd9565b5050565b6005546001600160a01b03165b90565b6002546001600160a01b03161561091b5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f534554000000000000000000000000000000000000000000006064820152608401610531565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610952610b98565b6001600160a01b031661096361088c565b6001600160a01b03161461091b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6109c1610b98565b6001600160a01b03166109d261088c565b6001600160a01b031614610a285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610a5f610b98565b6001600160a01b0316610a7061088c565b6001600160a01b031614610ac65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6001600160a01b038116610b425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610531565b610b4b81610c2b565b50565b6004546000906001600160a01b0316331415610b9157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610899565b5033610899565b6000610ba2610b4e565b905090565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610bf6929116908590600401612adf565b600060405180830381600087803b158015610c1057600080fd5b505af1158015610c24573d6000803e3d6000fd5b5050505050565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000610c9783611200565b90506000610ca48261125f565b90506000610cb183611296565b9050600081610cbf846112cd565b610cc8866114f3565b604051602001610cda93929190612ab2565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610d775760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f53534544000000000000000000000000000000000000000000000000000000006064820152608401610531565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610db78561151d565b90506000610dc482611683565b9050610dcf8161172f565b6002546001600160a01b03908116911614610e525760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c0000000000000000000000000000000000000000000000000000006064820152608401610531565b6000610e5d87611766565b9050610e7d610e6d846020015190565b87610e778a611790565b846117ba565b610eef5760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f4600000000000000000000000000000000000000000000000000000000006064820152608401610531565b610f1d85610efc89611ae1565b610f058a611b0b565b84610f0f8c611b35565b610f188d611b5f565b611b89565b506000610f2983611cd7565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610f5f610f5a836000611d21565b611d67565b14610fac5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606401610531565b6000610fb784611de2565b806020019051810190610fca9190612a3f565b9b9a5050505050505050505050565b600080600083806020019051810190610ff29190612765565b6006546040517f4f558e790000000000000000000000000000000000000000000000000000000081526004810183905293965091945092506000916001600160a01b0390911690634f558e799060240160206040518083038186803b15801561105a57600080fd5b505afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110929190612902565b90508015611124576006546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03858116602483015260448201859052909116906342842e0e90606401600060405180830381600087803b15801561110757600080fd5b505af115801561111b573d6000803e3d6000fd5b505050506111a4565b6006546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b15801561118b57600080fd5b505af115801561119f573d6000803e3d6000fd5b505050505b600654604080516001600160a01b03928316815283156020820152908101849052848216918616907f6ff37832c6d74cbda1ac4f1cb878051e3198b8a1b9976738e7bb3a52978f93ba9060600160405180910390a35050505050565b604080516020810190915260608152600061124a6112458460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611e0c565b60408051602081019091529081529392505050565b60606104be826000015160088151811061128957634e487b7160e01b600052603260045260246000fd5b6020026020010151611f3e565b60006104be82600001516002815181106112c057634e487b7160e01b600052603260045260246000fd5b6020026020010151611d67565b604080516020810190915260008152815160609190156104be576000806112f5600086611fe9565b60f81c9050600181148061130c57508060ff166003145b156113e8576001855160026113219190612cdd565b61132b9190612cfc565b67ffffffffffffffff81111561135157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561137b576020820181803683370190505b509250600061138b600187611fe9565b905080846000815181106113af57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192505061145a565b6002855160026113f89190612cdd565b6114029190612cfc565b67ffffffffffffffff81111561142857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611452576020820181803683370190505b509250600091505b60ff82165b83518110156114ea5761148961147860ff851683612cfc565b611483906002612b7b565b87611fe9565b8482815181106114a957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806114e281612d66565b91505061145f565b50505092915050565b60006104be82600001516009815181106112c057634e487b7160e01b600052603260045260246000fd5b61154160405180606001604052806060815260200160608152602001600081525090565b611569826000015160068151811061128957634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261159f81612086565b156115b4576115ad81611e0c565b825261166f565b602082015180516000906115ca90600190612cfc565b67ffffffffffffffff8111156115f057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561161a576020820181803683370190505b509050600080836021019150826020019050611638828285516120c0565b60408051808201825260008082526020918201528151808301909252845182528085019082015261166890611245565b8652505050505b611678836114f3565b604083015250919050565b6040805160808101825260009181018281526060808301939093528152602081019190915260006116df83600001516003815181106116d257634e487b7160e01b600052603260045260246000fd5b6020026020010151611e0c565b83604001518151811061170257634e487b7160e01b600052603260045260246000fd5b60200260200101519050604051806040016040528082815260200161172683611e0c565b90529392505050565b60006104be826020015160008151811061175957634e487b7160e01b600052603260045260246000fd5b602002602001015161213a565b60006104be82600001516005815181106112c057634e487b7160e01b600052603260045260246000fd5b60606104be826000015160078151811061128957634e487b7160e01b600052603260045260246000fd5b6000806117ee8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006117fb82611e0c565b90506060808560008061180d8b6112cd565b9050805160001415611829576000975050505050505050611ad9565b60005b8651811015611ad057815183111561184f57600098505050505050505050611ad9565b61187f87828151811061187257634e487b7160e01b600052603260045260246000fd5b6020026020010151612154565b9550858051906020012084146118a057600098505050505050505050611ad9565b6118c38782815181106116d257634e487b7160e01b600052603260045260246000fd5b94508451601114156119c2578151831415611933578c805190602001206119048660108151811061128957634e487b7160e01b600052603260045260246000fd5b80519060200120141561192257600198505050505050505050611ad9565b600098505050505050505050611ad9565b600082848151811061195557634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561197a5760009950505050505050505050611ad9565b6119ad868260ff16815181106119a057634e487b7160e01b600052603260045260246000fd5b60200260200101516121e3565b94506119ba600185612b7b565b935050611abe565b8451600214156119225760006119fc6119f58760008151811061128957634e487b7160e01b600052603260045260246000fd5b8486612211565b8351909150611a0b8286612b7b565b1415611a6e578d80519060200120611a3d8760018151811061128957634e487b7160e01b600052603260045260246000fd5b805190602001201415611a5c5760019950505050505050505050611ad9565b60009950505050505050505050611ad9565b80611a855760009950505050505050505050611ad9565b611a8f8185612b7b565b9350611ab5866001815181106119a057634e487b7160e01b600052603260045260246000fd5b9450611abe9050565b80611ac881612d66565b91505061182c565b50505050505050505b949350505050565b60006104be82600001516003815181106112c057634e487b7160e01b600052603260045260246000fd5b60006104be82600001516004815181106112c057634e487b7160e01b600052603260045260246000fd5b60006104be82600001516000815181106112c057634e487b7160e01b600052603260045260246000fd5b60606104be826000015160018151811061128957634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b158015611bef57600080fd5b505afa158015611c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c27919061293a565b5093505092509250611c7e828b611c3e9190612cfc565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612376565b611cca5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606401610531565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611d1984602001516001815181106116d257634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611d5757634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611d7c57508151602110155b611d8557600080fd5b6000611d9483602001516124ec565b90506000818460000151611da89190612cfc565b9050600080838660200151611dbd9190612b7b565b9050805191506020831015611dd957826020036101000a820491505b50949350505050565b60606104be826020015160028151811061128957634e487b7160e01b600052603260045260246000fd5b6060611e1782612086565b611e2057600080fd5b6000611e2b83612571565b905060008167ffffffffffffffff811115611e5657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e9b57816020015b6040805180820190915260008082526020820152815260200190600190039081611e745790505b5090506000611ead85602001516124ec565b8560200151611ebc9190612b7b565b90506000805b84811015611f3357611ed3836125f4565b9150604051806040016040528083815260200184815250848281518110611f0a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611f1f8284612b7b565b925080611f2b81612d66565b915050611ec2565b509195945050505050565b8051606090611f4c57600080fd5b6000611f5b83602001516124ec565b90506000818460000151611f6f9190612cfc565b905060008167ffffffffffffffff811115611f9a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611fc4576020820181803683370190505b5090506000816020019050611dd9848760200151611fe29190612b7b565b82856126b6565b6000611ff6600284612d81565b1561203e57601082612009600286612b93565b8151811061202757634e487b7160e01b600052603260045260246000fd5b0160200151612039919060f81c612d95565b61207c565b60108261204c600286612b93565b8151811061206a57634e487b7160e01b600052603260045260246000fd5b016020015161207c919060f81c612ba7565b60f81b9392505050565b8051600090612097575060006104c1565b6020820151805160001a9060c08210156120b6576000925050506104c1565b5060019392505050565b806120ca57612135565b6020811061210257825182526120e1602084612b7b565b92506120ee602083612b7b565b91506120fb602082612cfc565b90506120ca565b60006001612111836020612cfc565b61211d90610100612c0f565b6121279190612cfc565b845184518216911916178352505b505050565b805160009060151461214b57600080fd5b6104be82611d67565b60606000826000015167ffffffffffffffff81111561218357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121ad576020820181803683370190505b5090508051600014156121c15790506104c1565b60008160200190506121dc84602001518286600001516126b6565b5092915050565b80516000906021146121f457600080fd5b600080836020015160016122089190612b7b565b51949350505050565b6000808061221e866112cd565b90506000815167ffffffffffffffff81111561224a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612274576020820181803683370190505b509050845b82516122859087612b7b565b8110156123445760008782815181106122ae57634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836122e38985612cfc565b8151811061230157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050808061233c90612d66565b915050612279565b508080519060200120828051906020012014156123645781519250612369565b600092505b50909150505b9392505050565b6000602082516123869190612d81565b156123d35760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e6774680000000000000000000000006044820152606401610531565b6000602083516123e39190612b93565b90506123f0816002612c0f565b851061243e5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f2062696700000000000000000000006044820152606401610531565b60008660205b855181116124de5785810151925061245d600289612d81565b6124925760408051602081018490529081018490526060016040516020818303038152906040528051906020012091506124bf565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6124ca600289612b93565b97506124d7602082612b7b565b9050612444565b509094149695505050505050565b8051600090811a60808110156125065760009150506104c1565b60b8811080612521575060c08110801590612521575060f881105b156125305760019150506104c1565b60c081101561256557612545600160b8612d13565b6125529060ff1682612cfc565b61255d906001612b7b565b9150506104c1565b612545600160f8612d13565b8051600090612582575060006104c1565b60008061259284602001516124ec565b84602001516125a19190612b7b565b90506000846000015185602001516125b99190612b7b565b90505b808210156125eb576125cd826125f4565b6125d79083612b7b565b9150826125e381612d66565b9350506125bc565b50909392505050565b80516000908190811a608081101561260f57600191506121dc565b60b881101561263557612623608082612cfc565b61262e906001612b7b565b91506121dc565b60c08110156126625760b78103600185019450806020036101000a855104600182018101935050506121dc565b60f88110156126765761262360c082612cfc565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b806126c057612135565b602081106126f857825182526126d7602084612b7b565b92506126e4602083612b7b565b91506126f1602082612cfc565b90506126c0565b8061210257612135565b60008083601f840112612713578182fd5b50813567ffffffffffffffff81111561272a578182fd5b60208301915083602082850101111561274257600080fd5b9250929050565b60006020828403121561275a578081fd5b813561236f81612df9565b600080600060608486031215612779578182fd5b835161278481612df9565b602085015190935061279581612df9565b80925050604084015190509250925092565b600080600080600080608087890312156127bf578182fd5b86356127ca81612df9565b955060208701356127da81612df9565b9450604087013567ffffffffffffffff808211156127f6578384fd5b818901915089601f830112612809578384fd5b813581811115612817578485fd5b8a6020808302850101111561282a578485fd5b602083019650809550506060890135915080821115612847578384fd5b5061285489828a01612702565b979a9699509497509295939492505050565b60008060008060006080868803121561287d578081fd5b853561288881612df9565b9450602086013561289881612df9565b935060408601359250606086013567ffffffffffffffff8111156128ba578182fd5b6128c688828901612702565b969995985093965092949392505050565b600080604083850312156128e9578182fd5b82356128f481612df9565b946020939093013593505050565b600060208284031215612913578081fd5b8151801515811461236f578182fd5b600060208284031215612933578081fd5b5035919050565b600080600080600060a08688031215612951578081fd5b85519450602086015193506040860151925060608601519150608086015161297881612df9565b809150509295509295909350565b600060208284031215612997578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461236f578182fd5b6000602082840312156129d7578081fd5b813567ffffffffffffffff8111156129ed578182fd5b8201601f810184136129fd578182fd5b8035612a10612a0b82612b53565b612b22565b818152856020838501011115612a24578384fd5b81602084016020830137908101602001929092525092915050565b600060208284031215612a50578081fd5b815167ffffffffffffffff811115612a66578182fd5b8201601f81018413612a76578182fd5b8051612a84612a0b82612b53565b818152856020838501011115612a98578384fd5b612aa9826020830160208601612d36565b95945050505050565b60008482528351612aca816020850160208801612d36565b60209201918201929092526040019392505050565b60006001600160a01b0384168252604060208301528251806040840152612b0d816060850160208701612d36565b601f01601f1916919091016060019392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b4b57612b4b612de3565b604052919050565b600067ffffffffffffffff821115612b6d57612b6d612de3565b50601f01601f191660200190565b60008219821115612b8e57612b8e612db7565b500190565b600082612ba257612ba2612dcd565b500490565b600060ff831680612bba57612bba612dcd565b8060ff84160491505092915050565b80825b6001808611612bdb5750612c06565b818704821115612bed57612bed612db7565b80861615612bfa57918102915b9490941c938002612bcc565b94509492505050565b600061236f6000198484600082612c285750600161236f565b81612c355750600061236f565b8160018114612c4b5760028114612c5557612c82565b600191505061236f565b60ff841115612c6657612c66612db7565b6001841b915084821115612c7c57612c7c612db7565b5061236f565b5060208310610133831016604e8410600b8410161715612cb5575081810a83811115612cb057612cb0612db7565b61236f565b612cc28484846001612bc9565b808604821115612cd457612cd4612db7565b02949350505050565b6000816000190483118215151615612cf757612cf7612db7565b500290565b600082821015612d0e57612d0e612db7565b500390565b600060ff821660ff841680821015612d2d57612d2d612db7565b90039392505050565b60005b83811015612d51578181015183820152602001612d39565b83811115612d60576000848401525b50505050565b6000600019821415612d7a57612d7a612db7565b5060010190565b600082612d9057612d90612dcd565b500690565b600060ff831680612da857612da8612dcd565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b4b57600080fdfea26469706673582212200f0824ca63f089e6bddf1eb1afff7d8670c1056fd46a13ff09ca7f3ac156385064736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80637b2ad9da116100d8578063ca02b2671161008c578063de9b771f11610066578063de9b771f146103a6578063f2fde38b146103b9578063f953cec7146103cc57610177565b8063ca02b2671461036f578063ce1b815f14610382578063da7422281461039357610177565b8063972c4928116100bd578063972c492814610336578063aea4e49e14610349578063c0857ba01461035c57610177565b80637b2ad9da1461031b5780638da5cb5b1461032e57610177565b8063413d4cad1161012f578063572b6c0511610114578063572b6c05146102ce578063607f2d42146102f0578063715018a61461031357610177565b8063413d4cad146102825780634b808c461461029557610177565b8063137f310211610160578063137f3102146101d9578063150b7a02146101ee5780634133dfd01461025757610177565b806301ffc9a71461017c5780630e387de6146101a4575b600080fd5b61018f61018a366004612986565b6103df565b60405190151581526020015b60405180910390f35b6101cb7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161019b565b6101ec6101e7366004612749565b6104c6565b005b6102266101fc366004612866565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161019b565b60065461026a906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b6101ec6102903660046128d7565b610569565b6102266102a33660046127a7565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61018f6102dc366004612749565b6004546001600160a01b0390811691161490565b61018f6102fe366004612922565b60036020526000908152604090205460ff1681565b6101ec610779565b6101ec6103293660046129c6565b6107f4565b61026a61088c565b60025461026a906001600160a01b031681565b6101ec610357366004612749565b61089c565b60015461026a906001600160a01b031681565b6101ec61037d366004612749565b61094a565b6004546001600160a01b031661026a565b6101ec6103a1366004612749565b6109b9565b60005461026a906001600160a01b031681565b6101ec6103c7366004612749565b610a57565b6101ec6103da3660046129c6565b610872565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061047257507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b806104be57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5e8bf64400000000000000000000000000000000000000000000000000000000145b90505b919050565b6104ce610b98565b6001600160a01b03166104df61088c565b6001600160a01b03161461053a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b03166105e75760405162461bcd60e51b815260206004820152602760248201527f41766174617254756e6e656c3a2066784368696c6454756e6e656c206d75737460448201527f20626520736574000000000000000000000000000000000000000000000000006064820152608401610531565b6001600160a01b03821661063d5760405162461bcd60e51b815260206004820152601a60248201527f41766174617254756e6e656c3a20494e56414c49445f555345520000000000006044820152606401610531565b6006546001600160a01b03166342842e0e610656610b98565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401600060405180830381600087803b1580156106bc57600080fd5b505af11580156106d0573d6000803e3d6000fd5b505050506107186106df610b98565b604080516001600160a01b0392831660208201529185169082015260608101839052608001604051602081830303815290604052610ba7565b816001600160a01b031661072a610b98565b600654604080516001600160a01b0392831681526020810186905292909116917fbf97cb7a465b71a56f97de3b42accb5ba95e9e89ea79fff2779d4a21f2846d10910160405180910390a35050565b610781610b98565b6001600160a01b031661079261088c565b6001600160a01b0316146107e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6107f26000610c2b565b565b6002546001600160a01b03166108725760405162461bcd60e51b815260206004820152602760248201527f41766174617254756e6e656c3a2066784368696c6454756e6e656c206d75737460448201527f20626520736574000000000000000000000000000000000000000000000000006064820152608401610531565b600061087d82610c8a565b905061088881610fd9565b5050565b6005546001600160a01b03165b90565b6002546001600160a01b03161561091b5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f534554000000000000000000000000000000000000000000006064820152608401610531565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610952610b98565b6001600160a01b031661096361088c565b6001600160a01b03161461091b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6109c1610b98565b6001600160a01b03166109d261088c565b6001600160a01b031614610a285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610a5f610b98565b6001600160a01b0316610a7061088c565b6001600160a01b031614610ac65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6001600160a01b038116610b425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610531565b610b4b81610c2b565b50565b6004546000906001600160a01b0316331415610b9157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610899565b5033610899565b6000610ba2610b4e565b905090565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610bf6929116908590600401612adf565b600060405180830381600087803b158015610c1057600080fd5b505af1158015610c24573d6000803e3d6000fd5b5050505050565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000610c9783611200565b90506000610ca48261125f565b90506000610cb183611296565b9050600081610cbf846112cd565b610cc8866114f3565b604051602001610cda93929190612ab2565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610d775760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f53534544000000000000000000000000000000000000000000000000000000006064820152608401610531565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610db78561151d565b90506000610dc482611683565b9050610dcf8161172f565b6002546001600160a01b03908116911614610e525760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c0000000000000000000000000000000000000000000000000000006064820152608401610531565b6000610e5d87611766565b9050610e7d610e6d846020015190565b87610e778a611790565b846117ba565b610eef5760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f4600000000000000000000000000000000000000000000000000000000006064820152608401610531565b610f1d85610efc89611ae1565b610f058a611b0b565b84610f0f8c611b35565b610f188d611b5f565b611b89565b506000610f2983611cd7565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610f5f610f5a836000611d21565b611d67565b14610fac5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606401610531565b6000610fb784611de2565b806020019051810190610fca9190612a3f565b9b9a5050505050505050505050565b600080600083806020019051810190610ff29190612765565b6006546040517f4f558e790000000000000000000000000000000000000000000000000000000081526004810183905293965091945092506000916001600160a01b0390911690634f558e799060240160206040518083038186803b15801561105a57600080fd5b505afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110929190612902565b90508015611124576006546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03858116602483015260448201859052909116906342842e0e90606401600060405180830381600087803b15801561110757600080fd5b505af115801561111b573d6000803e3d6000fd5b505050506111a4565b6006546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b15801561118b57600080fd5b505af115801561119f573d6000803e3d6000fd5b505050505b600654604080516001600160a01b03928316815283156020820152908101849052848216918616907f6ff37832c6d74cbda1ac4f1cb878051e3198b8a1b9976738e7bb3a52978f93ba9060600160405180910390a35050505050565b604080516020810190915260608152600061124a6112458460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611e0c565b60408051602081019091529081529392505050565b60606104be826000015160088151811061128957634e487b7160e01b600052603260045260246000fd5b6020026020010151611f3e565b60006104be82600001516002815181106112c057634e487b7160e01b600052603260045260246000fd5b6020026020010151611d67565b604080516020810190915260008152815160609190156104be576000806112f5600086611fe9565b60f81c9050600181148061130c57508060ff166003145b156113e8576001855160026113219190612cdd565b61132b9190612cfc565b67ffffffffffffffff81111561135157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561137b576020820181803683370190505b509250600061138b600187611fe9565b905080846000815181106113af57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192505061145a565b6002855160026113f89190612cdd565b6114029190612cfc565b67ffffffffffffffff81111561142857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611452576020820181803683370190505b509250600091505b60ff82165b83518110156114ea5761148961147860ff851683612cfc565b611483906002612b7b565b87611fe9565b8482815181106114a957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806114e281612d66565b91505061145f565b50505092915050565b60006104be82600001516009815181106112c057634e487b7160e01b600052603260045260246000fd5b61154160405180606001604052806060815260200160608152602001600081525090565b611569826000015160068151811061128957634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261159f81612086565b156115b4576115ad81611e0c565b825261166f565b602082015180516000906115ca90600190612cfc565b67ffffffffffffffff8111156115f057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561161a576020820181803683370190505b509050600080836021019150826020019050611638828285516120c0565b60408051808201825260008082526020918201528151808301909252845182528085019082015261166890611245565b8652505050505b611678836114f3565b604083015250919050565b6040805160808101825260009181018281526060808301939093528152602081019190915260006116df83600001516003815181106116d257634e487b7160e01b600052603260045260246000fd5b6020026020010151611e0c565b83604001518151811061170257634e487b7160e01b600052603260045260246000fd5b60200260200101519050604051806040016040528082815260200161172683611e0c565b90529392505050565b60006104be826020015160008151811061175957634e487b7160e01b600052603260045260246000fd5b602002602001015161213a565b60006104be82600001516005815181106112c057634e487b7160e01b600052603260045260246000fd5b60606104be826000015160078151811061128957634e487b7160e01b600052603260045260246000fd5b6000806117ee8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006117fb82611e0c565b90506060808560008061180d8b6112cd565b9050805160001415611829576000975050505050505050611ad9565b60005b8651811015611ad057815183111561184f57600098505050505050505050611ad9565b61187f87828151811061187257634e487b7160e01b600052603260045260246000fd5b6020026020010151612154565b9550858051906020012084146118a057600098505050505050505050611ad9565b6118c38782815181106116d257634e487b7160e01b600052603260045260246000fd5b94508451601114156119c2578151831415611933578c805190602001206119048660108151811061128957634e487b7160e01b600052603260045260246000fd5b80519060200120141561192257600198505050505050505050611ad9565b600098505050505050505050611ad9565b600082848151811061195557634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561197a5760009950505050505050505050611ad9565b6119ad868260ff16815181106119a057634e487b7160e01b600052603260045260246000fd5b60200260200101516121e3565b94506119ba600185612b7b565b935050611abe565b8451600214156119225760006119fc6119f58760008151811061128957634e487b7160e01b600052603260045260246000fd5b8486612211565b8351909150611a0b8286612b7b565b1415611a6e578d80519060200120611a3d8760018151811061128957634e487b7160e01b600052603260045260246000fd5b805190602001201415611a5c5760019950505050505050505050611ad9565b60009950505050505050505050611ad9565b80611a855760009950505050505050505050611ad9565b611a8f8185612b7b565b9350611ab5866001815181106119a057634e487b7160e01b600052603260045260246000fd5b9450611abe9050565b80611ac881612d66565b91505061182c565b50505050505050505b949350505050565b60006104be82600001516003815181106112c057634e487b7160e01b600052603260045260246000fd5b60006104be82600001516004815181106112c057634e487b7160e01b600052603260045260246000fd5b60006104be82600001516000815181106112c057634e487b7160e01b600052603260045260246000fd5b60606104be826000015160018151811061128957634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b158015611bef57600080fd5b505afa158015611c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c27919061293a565b5093505092509250611c7e828b611c3e9190612cfc565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612376565b611cca5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606401610531565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611d1984602001516001815181106116d257634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611d5757634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611d7c57508151602110155b611d8557600080fd5b6000611d9483602001516124ec565b90506000818460000151611da89190612cfc565b9050600080838660200151611dbd9190612b7b565b9050805191506020831015611dd957826020036101000a820491505b50949350505050565b60606104be826020015160028151811061128957634e487b7160e01b600052603260045260246000fd5b6060611e1782612086565b611e2057600080fd5b6000611e2b83612571565b905060008167ffffffffffffffff811115611e5657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e9b57816020015b6040805180820190915260008082526020820152815260200190600190039081611e745790505b5090506000611ead85602001516124ec565b8560200151611ebc9190612b7b565b90506000805b84811015611f3357611ed3836125f4565b9150604051806040016040528083815260200184815250848281518110611f0a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611f1f8284612b7b565b925080611f2b81612d66565b915050611ec2565b509195945050505050565b8051606090611f4c57600080fd5b6000611f5b83602001516124ec565b90506000818460000151611f6f9190612cfc565b905060008167ffffffffffffffff811115611f9a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611fc4576020820181803683370190505b5090506000816020019050611dd9848760200151611fe29190612b7b565b82856126b6565b6000611ff6600284612d81565b1561203e57601082612009600286612b93565b8151811061202757634e487b7160e01b600052603260045260246000fd5b0160200151612039919060f81c612d95565b61207c565b60108261204c600286612b93565b8151811061206a57634e487b7160e01b600052603260045260246000fd5b016020015161207c919060f81c612ba7565b60f81b9392505050565b8051600090612097575060006104c1565b6020820151805160001a9060c08210156120b6576000925050506104c1565b5060019392505050565b806120ca57612135565b6020811061210257825182526120e1602084612b7b565b92506120ee602083612b7b565b91506120fb602082612cfc565b90506120ca565b60006001612111836020612cfc565b61211d90610100612c0f565b6121279190612cfc565b845184518216911916178352505b505050565b805160009060151461214b57600080fd5b6104be82611d67565b60606000826000015167ffffffffffffffff81111561218357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121ad576020820181803683370190505b5090508051600014156121c15790506104c1565b60008160200190506121dc84602001518286600001516126b6565b5092915050565b80516000906021146121f457600080fd5b600080836020015160016122089190612b7b565b51949350505050565b6000808061221e866112cd565b90506000815167ffffffffffffffff81111561224a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612274576020820181803683370190505b509050845b82516122859087612b7b565b8110156123445760008782815181106122ae57634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836122e38985612cfc565b8151811061230157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050808061233c90612d66565b915050612279565b508080519060200120828051906020012014156123645781519250612369565b600092505b50909150505b9392505050565b6000602082516123869190612d81565b156123d35760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e6774680000000000000000000000006044820152606401610531565b6000602083516123e39190612b93565b90506123f0816002612c0f565b851061243e5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f2062696700000000000000000000006044820152606401610531565b60008660205b855181116124de5785810151925061245d600289612d81565b6124925760408051602081018490529081018490526060016040516020818303038152906040528051906020012091506124bf565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6124ca600289612b93565b97506124d7602082612b7b565b9050612444565b509094149695505050505050565b8051600090811a60808110156125065760009150506104c1565b60b8811080612521575060c08110801590612521575060f881105b156125305760019150506104c1565b60c081101561256557612545600160b8612d13565b6125529060ff1682612cfc565b61255d906001612b7b565b9150506104c1565b612545600160f8612d13565b8051600090612582575060006104c1565b60008061259284602001516124ec565b84602001516125a19190612b7b565b90506000846000015185602001516125b99190612b7b565b90505b808210156125eb576125cd826125f4565b6125d79083612b7b565b9150826125e381612d66565b9350506125bc565b50909392505050565b80516000908190811a608081101561260f57600191506121dc565b60b881101561263557612623608082612cfc565b61262e906001612b7b565b91506121dc565b60c08110156126625760b78103600185019450806020036101000a855104600182018101935050506121dc565b60f88110156126765761262360c082612cfc565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b806126c057612135565b602081106126f857825182526126d7602084612b7b565b92506126e4602083612b7b565b91506126f1602082612cfc565b90506126c0565b8061210257612135565b60008083601f840112612713578182fd5b50813567ffffffffffffffff81111561272a578182fd5b60208301915083602082850101111561274257600080fd5b9250929050565b60006020828403121561275a578081fd5b813561236f81612df9565b600080600060608486031215612779578182fd5b835161278481612df9565b602085015190935061279581612df9565b80925050604084015190509250925092565b600080600080600080608087890312156127bf578182fd5b86356127ca81612df9565b955060208701356127da81612df9565b9450604087013567ffffffffffffffff808211156127f6578384fd5b818901915089601f830112612809578384fd5b813581811115612817578485fd5b8a6020808302850101111561282a578485fd5b602083019650809550506060890135915080821115612847578384fd5b5061285489828a01612702565b979a9699509497509295939492505050565b60008060008060006080868803121561287d578081fd5b853561288881612df9565b9450602086013561289881612df9565b935060408601359250606086013567ffffffffffffffff8111156128ba578182fd5b6128c688828901612702565b969995985093965092949392505050565b600080604083850312156128e9578182fd5b82356128f481612df9565b946020939093013593505050565b600060208284031215612913578081fd5b8151801515811461236f578182fd5b600060208284031215612933578081fd5b5035919050565b600080600080600060a08688031215612951578081fd5b85519450602086015193506040860151925060608601519150608086015161297881612df9565b809150509295509295909350565b600060208284031215612997578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461236f578182fd5b6000602082840312156129d7578081fd5b813567ffffffffffffffff8111156129ed578182fd5b8201601f810184136129fd578182fd5b8035612a10612a0b82612b53565b612b22565b818152856020838501011115612a24578384fd5b81602084016020830137908101602001929092525092915050565b600060208284031215612a50578081fd5b815167ffffffffffffffff811115612a66578182fd5b8201601f81018413612a76578182fd5b8051612a84612a0b82612b53565b818152856020838501011115612a98578384fd5b612aa9826020830160208601612d36565b95945050505050565b60008482528351612aca816020850160208801612d36565b60209201918201929092526040019392505050565b60006001600160a01b0384168252604060208301528251806040840152612b0d816060850160208701612d36565b601f01601f1916919091016060019392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b4b57612b4b612de3565b604052919050565b600067ffffffffffffffff821115612b6d57612b6d612de3565b50601f01601f191660200190565b60008219821115612b8e57612b8e612db7565b500190565b600082612ba257612ba2612dcd565b500490565b600060ff831680612bba57612bba612dcd565b8060ff84160491505092915050565b80825b6001808611612bdb5750612c06565b818704821115612bed57612bed612db7565b80861615612bfa57918102915b9490941c938002612bcc565b94509492505050565b600061236f6000198484600082612c285750600161236f565b81612c355750600061236f565b8160018114612c4b5760028114612c5557612c82565b600191505061236f565b60ff841115612c6657612c66612db7565b6001841b915084821115612c7c57612c7c612db7565b5061236f565b5060208310610133831016604e8410600b8410161715612cb5575081810a83811115612cb057612cb0612db7565b61236f565b612cc28484846001612bc9565b808604821115612cd457612cd4612db7565b02949350505050565b6000816000190483118215151615612cf757612cf7612db7565b500290565b600082821015612d0e57612d0e612db7565b500390565b600060ff821660ff841680821015612d2d57612d2d612db7565b90039392505050565b60005b83811015612d51578181015183820152602001612d39565b83811115612d60576000848401525b50505050565b6000600019821415612d7a57612d7a612db7565b5060010190565b600082612d9057612d90612dcd565b500690565b600060ff831680612da857612da8612dcd565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b4b57600080fdfea26469706673582212200f0824ca63f089e6bddf1eb1afff7d8670c1056fd46a13ff09ca7f3ac156385064736f6c63430008020033",
  "devdoc": {
    "details": "on matic-pos terms a mix of RootChainManager + MintableERC721Predicate",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveAvatarFromL2(bytes)": {
        "details": "receive token from L2, event must be emitted by fxChildTunnel",
        "params": {
          "inputData": "an encoded prove that the token was locked on L2"
        }
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendAvatarToL2(address,uint256)": {
        "details": "send token to L2, message is sent specifically to fxChildTunnelan event is emitted and detected by the matic POS bridge that calls the tunnel on L2",
        "params": {
          "to": "user that will receive the avatar on L2",
          "tokenId": "id of the token that will be send"
        }
      },
      "setChildTunnel(address)": {
        "details": "set fxChildTunnel if not set alreadywe cannot override setFxChildTunnel, we must wait for the latest matic-fx release"
      },
      "setRootAvatarToken(address)": {
        "details": "Change the address of the root token",
        "params": {
          "_rootAvatarToken": "the address of the avatar token contract"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Avatar Polygon matic-fx bridge on L1",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2087,
        "contract": "src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol:AvatarTunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)2037"
      },
      {
        "astId": 2090,
        "contract": "src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol:AvatarTunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)2055"
      },
      {
        "astId": 2092,
        "contract": "src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol:AvatarTunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2096,
        "contract": "src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol:AvatarTunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 25110,
        "contract": "src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol:AvatarTunnel",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2778,
        "contract": "src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol:AvatarTunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 39097,
        "contract": "src/solc_0.8/polygon/root/avatar/AvatarTunnel.sol:AvatarTunnel",
        "label": "rootAvatarToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMintableERC721)28229"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)2055": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2037": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableERC721)28229": {
        "encoding": "inplace",
        "label": "contract IMintableERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}