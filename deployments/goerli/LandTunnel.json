{
  "address": "0xFD13a9C9486D82D067e87f58C659C36B73A4867b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuadToL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40710ad26d1b1e83676b7804b26dc20dc91bbf6c447c4a657babe938dde6c87c",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xFD13a9C9486D82D067e87f58C659C36B73A4867b",
    "transactionIndex": 39,
    "gasUsed": "2782267",
    "logsBloom": "0x
    "blockHash": "0xff45fddc2a7765f4d7e1ee2895111e8bc490bc2416923e1fba0d5d7e078b929b",
    "transactionHash": "0x40710ad26d1b1e83676b7804b26dc20dc91bbf6c447c4a657babe938dde6c87c",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 6263465,
        "transactionHash": "0x40710ad26d1b1e83676b7804b26dc20dc91bbf6c447c4a657babe938dde6c87c",
        "address": "0xFD13a9C9486D82D067e87f58C659C36B73A4867b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0xff45fddc2a7765f4d7e1ee2895111e8bc490bc2416923e1fba0d5d7e078b929b"
      }
    ],
    "blockNumber": 6263465,
    "cumulativeGasUsed": "9626765",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0x85F817921665fF27b5F3265b3B0b1B19402ed270",
    "0x96E8789B195713B279c163847A7a0A107CDf6FCf"
  ],
  "solcInputHash": "5ed8b919e665608ed766d8042231c08f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuadToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/root/land/LandTunnel.sol\":\"LandTunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface LandToken {\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x981419231715d0c076889d219f4b0b27870ed17718f3be8c489b2634cb5b9db6\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/root/land/LandTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport \\\"../../../common/interfaces/ILandToken.sol\\\";\\nimport \\\"../../../common/interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\n\\n// @todo - natspec comments\\n\\ncontract LandTunnel is FxBaseRootTunnel, IERC721MandatoryTokenReceiver, ERC2771Handler, Ownable {\\n    address public rootToken;\\n\\n    event Deposit(address user, uint256 size, uint256 x, uint256 y, bytes data);\\n    event Withdraw(address user, uint256 size, uint256 x, uint256 y, bytes data);\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot,\\n        address _rootToken,\\n        address _trustedForwarder\\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        rootToken = _rootToken;\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n    }\\n\\n    function onERC721Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* tokenId */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC721BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata, /* ids */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return interfaceId == 0x5e8bf644 || interfaceId == 0x01ffc9a7;\\n    }\\n\\n    function batchTransferQuadToL2(\\n        address to,\\n        uint256[] memory sizes,\\n        uint256[] memory xs,\\n        uint256[] memory ys,\\n        bytes memory data\\n    ) public {\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"l2: invalid data\\\");\\n        LandToken(rootToken).batchTransferQuad(_msgSender(), address(this), sizes, xs, ys, data);\\n\\n        for (uint256 index = 0; index < sizes.length; index++) {\\n            bytes memory message = abi.encode(to, sizes[index], xs[index], ys[index], data);\\n            _sendMessageToChild(message);\\n            emit Deposit(to, sizes[index], xs[index], ys[index], data);\\n        }\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        (address to, uint256[] memory size, uint256[] memory x, uint256[] memory y, bytes memory data) =\\n            abi.decode(message, (address, uint256[], uint256[], uint256[], bytes));\\n        for (uint256 index = 0; index < x.length; index++) {\\n            LandToken(rootToken).transferQuad(address(this), to, size[index], x[index], y[index], data);\\n            emit Withdraw(to, size[index], x[index], y[index], data);\\n        }\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x18b5baf47909197750b64573d6fae52f4b0b9fceb88e02014eb5e22c1e846588\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620031333803806200313383398101604081905262000034916200017f565b600180546001600160a01b038087166001600160a01b03199283161790925560008054928616929091169190911781556200006e62000108565b600580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600680546001600160a01b0319166001600160a01b038416179055620000fe81600480546001600160a01b0319166001600160a01b0392909216919091179055565b50505050620001db565b60006200011f6200012560201b620009e91760201c565b90505b90565b6000620001323362000150565b1562000148575060131936013560601c62000122565b503362000122565b6004546001600160a01b038281169116145b919050565b80516001600160a01b03811681146200016257600080fd5b6000806000806080858703121562000195578384fd5b620001a08562000167565b9350620001b06020860162000167565b9250620001c06040860162000167565b9150620001d06060860162000167565b905092959194509250565b612f4880620001eb6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063972c4928116100b2578063ce1b815f11610081578063de9b771f11610066578063de9b771f1461032c578063f2fde38b1461033f578063f953cec71461035257610136565b8063ce1b815f14610308578063da7422281461031957610136565b8063972c4928146102bc578063aea4e49e146102cf578063c0857ba0146102e2578063c4d168d6146102f557610136565b80634b808c4611610109578063607f2d42116100ee578063607f2d4214610287578063715018a6146102aa5780638da5cb5b146102b457610136565b80634b808c461461022c578063572b6c051461026557610136565b806301ffc9a71461013b5780630e387de614610163578063150b7a02146101985780631f2d006514610201575b600080fd5b61014e6101493660046129b5565b610365565b60405190151581526020015b60405180910390f35b61018a7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161015a565b6101d06101a6366004612832565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161015a565b600654610214906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b6101d061023a366004612773565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61014e61027336600461269b565b6004546001600160a01b0390811691161490565b61014e610295366004612951565b60036020526000908152604090205460ff1681565b6102b2610400565b005b6102146104cb565b600254610214906001600160a01b031681565b6102b26102dd36600461269b565b6104db565b600154610214906001600160a01b031681565b6102b26103033660046128a3565b610589565b6004546001600160a01b0316610214565b6102b261032736600461269b565b6107dd565b600054610214906001600160a01b031681565b6102b261034d36600461269b565b61087b565b6102b26103603660046129f5565b6109cf565b60007f5e8bf644000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103f857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b610408610a33565b6001600160a01b03166104196104cb565b6001600160a01b0316146104745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805473ffffffffffffffffffffffffffffffffffffffff19169055565b6005546001600160a01b03165b90565b6002546001600160a01b03161561055a5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f53455400000000000000000000000000000000000000000000606482015260840161046b565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b8251845114801561059b575081518351145b6105e75760405162461bcd60e51b815260206004820152601060248201527f6c323a20696e76616c6964206461746100000000000000000000000000000000604482015260640161046b565b6006546001600160a01b031663eaa5e067610600610a33565b30878787876040518763ffffffff1660e01b815260040161062696959493929190612aee565b600060405180830381600087803b15801561064057600080fd5b505af1158015610654573d6000803e3d6000fd5b5050505060005b84518110156107d55760008686838151811061068757634e487b7160e01b600052603260045260246000fd5b60200260200101518684815181106106af57634e487b7160e01b600052603260045260246000fd5b60200260200101518685815181106106d757634e487b7160e01b600052603260045260246000fd5b6020026020010151866040516020016106f4959493929190612bc0565b604051602081830303815290604052905061070e81610a42565b7f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb18787848151811061075057634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061077857634e487b7160e01b600052603260045260246000fd5b60200260200101518786815181106107a057634e487b7160e01b600052603260045260246000fd5b6020026020010151876040516107ba959493929190612bc0565b60405180910390a150806107cd81612e67565b91505061065b565b505050505050565b6107e5610a33565b6001600160a01b03166107f66104cb565b6001600160a01b03161461084c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610883610a33565b6001600160a01b03166108946104cb565b6001600160a01b0316146108ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b6001600160a01b0381166109665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161046b565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006109da82610ac6565b90506109e581610e15565b5050565b6004546000906001600160a01b0316331415610a2c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6104d8565b50336104d8565b6000610a3d6109e9565b905090565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610a91929116908590600401612b9e565b600060405180830381600087803b158015610aab57600080fd5b505af1158015610abf573d6000803e3d6000fd5b5050505050565b60606000610ad383610ffd565b90506000610ae08261105c565b90506000610aed83611093565b9050600081610afb846110ca565b610b04866112f0565b604051602001610b1693929190612ac1565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610bb35760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f5353454400000000000000000000000000000000000000000000000000000000606482015260840161046b565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610bf38561131a565b90506000610c0082611480565b9050610c0b8161152c565b6002546001600160a01b03908116911614610c8e5760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c000000000000000000000000000000000000000000000000000000606482015260840161046b565b6000610c9987611563565b9050610cb9610ca9846020015190565b87610cb38a61158d565b846115b7565b610d2b5760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f460000000000000000000000000000000000000000000000000000000000606482015260840161046b565b610d5985610d38896118de565b610d418a611908565b84610d4b8c611932565b610d548d61195c565b611986565b506000610d6583611ad4565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610d9b610d96836000611b1e565b611b64565b14610de85760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604482015260640161046b565b6000610df384611bdf565b806020019051810190610e069190612a28565b9b9a5050505050505050505050565b600080600080600085806020019051810190610e3191906126b7565b9450945094509450945060005b8351811015610ff45760065485516001600160a01b03909116906338bb305a9030908990899086908110610e8257634e487b7160e01b600052603260045260246000fd5b6020026020010151888681518110610eaa57634e487b7160e01b600052603260045260246000fd5b6020026020010151888781518110610ed257634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518763ffffffff1660e01b8152600401610efc96959493929190612b54565b600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b505050507f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e86868381518110610f7057634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610f9857634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610fc057634e487b7160e01b600052603260045260246000fd5b602002602001015186604051610fda959493929190612bc0565b60405180910390a180610fec81612e67565b915050610e3e565b50505050505050565b60408051602081019091526060815260006110476110428460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611c09565b60408051602081019091529081529392505050565b60606103f8826000015160088151811061108657634e487b7160e01b600052603260045260246000fd5b6020026020010151611d3b565b60006103f882600001516002815181106110bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151611b64565b604080516020810190915260008152815160609190156103f8576000806110f2600086611de6565b60f81c9050600181148061110957508060ff166003145b156111e55760018551600261111e9190612dde565b6111289190612dfd565b67ffffffffffffffff81111561114e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611178576020820181803683370190505b5092506000611188600187611de6565b905080846000815181106111ac57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001925050611257565b6002855160026111f59190612dde565b6111ff9190612dfd565b67ffffffffffffffff81111561122557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561124f576020820181803683370190505b509250600091505b60ff82165b83518110156112e75761128661127560ff851683612dfd565b611280906002612c7c565b87611de6565b8482815181106112a657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806112df81612e67565b91505061125c565b50505092915050565b60006103f882600001516009815181106110bd57634e487b7160e01b600052603260045260246000fd5b61133e60405180606001604052806060815260200160608152602001600081525090565b611366826000015160068151811061108657634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261139c81611e83565b156113b1576113aa81611c09565b825261146c565b602082015180516000906113c790600190612dfd565b67ffffffffffffffff8111156113ed57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611417576020820181803683370190505b50905060008083602101915082602001905061143582828551611ebd565b60408051808201825260008082526020918201528151808301909252845182528085019082015261146590611042565b8652505050505b611475836112f0565b604083015250919050565b6040805160808101825260009181018281526060808301939093528152602081019190915260006114dc83600001516003815181106114cf57634e487b7160e01b600052603260045260246000fd5b6020026020010151611c09565b8360400151815181106114ff57634e487b7160e01b600052603260045260246000fd5b60200260200101519050604051806040016040528082815260200161152383611c09565b90529392505050565b60006103f8826020015160008151811061155657634e487b7160e01b600052603260045260246000fd5b6020026020010151611f37565b60006103f882600001516005815181106110bd57634e487b7160e01b600052603260045260246000fd5b60606103f8826000015160078151811061108657634e487b7160e01b600052603260045260246000fd5b6000806115eb8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006115f882611c09565b90506060808560008061160a8b6110ca565b90508051600014156116265760009750505050505050506118d6565b60005b86518110156118cd57815183111561164c576000985050505050505050506118d6565b61167c87828151811061166f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f51565b95508580519060200120841461169d576000985050505050505050506118d6565b6116c08782815181106114cf57634e487b7160e01b600052603260045260246000fd5b94508451601114156117bf578151831415611730578c805190602001206117018660108151811061108657634e487b7160e01b600052603260045260246000fd5b80519060200120141561171f576001985050505050505050506118d6565b6000985050505050505050506118d6565b600082848151811061175257634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561177757600099505050505050505050506118d6565b6117aa868260ff168151811061179d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611fe0565b94506117b7600185612c7c565b9350506118bb565b84516002141561171f5760006117f96117f28760008151811061108657634e487b7160e01b600052603260045260246000fd5b848661200e565b83519091506118088286612c7c565b141561186b578d8051906020012061183a8760018151811061108657634e487b7160e01b600052603260045260246000fd5b80519060200120141561185957600199505050505050505050506118d6565b600099505050505050505050506118d6565b8061188257600099505050505050505050506118d6565b61188c8185612c7c565b93506118b28660018151811061179d57634e487b7160e01b600052603260045260246000fd5b94506118bb9050565b806118c581612e67565b915050611629565b50505050505050505b949350505050565b60006103f882600001516003815181106110bd57634e487b7160e01b600052603260045260246000fd5b60006103f882600001516004815181106110bd57634e487b7160e01b600052603260045260246000fd5b60006103f882600001516000815181106110bd57634e487b7160e01b600052603260045260246000fd5b60606103f8826000015160018151811061108657634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190612969565b5093505092509250611a7b828b611a3b9190612dfd565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612173565b611ac75760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604482015260640161046b565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611b1684602001516001815181106114cf57634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611b5457634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611b7957508151602110155b611b8257600080fd5b6000611b9183602001516122e9565b90506000818460000151611ba59190612dfd565b9050600080838660200151611bba9190612c7c565b9050805191506020831015611bd657826020036101000a820491505b50949350505050565b60606103f8826020015160028151811061108657634e487b7160e01b600052603260045260246000fd5b6060611c1482611e83565b611c1d57600080fd5b6000611c288361236e565b905060008167ffffffffffffffff811115611c5357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c9857816020015b6040805180820190915260008082526020820152815260200190600190039081611c715790505b5090506000611caa85602001516122e9565b8560200151611cb99190612c7c565b90506000805b84811015611d3057611cd0836123f1565b9150604051806040016040528083815260200184815250848281518110611d0757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611d1c8284612c7c565b925080611d2881612e67565b915050611cbf565b509195945050505050565b8051606090611d4957600080fd5b6000611d5883602001516122e9565b90506000818460000151611d6c9190612dfd565b905060008167ffffffffffffffff811115611d9757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611dc1576020820181803683370190505b5090506000816020019050611bd6848760200151611ddf9190612c7c565b82856124b3565b6000611df3600284612e82565b15611e3b57601082611e06600286612c94565b81518110611e2457634e487b7160e01b600052603260045260246000fd5b0160200151611e36919060f81c612e96565b611e79565b601082611e49600286612c94565b81518110611e6757634e487b7160e01b600052603260045260246000fd5b0160200151611e79919060f81c612ca8565b60f81b9392505050565b8051600090611e94575060006103fb565b6020820151805160001a9060c0821015611eb3576000925050506103fb565b5060019392505050565b80611ec757611f32565b60208110611eff5782518252611ede602084612c7c565b9250611eeb602083612c7c565b9150611ef8602082612dfd565b9050611ec7565b60006001611f0e836020612dfd565b611f1a90610100612d10565b611f249190612dfd565b845184518216911916178352505b505050565b8051600090601514611f4857600080fd5b6103f882611b64565b60606000826000015167ffffffffffffffff811115611f8057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611faa576020820181803683370190505b509050805160001415611fbe5790506103fb565b6000816020019050611fd984602001518286600001516124b3565b5092915050565b8051600090602114611ff157600080fd5b600080836020015160016120059190612c7c565b51949350505050565b6000808061201b866110ca565b90506000815167ffffffffffffffff81111561204757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612071576020820181803683370190505b509050845b82516120829087612c7c565b8110156121415760008782815181106120ab57634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836120e08985612dfd565b815181106120fe57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050808061213990612e67565b915050612076565b508080519060200120828051906020012014156121615781519250612166565b600092505b50909150505b9392505050565b6000602082516121839190612e82565b156121d05760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e677468000000000000000000000000604482015260640161046b565b6000602083516121e09190612c94565b90506121ed816002612d10565b851061223b5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f206269670000000000000000000000604482015260640161046b565b60008660205b855181116122db5785810151925061225a600289612e82565b61228f5760408051602081018490529081018490526060016040516020818303038152906040528051906020012091506122bc565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6122c7600289612c94565b97506122d4602082612c7c565b9050612241565b509094149695505050505050565b8051600090811a60808110156123035760009150506103fb565b60b881108061231e575060c0811080159061231e575060f881105b1561232d5760019150506103fb565b60c081101561236257612342600160b8612e14565b61234f9060ff1682612dfd565b61235a906001612c7c565b9150506103fb565b612342600160f8612e14565b805160009061237f575060006103fb565b60008061238f84602001516122e9565b846020015161239e9190612c7c565b90506000846000015185602001516123b69190612c7c565b90505b808210156123e8576123ca826123f1565b6123d49083612c7c565b9150826123e081612e67565b9350506123b9565b50909392505050565b80516000908190811a608081101561240c5760019150611fd9565b60b881101561243257612420608082612dfd565b61242b906001612c7c565b9150611fd9565b60c081101561245f5760b78103600185019450806020036101000a85510460018201810193505050611fd9565b60f88110156124735761242060c082612dfd565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b806124bd57611f32565b602081106124f557825182526124d4602084612c7c565b92506124e1602083612c7c565b91506124ee602082612dfd565b90506124bd565b80611eff57611f32565b600082601f83011261250f578081fd5b8135602061252461251f83612c30565b612bff565b8281528181019085830183850287018401881015612540578586fd5b855b8581101561255e57813584529284019290840190600101612542565b5090979650505050505050565b600082601f83011261257b578081fd5b8151602061258b61251f83612c30565b82815281810190858301838502870184018810156125a7578586fd5b855b8581101561255e578151845292840192908401906001016125a9565b60008083601f8401126125d6578182fd5b50813567ffffffffffffffff8111156125ed578182fd5b60208301915083602082850101111561260557600080fd5b9250929050565b600082601f83011261261c578081fd5b813561262a61251f82612c54565b81815284602083860101111561263e578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612668578081fd5b815161267661251f82612c54565b81815284602083860101111561268a578283fd5b6118d6826020830160208701612e37565b6000602082840312156126ac578081fd5b813561216c81612efa565b600080600080600060a086880312156126ce578081fd5b85516126d981612efa565b602087015190955067ffffffffffffffff808211156126f6578283fd5b61270289838a0161256b565b95506040880151915080821115612717578283fd5b61272389838a0161256b565b94506060880151915080821115612738578283fd5b61274489838a0161256b565b93506080880151915080821115612759578283fd5b5061276688828901612658565b9150509295509295909350565b6000806000806000806080878903121561278b578081fd5b863561279681612efa565b955060208701356127a681612efa565b9450604087013567ffffffffffffffff808211156127c2578283fd5b818901915089601f8301126127d5578283fd5b8135818111156127e3578384fd5b8a602080830285010111156127f6578384fd5b602083019650809550506060890135915080821115612813578283fd5b5061282089828a016125c5565b979a9699509497509295939492505050565b600080600080600060808688031215612849578081fd5b853561285481612efa565b9450602086013561286481612efa565b935060408601359250606086013567ffffffffffffffff811115612886578182fd5b612892888289016125c5565b969995985093965092949392505050565b600080600080600060a086880312156128ba578283fd5b85356128c581612efa565b9450602086013567ffffffffffffffff808211156128e1578485fd5b6128ed89838a016124ff565b95506040880135915080821115612902578485fd5b61290e89838a016124ff565b94506060880135915080821115612923578283fd5b61292f89838a016124ff565b93506080880135915080821115612944578283fd5b506127668882890161260c565b600060208284031215612962578081fd5b5035919050565b600080600080600060a08688031215612980578283fd5b8551945060208601519350604086015192506060860151915060808601516129a781612efa565b809150509295509295909350565b6000602082840312156129c6578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461216c578182fd5b600060208284031215612a06578081fd5b813567ffffffffffffffff811115612a1c578182fd5b6118d68482850161260c565b600060208284031215612a39578081fd5b815167ffffffffffffffff811115612a4f578182fd5b6118d684828501612658565b6000815180845260208085019450808401835b83811015612a8a57815187529582019590820190600101612a6e565b509495945050505050565b60008151808452612aad816020860160208601612e37565b601f01601f19169290920160200192915050565b60008482528351612ad9816020850160208801612e37565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525060c06040830152612b1a60c0830187612a5b565b8281036060840152612b2c8187612a5b565b90508281036080840152612b408186612a5b565b905082810360a0840152611ac78185612a95565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a0830152612b9260c0830184612a95565b98975050505050505050565b60006001600160a01b0384168252604060208301526118d66040830184612a95565b60006001600160a01b038716825285602083015284604083015283606083015260a06080830152612bf460a0830184612a95565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612c2857612c28612ee4565b604052919050565b600067ffffffffffffffff821115612c4a57612c4a612ee4565b5060209081020190565b600067ffffffffffffffff821115612c6e57612c6e612ee4565b50601f01601f191660200190565b60008219821115612c8f57612c8f612eb8565b500190565b600082612ca357612ca3612ece565b500490565b600060ff831680612cbb57612cbb612ece565b8060ff84160491505092915050565b80825b6001808611612cdc5750612d07565b818704821115612cee57612cee612eb8565b80861615612cfb57918102915b9490941c938002612ccd565b94509492505050565b600061216c6000198484600082612d295750600161216c565b81612d365750600061216c565b8160018114612d4c5760028114612d5657612d83565b600191505061216c565b60ff841115612d6757612d67612eb8565b6001841b915084821115612d7d57612d7d612eb8565b5061216c565b5060208310610133831016604e8410600b8410161715612db6575081810a83811115612db157612db1612eb8565b61216c565b612dc38484846001612cca565b808604821115612dd557612dd5612eb8565b02949350505050565b6000816000190483118215151615612df857612df8612eb8565b500290565b600082821015612e0f57612e0f612eb8565b500390565b600060ff821660ff841680821015612e2e57612e2e612eb8565b90039392505050565b60005b83811015612e52578181015183820152602001612e3a565b83811115612e61576000848401525b50505050565b6000600019821415612e7b57612e7b612eb8565b5060010190565b600082612e9157612e91612ece565b500690565b600060ff831680612ea957612ea9612ece565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612f0f57600080fd5b5056fea26469706673582212200d2d90c0e912bf2a9310d66fd01676beff06209fbd580903c1291c75100c485464736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c8063972c4928116100b2578063ce1b815f11610081578063de9b771f11610066578063de9b771f1461032c578063f2fde38b1461033f578063f953cec71461035257610136565b8063ce1b815f14610308578063da7422281461031957610136565b8063972c4928146102bc578063aea4e49e146102cf578063c0857ba0146102e2578063c4d168d6146102f557610136565b80634b808c4611610109578063607f2d42116100ee578063607f2d4214610287578063715018a6146102aa5780638da5cb5b146102b457610136565b80634b808c461461022c578063572b6c051461026557610136565b806301ffc9a71461013b5780630e387de614610163578063150b7a02146101985780631f2d006514610201575b600080fd5b61014e6101493660046129b5565b610365565b60405190151581526020015b60405180910390f35b61018a7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161015a565b6101d06101a6366004612832565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161015a565b600654610214906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b6101d061023a366004612773565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61014e61027336600461269b565b6004546001600160a01b0390811691161490565b61014e610295366004612951565b60036020526000908152604090205460ff1681565b6102b2610400565b005b6102146104cb565b600254610214906001600160a01b031681565b6102b26102dd36600461269b565b6104db565b600154610214906001600160a01b031681565b6102b26103033660046128a3565b610589565b6004546001600160a01b0316610214565b6102b261032736600461269b565b6107dd565b600054610214906001600160a01b031681565b6102b261034d36600461269b565b61087b565b6102b26103603660046129f5565b6109cf565b60007f5e8bf644000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103f857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b610408610a33565b6001600160a01b03166104196104cb565b6001600160a01b0316146104745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805473ffffffffffffffffffffffffffffffffffffffff19169055565b6005546001600160a01b03165b90565b6002546001600160a01b03161561055a5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f53455400000000000000000000000000000000000000000000606482015260840161046b565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b8251845114801561059b575081518351145b6105e75760405162461bcd60e51b815260206004820152601060248201527f6c323a20696e76616c6964206461746100000000000000000000000000000000604482015260640161046b565b6006546001600160a01b031663eaa5e067610600610a33565b30878787876040518763ffffffff1660e01b815260040161062696959493929190612aee565b600060405180830381600087803b15801561064057600080fd5b505af1158015610654573d6000803e3d6000fd5b5050505060005b84518110156107d55760008686838151811061068757634e487b7160e01b600052603260045260246000fd5b60200260200101518684815181106106af57634e487b7160e01b600052603260045260246000fd5b60200260200101518685815181106106d757634e487b7160e01b600052603260045260246000fd5b6020026020010151866040516020016106f4959493929190612bc0565b604051602081830303815290604052905061070e81610a42565b7f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb18787848151811061075057634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061077857634e487b7160e01b600052603260045260246000fd5b60200260200101518786815181106107a057634e487b7160e01b600052603260045260246000fd5b6020026020010151876040516107ba959493929190612bc0565b60405180910390a150806107cd81612e67565b91505061065b565b505050505050565b6107e5610a33565b6001600160a01b03166107f66104cb565b6001600160a01b03161461084c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610883610a33565b6001600160a01b03166108946104cb565b6001600160a01b0316146108ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b6001600160a01b0381166109665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161046b565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006109da82610ac6565b90506109e581610e15565b5050565b6004546000906001600160a01b0316331415610a2c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6104d8565b50336104d8565b6000610a3d6109e9565b905090565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610a91929116908590600401612b9e565b600060405180830381600087803b158015610aab57600080fd5b505af1158015610abf573d6000803e3d6000fd5b5050505050565b60606000610ad383610ffd565b90506000610ae08261105c565b90506000610aed83611093565b9050600081610afb846110ca565b610b04866112f0565b604051602001610b1693929190612ac1565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610bb35760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f5353454400000000000000000000000000000000000000000000000000000000606482015260840161046b565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610bf38561131a565b90506000610c0082611480565b9050610c0b8161152c565b6002546001600160a01b03908116911614610c8e5760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c000000000000000000000000000000000000000000000000000000606482015260840161046b565b6000610c9987611563565b9050610cb9610ca9846020015190565b87610cb38a61158d565b846115b7565b610d2b5760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f460000000000000000000000000000000000000000000000000000000000606482015260840161046b565b610d5985610d38896118de565b610d418a611908565b84610d4b8c611932565b610d548d61195c565b611986565b506000610d6583611ad4565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610d9b610d96836000611b1e565b611b64565b14610de85760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604482015260640161046b565b6000610df384611bdf565b806020019051810190610e069190612a28565b9b9a5050505050505050505050565b600080600080600085806020019051810190610e3191906126b7565b9450945094509450945060005b8351811015610ff45760065485516001600160a01b03909116906338bb305a9030908990899086908110610e8257634e487b7160e01b600052603260045260246000fd5b6020026020010151888681518110610eaa57634e487b7160e01b600052603260045260246000fd5b6020026020010151888781518110610ed257634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518763ffffffff1660e01b8152600401610efc96959493929190612b54565b600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b505050507f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e86868381518110610f7057634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610f9857634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610fc057634e487b7160e01b600052603260045260246000fd5b602002602001015186604051610fda959493929190612bc0565b60405180910390a180610fec81612e67565b915050610e3e565b50505050505050565b60408051602081019091526060815260006110476110428460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611c09565b60408051602081019091529081529392505050565b60606103f8826000015160088151811061108657634e487b7160e01b600052603260045260246000fd5b6020026020010151611d3b565b60006103f882600001516002815181106110bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151611b64565b604080516020810190915260008152815160609190156103f8576000806110f2600086611de6565b60f81c9050600181148061110957508060ff166003145b156111e55760018551600261111e9190612dde565b6111289190612dfd565b67ffffffffffffffff81111561114e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611178576020820181803683370190505b5092506000611188600187611de6565b905080846000815181106111ac57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001925050611257565b6002855160026111f59190612dde565b6111ff9190612dfd565b67ffffffffffffffff81111561122557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561124f576020820181803683370190505b509250600091505b60ff82165b83518110156112e75761128661127560ff851683612dfd565b611280906002612c7c565b87611de6565b8482815181106112a657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806112df81612e67565b91505061125c565b50505092915050565b60006103f882600001516009815181106110bd57634e487b7160e01b600052603260045260246000fd5b61133e60405180606001604052806060815260200160608152602001600081525090565b611366826000015160068151811061108657634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261139c81611e83565b156113b1576113aa81611c09565b825261146c565b602082015180516000906113c790600190612dfd565b67ffffffffffffffff8111156113ed57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611417576020820181803683370190505b50905060008083602101915082602001905061143582828551611ebd565b60408051808201825260008082526020918201528151808301909252845182528085019082015261146590611042565b8652505050505b611475836112f0565b604083015250919050565b6040805160808101825260009181018281526060808301939093528152602081019190915260006114dc83600001516003815181106114cf57634e487b7160e01b600052603260045260246000fd5b6020026020010151611c09565b8360400151815181106114ff57634e487b7160e01b600052603260045260246000fd5b60200260200101519050604051806040016040528082815260200161152383611c09565b90529392505050565b60006103f8826020015160008151811061155657634e487b7160e01b600052603260045260246000fd5b6020026020010151611f37565b60006103f882600001516005815181106110bd57634e487b7160e01b600052603260045260246000fd5b60606103f8826000015160078151811061108657634e487b7160e01b600052603260045260246000fd5b6000806115eb8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006115f882611c09565b90506060808560008061160a8b6110ca565b90508051600014156116265760009750505050505050506118d6565b60005b86518110156118cd57815183111561164c576000985050505050505050506118d6565b61167c87828151811061166f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f51565b95508580519060200120841461169d576000985050505050505050506118d6565b6116c08782815181106114cf57634e487b7160e01b600052603260045260246000fd5b94508451601114156117bf578151831415611730578c805190602001206117018660108151811061108657634e487b7160e01b600052603260045260246000fd5b80519060200120141561171f576001985050505050505050506118d6565b6000985050505050505050506118d6565b600082848151811061175257634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561177757600099505050505050505050506118d6565b6117aa868260ff168151811061179d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611fe0565b94506117b7600185612c7c565b9350506118bb565b84516002141561171f5760006117f96117f28760008151811061108657634e487b7160e01b600052603260045260246000fd5b848661200e565b83519091506118088286612c7c565b141561186b578d8051906020012061183a8760018151811061108657634e487b7160e01b600052603260045260246000fd5b80519060200120141561185957600199505050505050505050506118d6565b600099505050505050505050506118d6565b8061188257600099505050505050505050506118d6565b61188c8185612c7c565b93506118b28660018151811061179d57634e487b7160e01b600052603260045260246000fd5b94506118bb9050565b806118c581612e67565b915050611629565b50505050505050505b949350505050565b60006103f882600001516003815181106110bd57634e487b7160e01b600052603260045260246000fd5b60006103f882600001516004815181106110bd57634e487b7160e01b600052603260045260246000fd5b60006103f882600001516000815181106110bd57634e487b7160e01b600052603260045260246000fd5b60606103f8826000015160018151811061108657634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190612969565b5093505092509250611a7b828b611a3b9190612dfd565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612173565b611ac75760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604482015260640161046b565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611b1684602001516001815181106114cf57634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611b5457634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611b7957508151602110155b611b8257600080fd5b6000611b9183602001516122e9565b90506000818460000151611ba59190612dfd565b9050600080838660200151611bba9190612c7c565b9050805191506020831015611bd657826020036101000a820491505b50949350505050565b60606103f8826020015160028151811061108657634e487b7160e01b600052603260045260246000fd5b6060611c1482611e83565b611c1d57600080fd5b6000611c288361236e565b905060008167ffffffffffffffff811115611c5357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c9857816020015b6040805180820190915260008082526020820152815260200190600190039081611c715790505b5090506000611caa85602001516122e9565b8560200151611cb99190612c7c565b90506000805b84811015611d3057611cd0836123f1565b9150604051806040016040528083815260200184815250848281518110611d0757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611d1c8284612c7c565b925080611d2881612e67565b915050611cbf565b509195945050505050565b8051606090611d4957600080fd5b6000611d5883602001516122e9565b90506000818460000151611d6c9190612dfd565b905060008167ffffffffffffffff811115611d9757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611dc1576020820181803683370190505b5090506000816020019050611bd6848760200151611ddf9190612c7c565b82856124b3565b6000611df3600284612e82565b15611e3b57601082611e06600286612c94565b81518110611e2457634e487b7160e01b600052603260045260246000fd5b0160200151611e36919060f81c612e96565b611e79565b601082611e49600286612c94565b81518110611e6757634e487b7160e01b600052603260045260246000fd5b0160200151611e79919060f81c612ca8565b60f81b9392505050565b8051600090611e94575060006103fb565b6020820151805160001a9060c0821015611eb3576000925050506103fb565b5060019392505050565b80611ec757611f32565b60208110611eff5782518252611ede602084612c7c565b9250611eeb602083612c7c565b9150611ef8602082612dfd565b9050611ec7565b60006001611f0e836020612dfd565b611f1a90610100612d10565b611f249190612dfd565b845184518216911916178352505b505050565b8051600090601514611f4857600080fd5b6103f882611b64565b60606000826000015167ffffffffffffffff811115611f8057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611faa576020820181803683370190505b509050805160001415611fbe5790506103fb565b6000816020019050611fd984602001518286600001516124b3565b5092915050565b8051600090602114611ff157600080fd5b600080836020015160016120059190612c7c565b51949350505050565b6000808061201b866110ca565b90506000815167ffffffffffffffff81111561204757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612071576020820181803683370190505b509050845b82516120829087612c7c565b8110156121415760008782815181106120ab57634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836120e08985612dfd565b815181106120fe57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050808061213990612e67565b915050612076565b508080519060200120828051906020012014156121615781519250612166565b600092505b50909150505b9392505050565b6000602082516121839190612e82565b156121d05760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e677468000000000000000000000000604482015260640161046b565b6000602083516121e09190612c94565b90506121ed816002612d10565b851061223b5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f206269670000000000000000000000604482015260640161046b565b60008660205b855181116122db5785810151925061225a600289612e82565b61228f5760408051602081018490529081018490526060016040516020818303038152906040528051906020012091506122bc565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6122c7600289612c94565b97506122d4602082612c7c565b9050612241565b509094149695505050505050565b8051600090811a60808110156123035760009150506103fb565b60b881108061231e575060c0811080159061231e575060f881105b1561232d5760019150506103fb565b60c081101561236257612342600160b8612e14565b61234f9060ff1682612dfd565b61235a906001612c7c565b9150506103fb565b612342600160f8612e14565b805160009061237f575060006103fb565b60008061238f84602001516122e9565b846020015161239e9190612c7c565b90506000846000015185602001516123b69190612c7c565b90505b808210156123e8576123ca826123f1565b6123d49083612c7c565b9150826123e081612e67565b9350506123b9565b50909392505050565b80516000908190811a608081101561240c5760019150611fd9565b60b881101561243257612420608082612dfd565b61242b906001612c7c565b9150611fd9565b60c081101561245f5760b78103600185019450806020036101000a85510460018201810193505050611fd9565b60f88110156124735761242060c082612dfd565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b806124bd57611f32565b602081106124f557825182526124d4602084612c7c565b92506124e1602083612c7c565b91506124ee602082612dfd565b90506124bd565b80611eff57611f32565b600082601f83011261250f578081fd5b8135602061252461251f83612c30565b612bff565b8281528181019085830183850287018401881015612540578586fd5b855b8581101561255e57813584529284019290840190600101612542565b5090979650505050505050565b600082601f83011261257b578081fd5b8151602061258b61251f83612c30565b82815281810190858301838502870184018810156125a7578586fd5b855b8581101561255e578151845292840192908401906001016125a9565b60008083601f8401126125d6578182fd5b50813567ffffffffffffffff8111156125ed578182fd5b60208301915083602082850101111561260557600080fd5b9250929050565b600082601f83011261261c578081fd5b813561262a61251f82612c54565b81815284602083860101111561263e578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612668578081fd5b815161267661251f82612c54565b81815284602083860101111561268a578283fd5b6118d6826020830160208701612e37565b6000602082840312156126ac578081fd5b813561216c81612efa565b600080600080600060a086880312156126ce578081fd5b85516126d981612efa565b602087015190955067ffffffffffffffff808211156126f6578283fd5b61270289838a0161256b565b95506040880151915080821115612717578283fd5b61272389838a0161256b565b94506060880151915080821115612738578283fd5b61274489838a0161256b565b93506080880151915080821115612759578283fd5b5061276688828901612658565b9150509295509295909350565b6000806000806000806080878903121561278b578081fd5b863561279681612efa565b955060208701356127a681612efa565b9450604087013567ffffffffffffffff808211156127c2578283fd5b818901915089601f8301126127d5578283fd5b8135818111156127e3578384fd5b8a602080830285010111156127f6578384fd5b602083019650809550506060890135915080821115612813578283fd5b5061282089828a016125c5565b979a9699509497509295939492505050565b600080600080600060808688031215612849578081fd5b853561285481612efa565b9450602086013561286481612efa565b935060408601359250606086013567ffffffffffffffff811115612886578182fd5b612892888289016125c5565b969995985093965092949392505050565b600080600080600060a086880312156128ba578283fd5b85356128c581612efa565b9450602086013567ffffffffffffffff808211156128e1578485fd5b6128ed89838a016124ff565b95506040880135915080821115612902578485fd5b61290e89838a016124ff565b94506060880135915080821115612923578283fd5b61292f89838a016124ff565b93506080880135915080821115612944578283fd5b506127668882890161260c565b600060208284031215612962578081fd5b5035919050565b600080600080600060a08688031215612980578283fd5b8551945060208601519350604086015192506060860151915060808601516129a781612efa565b809150509295509295909350565b6000602082840312156129c6578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461216c578182fd5b600060208284031215612a06578081fd5b813567ffffffffffffffff811115612a1c578182fd5b6118d68482850161260c565b600060208284031215612a39578081fd5b815167ffffffffffffffff811115612a4f578182fd5b6118d684828501612658565b6000815180845260208085019450808401835b83811015612a8a57815187529582019590820190600101612a6e565b509495945050505050565b60008151808452612aad816020860160208601612e37565b601f01601f19169290920160200192915050565b60008482528351612ad9816020850160208801612e37565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525060c06040830152612b1a60c0830187612a5b565b8281036060840152612b2c8187612a5b565b90508281036080840152612b408186612a5b565b905082810360a0840152611ac78185612a95565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a0830152612b9260c0830184612a95565b98975050505050505050565b60006001600160a01b0384168252604060208301526118d66040830184612a95565b60006001600160a01b038716825285602083015284604083015283606083015260a06080830152612bf460a0830184612a95565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612c2857612c28612ee4565b604052919050565b600067ffffffffffffffff821115612c4a57612c4a612ee4565b5060209081020190565b600067ffffffffffffffff821115612c6e57612c6e612ee4565b50601f01601f191660200190565b60008219821115612c8f57612c8f612eb8565b500190565b600082612ca357612ca3612ece565b500490565b600060ff831680612cbb57612cbb612ece565b8060ff84160491505092915050565b80825b6001808611612cdc5750612d07565b818704821115612cee57612cee612eb8565b80861615612cfb57918102915b9490941c938002612ccd565b94509492505050565b600061216c6000198484600082612d295750600161216c565b81612d365750600061216c565b8160018114612d4c5760028114612d5657612d83565b600191505061216c565b60ff841115612d6757612d67612eb8565b6001841b915084821115612d7d57612d7d612eb8565b5061216c565b5060208310610133831016604e8410600b8410161715612db6575081810a83811115612db157612db1612eb8565b61216c565b612dc38484846001612cca565b808604821115612dd557612dd5612eb8565b02949350505050565b6000816000190483118215151615612df857612df8612eb8565b500290565b600082821015612e0f57612e0f612eb8565b500390565b600060ff821660ff841680821015612e2e57612e2e612eb8565b90039392505050565b60005b83811015612e52578181015183820152602001612e3a565b83811115612e61576000848401525b50505050565b6000600019821415612e7b57612e7b612eb8565b5060010190565b600082612e9157612e91612ece565b500690565b600060ff831680612ea957612ea9612ece565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612f0f57600080fd5b5056fea26469706673582212200d2d90c0e912bf2a9310d66fd01676beff06209fbd580903c1291c75100c485464736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)5136"
      },
      {
        "astId": 5189,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)5154"
      },
      {
        "astId": 5191,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5195,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 20711,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 31307,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "rootToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)5154": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)5136": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}