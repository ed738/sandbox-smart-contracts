{
  "address": "0x865A3FF99D285B08C07E9638Cd5262Fd9A1114C4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        }
      ],
      "name": "SetGasLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        }
      ],
      "name": "SetMaxGasLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuadToL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "gasLimits",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasLimitOnL2",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setMaxLimitOnL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[5]",
          "name": "limits",
          "type": "uint32[5]"
        }
      ],
      "name": "setupLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ee8039bb81412026c3e2add1102a55c1de25736f38294fe329b4fe278d2a207",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0x865A3FF99D285B08C07E9638Cd5262Fd9A1114C4",
    "transactionIndex": 6,
    "gasUsed": "2837380",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000001000000000000000000000000000000800200020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001020000000000000000100000000000000000000000000000000000000000000000000",
    "blockHash": "0x8cc777bc129952d585c297d8ec4effec4956aad06ce9ddc4055be4811a570a9e",
    "transactionHash": "0x0ee8039bb81412026c3e2add1102a55c1de25736f38294fe329b4fe278d2a207",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 6181555,
        "transactionHash": "0x0ee8039bb81412026c3e2add1102a55c1de25736f38294fe329b4fe278d2a207",
        "address": "0x865A3FF99D285B08C07E9638Cd5262Fd9A1114C4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x8cc777bc129952d585c297d8ec4effec4956aad06ce9ddc4055be4811a570a9e"
      }
    ],
    "blockNumber": 6181555,
    "cumulativeGasUsed": "3799906",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0x85F817921665fF27b5F3265b3B0b1B19402ed270"
  ],
  "solcInputHash": "b59d7a2a7d0c4ca191743aad748535bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"}],\"name\":\"SetGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"}],\"name\":\"SetMaxGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuadToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"gasLimits\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasLimitOnL2\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxGasLimit\",\"type\":\"uint32\"}],\"name\":\"setMaxLimitOnL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[5]\",\"name\":\"limits\",\"type\":\"uint32[5]\"}],\"name\":\"setupLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/root/land/LandTunnel.sol\":\"LandTunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/* This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\\n *\\n * This code has not been reviewed.\\n * Do not use or deploy this code before reviewing it personally first.\\n */\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdfe12ae6fa987baf12119768e002a9f74acc434022f8dc367e66b27e6ce3eefc\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface LandToken {\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x981419231715d0c076889d219f4b0b27870ed17718f3be8c489b2634cb5b9db6\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/root/land/LandTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport \\\"../../../common/interfaces/ILandToken.sol\\\";\\nimport \\\"../../../common/interfaces/IERC721TokenReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\n\\n// @todo - natspec comments\\n\\ncontract LandTunnel is FxBaseRootTunnel, IERC721TokenReceiver, Ownable {\\n    address public rootToken;\\n    uint32 public maxGasLimitOnL2 = 500;\\n    mapping(uint8 => uint32) public gasLimits;\\n\\n    event Deposit(address user, uint256 size, uint256 x, uint256 y, bytes data);\\n    event Withdraw(address user, uint256 size, uint256 x, uint256 y, bytes data);\\n\\n    event SetGasLimit(uint8 size, uint32 limit);\\n    event SetMaxGasLimit(uint32 maxGasLimit);\\n\\n    function setMaxLimitOnL2(uint32 _maxGasLimit) external onlyOwner {\\n        maxGasLimitOnL2 = _maxGasLimit;\\n        emit SetMaxGasLimit(_maxGasLimit);\\n    }\\n\\n    function _setLimit(uint8 size, uint32 limit) internal {\\n        gasLimits[size] = limit;\\n        emit SetGasLimit(size, limit);\\n    }\\n\\n    function setLimit(uint8 size, uint32 limit) external onlyOwner {\\n        _setLimit(size, limit);\\n    }\\n\\n    // setupLimits([5, 10, 20, 90, 340]);\\n    function setupLimits(uint32[5] calldata limits) external onlyOwner {\\n        _setLimit(1, limits[0]);\\n        _setLimit(3, limits[1]);\\n        _setLimit(6, limits[2]);\\n        _setLimit(12, limits[3]);\\n        _setLimit(24, limits[4]);\\n    }\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot,\\n        address _rootToken\\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        rootToken = _rootToken;\\n    }\\n\\n    function onERC721Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* tokenId */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function batchTransferQuadToL2(\\n        address to,\\n        uint256[] memory sizes,\\n        uint256[] memory xs,\\n        uint256[] memory ys,\\n        bytes memory data\\n    ) public {\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"l2: invalid data\\\");\\n        LandToken(rootToken).batchTransferQuad(msg.sender, address(this), sizes, xs, ys, data);\\n\\n        uint32 gasLimit = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            gasLimit += gasLimits[uint8(sizes[i])];\\n        }\\n\\n        require(gasLimit < maxGasLimitOnL2, \\\"Exceeds gas limit on L2.\\\");\\n\\n        for (uint256 index = 0; index < sizes.length; index++) {\\n            bytes memory message = abi.encode(to, sizes[index], xs[index], ys[index], data);\\n            _sendMessageToChild(message);\\n            emit Deposit(to, sizes[index], xs[index], ys[index], data);\\n        }\\n    }\\n\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        (address to, uint256[] memory size, uint256[] memory x, uint256[] memory y, bytes memory data) =\\n            abi.decode(message, (address, uint256[], uint256[], uint256[], bytes));\\n        for (uint256 index = 0; index < x.length; index++) {\\n            LandToken(rootToken).transferQuad(address(this), to, size[index], x[index], y[index], data);\\n            emit Withdraw(to, size[index], x[index], y[index], data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ac389a8aa775e1ff98177ecb4bee68a3c6aaea389bba3fba4bbfd3f8ab41db5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005805463ffffffff60a01b1916607d60a21b1790553480156200002757600080fd5b5060405162003224380380620032248339810160408190526200004a9162000116565b600180546001600160a01b038086166001600160a01b0319928316179092556000805492851692909116919091178155620000823390565b600480546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b0319166001600160a01b0392909216919091179055506200015f9050565b80516001600160a01b03811681146200011157600080fd5b919050565b6000806000606084860312156200012b578283fd5b6200013684620000f9565b92506200014660208501620000f9565b91506200015660408501620000f9565b90509250925092565b6130b5806200016f6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638bfd7d65116100b2578063c0857ba011610081578063de9b771f11610066578063de9b771f1461033f578063f2fde38b14610352578063f953cec71461036557610136565b8063c0857ba014610319578063c4d168d61461032c57610136565b80638bfd7d65146102ba5780638da5cb5b146102e2578063972c4928146102f3578063aea4e49e1461030657610136565b80631f2d00651161010957806321f599f2116100ee57806321f599f214610244578063607f2d421461027f578063715018a6146102b257610136565b80631f2d00651461020657806321642b181461023157610136565b8063068d0cb11461013b5780630e161578146101505780630e387de614610163578063150b7a021461019d575b600080fd5b61014e610149366004612b3d565b610378565b005b61014e61015e366004612a4d565b61045a565b61018a7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6040519081526020015b60405180910390f35b6101d56101ab366004612905565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610194565b600554610219906001600160a01b031681565b6040516001600160a01b039091168152602001610194565b61014e61023f366004612b71565b61050c565b61026a610252366004612b57565b60066020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610194565b6102a261028d366004612a73565b60036020526000908152604090205460ff1681565b6040519015158152602001610194565b61014e610574565b60055461026a9074010000000000000000000000000000000000000000900463ffffffff1681565b6004546001600160a01b0316610219565b600254610219906001600160a01b031681565b61014e61031436600461282d565b610625565b600154610219906001600160a01b031681565b61014e61033a36600461299f565b6106d3565b600054610219906001600160a01b031681565b61014e61036036600461282d565b610a23565b61014e610373366004612ad7565b610b62565b6004546001600160a01b031633146103d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600580547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8416908102919091179091556040519081527f59750b13637aff7a39455c6fb86108b91deab78a6d1046f7bd72cfdfae2f4d909060200160405180910390a150565b6004546001600160a01b031633146104b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ce565b6104d560018260005b6020020160208101906104d09190612b3d565b610b78565b6104e260038260016104bd565b6104ef60068260026104bd565b6104fc600c8260036104bd565b61050960188260046104bd565b50565b6004546001600160a01b031633146105665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ce565b6105708282610b78565b5050565b6004546001600160a01b031633146105ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ce565b6004546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36004805473ffffffffffffffffffffffffffffffffffffffff19169055565b6002546001600160a01b0316156106a45760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084016103ce565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b825184511480156106e5575081518351145b6107315760405162461bcd60e51b815260206004820152601060248201527f6c323a20696e76616c696420646174610000000000000000000000000000000060448201526064016103ce565b6005546040517feaa5e0670000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063eaa5e0679061078490339030908990899089908990600401612c36565b600060405180830381600087803b15801561079e57600080fd5b505af11580156107b2573d6000803e3d6000fd5b505050506000805b855181101561082957600660008783815181106107e757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff168252810191909152604001600020546108159063ffffffff1683612ddc565b91508061082181612fd7565b9150506107ba565b5060055463ffffffff7401000000000000000000000000000000000000000090910481169082161061089d5760405162461bcd60e51b815260206004820152601860248201527f4578636565647320676173206c696d6974206f6e204c322e000000000000000060448201526064016103ce565b60005b8551811015610a1a576000878783815181106108cc57634e487b7160e01b600052603260045260246000fd5b60200260200101518784815181106108f457634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061091c57634e487b7160e01b600052603260045260246000fd5b602002602001015187604051602001610939959493929190612d08565b604051602081830303815290604052905061095381610bf7565b7f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb18888848151811061099557634e487b7160e01b600052603260045260246000fd5b60200260200101518885815181106109bd57634e487b7160e01b600052603260045260246000fd5b60200260200101518886815181106109e557634e487b7160e01b600052603260045260246000fd5b6020026020010151886040516109ff959493929190612d08565b60405180910390a15080610a1281612fd7565b9150506108a0565b50505050505050565b6004546001600160a01b03163314610a7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ce565b6001600160a01b038116610af95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103ce565b6004546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610b6d82610c7b565b905061057081610fcc565b60ff821660008181526006602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff86169081179091558251938452908301527ffc6e32fc7effd308d33dfd4879e53051d8b83cb5d4b7826ff3e38473c0e57dd9910160405180910390a15050565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610c46929116908590600401612ce6565b600060405180830381600087803b158015610c6057600080fd5b505af1158015610c74573d6000803e3d6000fd5b5050505050565b60606000610c88836111ab565b90506000610c958261120a565b90506000610ca283611247565b9050600081610cb08461127e565b610cb9866114a4565b604051602001610ccb93929190612c09565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610d685760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f535345440000000000000000000000000000000000000000000000000000000060648201526084016103ce565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610da8856114ce565b90506000610db582611634565b9050610dc0816116e0565b6002546001600160a01b03908116911614610e435760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c00000000000000000000000000000000000000000000000000000060648201526084016103ce565b6000610e4e87611717565b9050610e6e610e5e846020015190565b87610e688a611741565b8461176b565b610ee05760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f46000000000000000000000000000000000000000000000000000000000060648201526084016103ce565b610f0e85610eed89611a92565b610ef68a611abc565b84610f008c611ae6565b610f098d611b10565b611b3a565b506000610f1a83611c88565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610f50610f4b836000611cd2565b611d18565b14610f9d5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016103ce565b6000610fa884611d93565b806020019051810190610fbb9190612b0a565b99505050505050505050505b919050565b600080600080600085806020019051810190610fe89190612849565b9450945094509450945060005b8351811015610a1a5760055485516001600160a01b03909116906338bb305a903090899089908690811061103957634e487b7160e01b600052603260045260246000fd5b602002602001015188868151811061106157634e487b7160e01b600052603260045260246000fd5b602002602001015188878151811061108957634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518763ffffffff1660e01b81526004016110b396959493929190612c9c565b600060405180830381600087803b1580156110cd57600080fd5b505af11580156110e1573d6000803e3d6000fd5b505050507f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e8686838151811061112757634e487b7160e01b600052603260045260246000fd5b602002602001015186848151811061114f57634e487b7160e01b600052603260045260246000fd5b602002602001015186858151811061117757634e487b7160e01b600052603260045260246000fd5b602002602001015186604051611191959493929190612d08565b60405180910390a1806111a381612fd7565b915050610ff5565b60408051602081019091526060815260006111f56111f08460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611dbd565b60408051602081019091529081529392505050565b6060611241826000015160088151811061123457634e487b7160e01b600052603260045260246000fd5b6020026020010151611eef565b92915050565b6000611241826000015160028151811061127157634e487b7160e01b600052603260045260246000fd5b6020026020010151611d18565b60408051602081019091526000815281516060919015611241576000806112a6600086611f9a565b60f81c905060018114806112bd57508060ff166003145b15611399576001855160026112d29190612f4e565b6112dc9190612f6d565b67ffffffffffffffff81111561130257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561132c576020820181803683370190505b509250600061133c600187611f9a565b9050808460008151811061136057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192505061140b565b6002855160026113a99190612f4e565b6113b39190612f6d565b67ffffffffffffffff8111156113d957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611403576020820181803683370190505b509250600091505b60ff82165b835181101561149b5761143a61142960ff851683612f6d565b611434906002612dc4565b87611f9a565b84828151811061145a57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061149381612fd7565b915050611410565b50505092915050565b6000611241826000015160098151811061127157634e487b7160e01b600052603260045260246000fd5b6114f260405180606001604052806060815260200160608152602001600081525090565b61151a826000015160068151811061123457634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261155081612037565b156115655761155e81611dbd565b8252611620565b6020820151805160009061157b90600190612f6d565b67ffffffffffffffff8111156115a157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115cb576020820181803683370190505b5090506000808360210191508260200190506115e982828551612071565b604080518082018252600080825260209182015281518083019092528451825280850190820152611619906111f0565b8652505050505b611629836114a4565b604083015250919050565b604080516080810182526000918101828152606080830193909352815260208101919091526000611690836000015160038151811061168357634e487b7160e01b600052603260045260246000fd5b6020026020010151611dbd565b8360400151815181106116b357634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016116d783611dbd565b90529392505050565b6000611241826020015160008151811061170a57634e487b7160e01b600052603260045260246000fd5b60200260200101516120eb565b6000611241826000015160058151811061127157634e487b7160e01b600052603260045260246000fd5b6060611241826000015160078151811061123457634e487b7160e01b600052603260045260246000fd5b60008061179f8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006117ac82611dbd565b9050606080856000806117be8b61127e565b90508051600014156117da576000975050505050505050611a8a565b60005b8651811015611a8157815183111561180057600098505050505050505050611a8a565b61183087828151811061182357634e487b7160e01b600052603260045260246000fd5b6020026020010151612105565b95508580519060200120841461185157600098505050505050505050611a8a565b61187487828151811061168357634e487b7160e01b600052603260045260246000fd5b94508451601114156119735781518314156118e4578c805190602001206118b58660108151811061123457634e487b7160e01b600052603260045260246000fd5b8051906020012014156118d357600198505050505050505050611a8a565b600098505050505050505050611a8a565b600082848151811061190657634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561192b5760009950505050505050505050611a8a565b61195e868260ff168151811061195157634e487b7160e01b600052603260045260246000fd5b6020026020010151612194565b945061196b600185612dc4565b935050611a6f565b8451600214156118d35760006119ad6119a68760008151811061123457634e487b7160e01b600052603260045260246000fd5b84866121c2565b83519091506119bc8286612dc4565b1415611a1f578d805190602001206119ee8760018151811061123457634e487b7160e01b600052603260045260246000fd5b805190602001201415611a0d5760019950505050505050505050611a8a565b60009950505050505050505050611a8a565b80611a365760009950505050505050505050611a8a565b611a408185612dc4565b9350611a668660018151811061195157634e487b7160e01b600052603260045260246000fd5b9450611a6f9050565b80611a7981612fd7565b9150506117dd565b50505050505050505b949350505050565b6000611241826000015160038151811061127157634e487b7160e01b600052603260045260246000fd5b6000611241826000015160048151811061127157634e487b7160e01b600052603260045260246000fd5b6000611241826000015160008151811061127157634e487b7160e01b600052603260045260246000fd5b6060611241826000015160018151811061123457634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b158015611ba057600080fd5b505afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190612a8b565b5093505092509250611c2f828b611bef9190612f6d565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612327565b611c7b5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016103ce565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611cca846020015160018151811061168357634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611d0857634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611d2d57508151602110155b611d3657600080fd5b6000611d45836020015161249d565b90506000818460000151611d599190612f6d565b9050600080838660200151611d6e9190612dc4565b9050805191506020831015611d8a57826020036101000a820491505b50949350505050565b6060611241826020015160028151811061123457634e487b7160e01b600052603260045260246000fd5b6060611dc882612037565b611dd157600080fd5b6000611ddc83612522565b905060008167ffffffffffffffff811115611e0757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e4c57816020015b6040805180820190915260008082526020820152815260200190600190039081611e255790505b5090506000611e5e856020015161249d565b8560200151611e6d9190612dc4565b90506000805b84811015611ee457611e84836125a5565b9150604051806040016040528083815260200184815250848281518110611ebb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611ed08284612dc4565b925080611edc81612fd7565b915050611e73565b509195945050505050565b8051606090611efd57600080fd5b6000611f0c836020015161249d565b90506000818460000151611f209190612f6d565b905060008167ffffffffffffffff811115611f4b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f75576020820181803683370190505b5090506000816020019050611d8a848760200151611f939190612dc4565b8285612667565b6000611fa7600284612ff2565b15611fef57601082611fba600286612e04565b81518110611fd857634e487b7160e01b600052603260045260246000fd5b0160200151611fea919060f81c613006565b61202d565b601082611ffd600286612e04565b8151811061201b57634e487b7160e01b600052603260045260246000fd5b016020015161202d919060f81c612e18565b60f81b9392505050565b805160009061204857506000610fc7565b6020820151805160001a9060c082101561206757600092505050610fc7565b5060019392505050565b8061207b576120e6565b602081106120b35782518252612092602084612dc4565b925061209f602083612dc4565b91506120ac602082612f6d565b905061207b565b600060016120c2836020612f6d565b6120ce90610100612e80565b6120d89190612f6d565b845184518216911916178352505b505050565b80516000906015146120fc57600080fd5b61124182611d18565b60606000826000015167ffffffffffffffff81111561213457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561215e576020820181803683370190505b509050805160001415612172579050610fc7565b600081602001905061218d8460200151828660000151612667565b5092915050565b80516000906021146121a557600080fd5b600080836020015160016121b99190612dc4565b51949350505050565b600080806121cf8661127e565b90506000815167ffffffffffffffff8111156121fb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612225576020820181803683370190505b509050845b82516122369087612dc4565b8110156122f557600087828151811061225f57634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836122948985612f6d565b815181106122b257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806122ed90612fd7565b91505061222a565b50808051906020012082805190602001201415612315578151925061231a565b600092505b50909150505b9392505050565b6000602082516123379190612ff2565b156123845760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e67746800000000000000000000000060448201526064016103ce565b6000602083516123949190612e04565b90506123a1816002612e80565b85106123ef5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f20626967000000000000000000000060448201526064016103ce565b60008660205b8551811161248f5785810151925061240e600289612ff2565b612443576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150612470565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b61247b600289612e04565b9750612488602082612dc4565b90506123f5565b509094149695505050505050565b8051600090811a60808110156124b7576000915050610fc7565b60b88110806124d2575060c081108015906124d2575060f881105b156124e1576001915050610fc7565b60c0811015612516576124f6600160b8612f84565b6125039060ff1682612f6d565b61250e906001612dc4565b915050610fc7565b6124f6600160f8612f84565b805160009061253357506000610fc7565b600080612543846020015161249d565b84602001516125529190612dc4565b905060008460000151856020015161256a9190612dc4565b90505b8082101561259c5761257e826125a5565b6125889083612dc4565b91508261259481612fd7565b93505061256d565b50909392505050565b80516000908190811a60808110156125c0576001915061218d565b60b88110156125e6576125d4608082612f6d565b6125df906001612dc4565b915061218d565b60c08110156126135760b78103600185019450806020036101000a8551046001820181019350505061218d565b60f8811015612627576125d460c082612f6d565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b80612671576120e6565b602081106126a95782518252612688602084612dc4565b9250612695602083612dc4565b91506126a2602082612f6d565b9050612671565b806120b3576120e6565b600082601f8301126126c3578081fd5b813560206126d86126d383612d78565b612d47565b82815281810190858301838502870184018810156126f4578586fd5b855b85811015612712578135845292840192908401906001016126f6565b5090979650505050505050565b600082601f83011261272f578081fd5b8151602061273f6126d383612d78565b828152818101908583018385028701840188101561275b578586fd5b855b858110156127125781518452928401929084019060010161275d565b600082601f830112612789578081fd5b81356127976126d382612d9c565b8181528460208386010111156127ab578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126127d5578081fd5b81516127e36126d382612d9c565b8181528460208386010111156127f7578283fd5b611a8a826020830160208701612fa7565b803563ffffffff81168114610fc757600080fd5b803560ff81168114610fc757600080fd5b60006020828403121561283e578081fd5b81356123208161306a565b600080600080600060a08688031215612860578081fd5b855161286b8161306a565b602087015190955067ffffffffffffffff80821115612888578283fd5b61289489838a0161271f565b955060408801519150808211156128a9578283fd5b6128b589838a0161271f565b945060608801519150808211156128ca578283fd5b6128d689838a0161271f565b935060808801519150808211156128eb578283fd5b506128f8888289016127c5565b9150509295509295909350565b60008060008060006080868803121561291c578081fd5b85356129278161306a565b945060208601356129378161306a565b935060408601359250606086013567ffffffffffffffff8082111561295a578283fd5b818801915088601f83011261296d578283fd5b81358181111561297b578384fd5b89602082850101111561298c578384fd5b9699959850939650602001949392505050565b600080600080600060a086880312156129b6578081fd5b85356129c18161306a565b9450602086013567ffffffffffffffff808211156129dd578283fd5b6129e989838a016126b3565b955060408801359150808211156129fe578283fd5b612a0a89838a016126b3565b94506060880135915080821115612a1f578283fd5b612a2b89838a016126b3565b93506080880135915080821115612a40578283fd5b506128f888828901612779565b600060a08284031215612a5e578081fd5b8260a083011115612a6d578081fd5b50919050565b600060208284031215612a84578081fd5b5035919050565b600080600080600060a08688031215612aa2578283fd5b855194506020860151935060408601519250606086015191506080860151612ac98161306a565b809150509295509295909350565b600060208284031215612ae8578081fd5b813567ffffffffffffffff811115612afe578182fd5b611a8a84828501612779565b600060208284031215612b1b578081fd5b815167ffffffffffffffff811115612b31578182fd5b611a8a848285016127c5565b600060208284031215612b4e578081fd5b61232082612808565b600060208284031215612b68578081fd5b6123208261281c565b60008060408385031215612b83578182fd5b612b8c8361281c565b9150612b9a60208401612808565b90509250929050565b6000815180845260208085019450808401835b83811015612bd257815187529582019590820190600101612bb6565b509495945050505050565b60008151808452612bf5816020860160208601612fa7565b601f01601f19169290920160200192915050565b60008482528351612c21816020850160208801612fa7565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525060c06040830152612c6260c0830187612ba3565b8281036060840152612c748187612ba3565b90508281036080840152612c888186612ba3565b905082810360a0840152611c7b8185612bdd565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a0830152612cda60c0830184612bdd565b98975050505050505050565b60006001600160a01b038416825260406020830152611a8a6040830184612bdd565b60006001600160a01b038716825285602083015284604083015283606083015260a06080830152612d3c60a0830184612bdd565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d7057612d70613054565b604052919050565b600067ffffffffffffffff821115612d9257612d92613054565b5060209081020190565b600067ffffffffffffffff821115612db657612db6613054565b50601f01601f191660200190565b60008219821115612dd757612dd7613028565b500190565b600063ffffffff808316818516808303821115612dfb57612dfb613028565b01949350505050565b600082612e1357612e1361303e565b500490565b600060ff831680612e2b57612e2b61303e565b8060ff84160491505092915050565b80825b6001808611612e4c5750612e77565b818704821115612e5e57612e5e613028565b80861615612e6b57918102915b9490941c938002612e3d565b94509492505050565b60006123206000198484600082612e9957506001612320565b81612ea657506000612320565b8160018114612ebc5760028114612ec657612ef3565b6001915050612320565b60ff841115612ed757612ed7613028565b6001841b915084821115612eed57612eed613028565b50612320565b5060208310610133831016604e8410600b8410161715612f26575081810a83811115612f2157612f21613028565b612320565b612f338484846001612e3a565b808604821115612f4557612f45613028565b02949350505050565b6000816000190483118215151615612f6857612f68613028565b500290565b600082821015612f7f57612f7f613028565b500390565b600060ff821660ff841680821015612f9e57612f9e613028565b90039392505050565b60005b83811015612fc2578181015183820152602001612faa565b83811115612fd1576000848401525b50505050565b6000600019821415612feb57612feb613028565b5060010190565b6000826130015761300161303e565b500690565b600060ff8316806130195761301961303e565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461050957600080fdfea2646970667358221220f0f29ae848cd960c51dafabf35e075c944600d3c96e3b4a83fe4e407ecbf33ed64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638bfd7d65116100b2578063c0857ba011610081578063de9b771f11610066578063de9b771f1461033f578063f2fde38b14610352578063f953cec71461036557610136565b8063c0857ba014610319578063c4d168d61461032c57610136565b80638bfd7d65146102ba5780638da5cb5b146102e2578063972c4928146102f3578063aea4e49e1461030657610136565b80631f2d00651161010957806321f599f2116100ee57806321f599f214610244578063607f2d421461027f578063715018a6146102b257610136565b80631f2d00651461020657806321642b181461023157610136565b8063068d0cb11461013b5780630e161578146101505780630e387de614610163578063150b7a021461019d575b600080fd5b61014e610149366004612b3d565b610378565b005b61014e61015e366004612a4d565b61045a565b61018a7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6040519081526020015b60405180910390f35b6101d56101ab366004612905565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610194565b600554610219906001600160a01b031681565b6040516001600160a01b039091168152602001610194565b61014e61023f366004612b71565b61050c565b61026a610252366004612b57565b60066020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610194565b6102a261028d366004612a73565b60036020526000908152604090205460ff1681565b6040519015158152602001610194565b61014e610574565b60055461026a9074010000000000000000000000000000000000000000900463ffffffff1681565b6004546001600160a01b0316610219565b600254610219906001600160a01b031681565b61014e61031436600461282d565b610625565b600154610219906001600160a01b031681565b61014e61033a36600461299f565b6106d3565b600054610219906001600160a01b031681565b61014e61036036600461282d565b610a23565b61014e610373366004612ad7565b610b62565b6004546001600160a01b031633146103d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600580547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8416908102919091179091556040519081527f59750b13637aff7a39455c6fb86108b91deab78a6d1046f7bd72cfdfae2f4d909060200160405180910390a150565b6004546001600160a01b031633146104b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ce565b6104d560018260005b6020020160208101906104d09190612b3d565b610b78565b6104e260038260016104bd565b6104ef60068260026104bd565b6104fc600c8260036104bd565b61050960188260046104bd565b50565b6004546001600160a01b031633146105665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ce565b6105708282610b78565b5050565b6004546001600160a01b031633146105ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ce565b6004546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36004805473ffffffffffffffffffffffffffffffffffffffff19169055565b6002546001600160a01b0316156106a45760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084016103ce565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b825184511480156106e5575081518351145b6107315760405162461bcd60e51b815260206004820152601060248201527f6c323a20696e76616c696420646174610000000000000000000000000000000060448201526064016103ce565b6005546040517feaa5e0670000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063eaa5e0679061078490339030908990899089908990600401612c36565b600060405180830381600087803b15801561079e57600080fd5b505af11580156107b2573d6000803e3d6000fd5b505050506000805b855181101561082957600660008783815181106107e757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff168252810191909152604001600020546108159063ffffffff1683612ddc565b91508061082181612fd7565b9150506107ba565b5060055463ffffffff7401000000000000000000000000000000000000000090910481169082161061089d5760405162461bcd60e51b815260206004820152601860248201527f4578636565647320676173206c696d6974206f6e204c322e000000000000000060448201526064016103ce565b60005b8551811015610a1a576000878783815181106108cc57634e487b7160e01b600052603260045260246000fd5b60200260200101518784815181106108f457634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061091c57634e487b7160e01b600052603260045260246000fd5b602002602001015187604051602001610939959493929190612d08565b604051602081830303815290604052905061095381610bf7565b7f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb18888848151811061099557634e487b7160e01b600052603260045260246000fd5b60200260200101518885815181106109bd57634e487b7160e01b600052603260045260246000fd5b60200260200101518886815181106109e557634e487b7160e01b600052603260045260246000fd5b6020026020010151886040516109ff959493929190612d08565b60405180910390a15080610a1281612fd7565b9150506108a0565b50505050505050565b6004546001600160a01b03163314610a7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ce565b6001600160a01b038116610af95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103ce565b6004546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610b6d82610c7b565b905061057081610fcc565b60ff821660008181526006602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff86169081179091558251938452908301527ffc6e32fc7effd308d33dfd4879e53051d8b83cb5d4b7826ff3e38473c0e57dd9910160405180910390a15050565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610c46929116908590600401612ce6565b600060405180830381600087803b158015610c6057600080fd5b505af1158015610c74573d6000803e3d6000fd5b5050505050565b60606000610c88836111ab565b90506000610c958261120a565b90506000610ca283611247565b9050600081610cb08461127e565b610cb9866114a4565b604051602001610ccb93929190612c09565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610d685760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f535345440000000000000000000000000000000000000000000000000000000060648201526084016103ce565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610da8856114ce565b90506000610db582611634565b9050610dc0816116e0565b6002546001600160a01b03908116911614610e435760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c00000000000000000000000000000000000000000000000000000060648201526084016103ce565b6000610e4e87611717565b9050610e6e610e5e846020015190565b87610e688a611741565b8461176b565b610ee05760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f46000000000000000000000000000000000000000000000000000000000060648201526084016103ce565b610f0e85610eed89611a92565b610ef68a611abc565b84610f008c611ae6565b610f098d611b10565b611b3a565b506000610f1a83611c88565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610f50610f4b836000611cd2565b611d18565b14610f9d5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016103ce565b6000610fa884611d93565b806020019051810190610fbb9190612b0a565b99505050505050505050505b919050565b600080600080600085806020019051810190610fe89190612849565b9450945094509450945060005b8351811015610a1a5760055485516001600160a01b03909116906338bb305a903090899089908690811061103957634e487b7160e01b600052603260045260246000fd5b602002602001015188868151811061106157634e487b7160e01b600052603260045260246000fd5b602002602001015188878151811061108957634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518763ffffffff1660e01b81526004016110b396959493929190612c9c565b600060405180830381600087803b1580156110cd57600080fd5b505af11580156110e1573d6000803e3d6000fd5b505050507f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e8686838151811061112757634e487b7160e01b600052603260045260246000fd5b602002602001015186848151811061114f57634e487b7160e01b600052603260045260246000fd5b602002602001015186858151811061117757634e487b7160e01b600052603260045260246000fd5b602002602001015186604051611191959493929190612d08565b60405180910390a1806111a381612fd7565b915050610ff5565b60408051602081019091526060815260006111f56111f08460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611dbd565b60408051602081019091529081529392505050565b6060611241826000015160088151811061123457634e487b7160e01b600052603260045260246000fd5b6020026020010151611eef565b92915050565b6000611241826000015160028151811061127157634e487b7160e01b600052603260045260246000fd5b6020026020010151611d18565b60408051602081019091526000815281516060919015611241576000806112a6600086611f9a565b60f81c905060018114806112bd57508060ff166003145b15611399576001855160026112d29190612f4e565b6112dc9190612f6d565b67ffffffffffffffff81111561130257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561132c576020820181803683370190505b509250600061133c600187611f9a565b9050808460008151811061136057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192505061140b565b6002855160026113a99190612f4e565b6113b39190612f6d565b67ffffffffffffffff8111156113d957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611403576020820181803683370190505b509250600091505b60ff82165b835181101561149b5761143a61142960ff851683612f6d565b611434906002612dc4565b87611f9a565b84828151811061145a57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061149381612fd7565b915050611410565b50505092915050565b6000611241826000015160098151811061127157634e487b7160e01b600052603260045260246000fd5b6114f260405180606001604052806060815260200160608152602001600081525090565b61151a826000015160068151811061123457634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261155081612037565b156115655761155e81611dbd565b8252611620565b6020820151805160009061157b90600190612f6d565b67ffffffffffffffff8111156115a157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115cb576020820181803683370190505b5090506000808360210191508260200190506115e982828551612071565b604080518082018252600080825260209182015281518083019092528451825280850190820152611619906111f0565b8652505050505b611629836114a4565b604083015250919050565b604080516080810182526000918101828152606080830193909352815260208101919091526000611690836000015160038151811061168357634e487b7160e01b600052603260045260246000fd5b6020026020010151611dbd565b8360400151815181106116b357634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016116d783611dbd565b90529392505050565b6000611241826020015160008151811061170a57634e487b7160e01b600052603260045260246000fd5b60200260200101516120eb565b6000611241826000015160058151811061127157634e487b7160e01b600052603260045260246000fd5b6060611241826000015160078151811061123457634e487b7160e01b600052603260045260246000fd5b60008061179f8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006117ac82611dbd565b9050606080856000806117be8b61127e565b90508051600014156117da576000975050505050505050611a8a565b60005b8651811015611a8157815183111561180057600098505050505050505050611a8a565b61183087828151811061182357634e487b7160e01b600052603260045260246000fd5b6020026020010151612105565b95508580519060200120841461185157600098505050505050505050611a8a565b61187487828151811061168357634e487b7160e01b600052603260045260246000fd5b94508451601114156119735781518314156118e4578c805190602001206118b58660108151811061123457634e487b7160e01b600052603260045260246000fd5b8051906020012014156118d357600198505050505050505050611a8a565b600098505050505050505050611a8a565b600082848151811061190657634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561192b5760009950505050505050505050611a8a565b61195e868260ff168151811061195157634e487b7160e01b600052603260045260246000fd5b6020026020010151612194565b945061196b600185612dc4565b935050611a6f565b8451600214156118d35760006119ad6119a68760008151811061123457634e487b7160e01b600052603260045260246000fd5b84866121c2565b83519091506119bc8286612dc4565b1415611a1f578d805190602001206119ee8760018151811061123457634e487b7160e01b600052603260045260246000fd5b805190602001201415611a0d5760019950505050505050505050611a8a565b60009950505050505050505050611a8a565b80611a365760009950505050505050505050611a8a565b611a408185612dc4565b9350611a668660018151811061195157634e487b7160e01b600052603260045260246000fd5b9450611a6f9050565b80611a7981612fd7565b9150506117dd565b50505050505050505b949350505050565b6000611241826000015160038151811061127157634e487b7160e01b600052603260045260246000fd5b6000611241826000015160048151811061127157634e487b7160e01b600052603260045260246000fd5b6000611241826000015160008151811061127157634e487b7160e01b600052603260045260246000fd5b6060611241826000015160018151811061123457634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b158015611ba057600080fd5b505afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190612a8b565b5093505092509250611c2f828b611bef9190612f6d565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612327565b611c7b5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016103ce565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611cca846020015160018151811061168357634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611d0857634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611d2d57508151602110155b611d3657600080fd5b6000611d45836020015161249d565b90506000818460000151611d599190612f6d565b9050600080838660200151611d6e9190612dc4565b9050805191506020831015611d8a57826020036101000a820491505b50949350505050565b6060611241826020015160028151811061123457634e487b7160e01b600052603260045260246000fd5b6060611dc882612037565b611dd157600080fd5b6000611ddc83612522565b905060008167ffffffffffffffff811115611e0757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e4c57816020015b6040805180820190915260008082526020820152815260200190600190039081611e255790505b5090506000611e5e856020015161249d565b8560200151611e6d9190612dc4565b90506000805b84811015611ee457611e84836125a5565b9150604051806040016040528083815260200184815250848281518110611ebb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611ed08284612dc4565b925080611edc81612fd7565b915050611e73565b509195945050505050565b8051606090611efd57600080fd5b6000611f0c836020015161249d565b90506000818460000151611f209190612f6d565b905060008167ffffffffffffffff811115611f4b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f75576020820181803683370190505b5090506000816020019050611d8a848760200151611f939190612dc4565b8285612667565b6000611fa7600284612ff2565b15611fef57601082611fba600286612e04565b81518110611fd857634e487b7160e01b600052603260045260246000fd5b0160200151611fea919060f81c613006565b61202d565b601082611ffd600286612e04565b8151811061201b57634e487b7160e01b600052603260045260246000fd5b016020015161202d919060f81c612e18565b60f81b9392505050565b805160009061204857506000610fc7565b6020820151805160001a9060c082101561206757600092505050610fc7565b5060019392505050565b8061207b576120e6565b602081106120b35782518252612092602084612dc4565b925061209f602083612dc4565b91506120ac602082612f6d565b905061207b565b600060016120c2836020612f6d565b6120ce90610100612e80565b6120d89190612f6d565b845184518216911916178352505b505050565b80516000906015146120fc57600080fd5b61124182611d18565b60606000826000015167ffffffffffffffff81111561213457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561215e576020820181803683370190505b509050805160001415612172579050610fc7565b600081602001905061218d8460200151828660000151612667565b5092915050565b80516000906021146121a557600080fd5b600080836020015160016121b99190612dc4565b51949350505050565b600080806121cf8661127e565b90506000815167ffffffffffffffff8111156121fb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612225576020820181803683370190505b509050845b82516122369087612dc4565b8110156122f557600087828151811061225f57634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836122948985612f6d565b815181106122b257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806122ed90612fd7565b91505061222a565b50808051906020012082805190602001201415612315578151925061231a565b600092505b50909150505b9392505050565b6000602082516123379190612ff2565b156123845760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e67746800000000000000000000000060448201526064016103ce565b6000602083516123949190612e04565b90506123a1816002612e80565b85106123ef5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f20626967000000000000000000000060448201526064016103ce565b60008660205b8551811161248f5785810151925061240e600289612ff2565b612443576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150612470565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b61247b600289612e04565b9750612488602082612dc4565b90506123f5565b509094149695505050505050565b8051600090811a60808110156124b7576000915050610fc7565b60b88110806124d2575060c081108015906124d2575060f881105b156124e1576001915050610fc7565b60c0811015612516576124f6600160b8612f84565b6125039060ff1682612f6d565b61250e906001612dc4565b915050610fc7565b6124f6600160f8612f84565b805160009061253357506000610fc7565b600080612543846020015161249d565b84602001516125529190612dc4565b905060008460000151856020015161256a9190612dc4565b90505b8082101561259c5761257e826125a5565b6125889083612dc4565b91508261259481612fd7565b93505061256d565b50909392505050565b80516000908190811a60808110156125c0576001915061218d565b60b88110156125e6576125d4608082612f6d565b6125df906001612dc4565b915061218d565b60c08110156126135760b78103600185019450806020036101000a8551046001820181019350505061218d565b60f8811015612627576125d460c082612f6d565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b80612671576120e6565b602081106126a95782518252612688602084612dc4565b9250612695602083612dc4565b91506126a2602082612f6d565b9050612671565b806120b3576120e6565b600082601f8301126126c3578081fd5b813560206126d86126d383612d78565b612d47565b82815281810190858301838502870184018810156126f4578586fd5b855b85811015612712578135845292840192908401906001016126f6565b5090979650505050505050565b600082601f83011261272f578081fd5b8151602061273f6126d383612d78565b828152818101908583018385028701840188101561275b578586fd5b855b858110156127125781518452928401929084019060010161275d565b600082601f830112612789578081fd5b81356127976126d382612d9c565b8181528460208386010111156127ab578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126127d5578081fd5b81516127e36126d382612d9c565b8181528460208386010111156127f7578283fd5b611a8a826020830160208701612fa7565b803563ffffffff81168114610fc757600080fd5b803560ff81168114610fc757600080fd5b60006020828403121561283e578081fd5b81356123208161306a565b600080600080600060a08688031215612860578081fd5b855161286b8161306a565b602087015190955067ffffffffffffffff80821115612888578283fd5b61289489838a0161271f565b955060408801519150808211156128a9578283fd5b6128b589838a0161271f565b945060608801519150808211156128ca578283fd5b6128d689838a0161271f565b935060808801519150808211156128eb578283fd5b506128f8888289016127c5565b9150509295509295909350565b60008060008060006080868803121561291c578081fd5b85356129278161306a565b945060208601356129378161306a565b935060408601359250606086013567ffffffffffffffff8082111561295a578283fd5b818801915088601f83011261296d578283fd5b81358181111561297b578384fd5b89602082850101111561298c578384fd5b9699959850939650602001949392505050565b600080600080600060a086880312156129b6578081fd5b85356129c18161306a565b9450602086013567ffffffffffffffff808211156129dd578283fd5b6129e989838a016126b3565b955060408801359150808211156129fe578283fd5b612a0a89838a016126b3565b94506060880135915080821115612a1f578283fd5b612a2b89838a016126b3565b93506080880135915080821115612a40578283fd5b506128f888828901612779565b600060a08284031215612a5e578081fd5b8260a083011115612a6d578081fd5b50919050565b600060208284031215612a84578081fd5b5035919050565b600080600080600060a08688031215612aa2578283fd5b855194506020860151935060408601519250606086015191506080860151612ac98161306a565b809150509295509295909350565b600060208284031215612ae8578081fd5b813567ffffffffffffffff811115612afe578182fd5b611a8a84828501612779565b600060208284031215612b1b578081fd5b815167ffffffffffffffff811115612b31578182fd5b611a8a848285016127c5565b600060208284031215612b4e578081fd5b61232082612808565b600060208284031215612b68578081fd5b6123208261281c565b60008060408385031215612b83578182fd5b612b8c8361281c565b9150612b9a60208401612808565b90509250929050565b6000815180845260208085019450808401835b83811015612bd257815187529582019590820190600101612bb6565b509495945050505050565b60008151808452612bf5816020860160208601612fa7565b601f01601f19169290920160200192915050565b60008482528351612c21816020850160208801612fa7565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525060c06040830152612c6260c0830187612ba3565b8281036060840152612c748187612ba3565b90508281036080840152612c888186612ba3565b905082810360a0840152611c7b8185612bdd565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a0830152612cda60c0830184612bdd565b98975050505050505050565b60006001600160a01b038416825260406020830152611a8a6040830184612bdd565b60006001600160a01b038716825285602083015284604083015283606083015260a06080830152612d3c60a0830184612bdd565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d7057612d70613054565b604052919050565b600067ffffffffffffffff821115612d9257612d92613054565b5060209081020190565b600067ffffffffffffffff821115612db657612db6613054565b50601f01601f191660200190565b60008219821115612dd757612dd7613028565b500190565b600063ffffffff808316818516808303821115612dfb57612dfb613028565b01949350505050565b600082612e1357612e1361303e565b500490565b600060ff831680612e2b57612e2b61303e565b8060ff84160491505092915050565b80825b6001808611612e4c5750612e77565b818704821115612e5e57612e5e613028565b80861615612e6b57918102915b9490941c938002612e3d565b94509492505050565b60006123206000198484600082612e9957506001612320565b81612ea657506000612320565b8160018114612ebc5760028114612ec657612ef3565b6001915050612320565b60ff841115612ed757612ed7613028565b6001841b915084821115612eed57612eed613028565b50612320565b5060208310610133831016604e8410600b8410161715612f26575081810a83811115612f2157612f21613028565b612320565b612f338484846001612e3a565b808604821115612f4557612f45613028565b02949350505050565b6000816000190483118215151615612f6857612f68613028565b500290565b600082821015612f7f57612f7f613028565b500390565b600060ff821660ff841680821015612f9e57612f9e613028565b90039392505050565b60005b83811015612fc2578181015183820152602001612faa565b83811115612fd1576000848401525b50505050565b6000600019821415612feb57612feb613028565b5060010190565b6000826130015761300161303e565b500690565b600060ff8316806130195761301961303e565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461050957600080fdfea2646970667358221220f0f29ae848cd960c51dafabf35e075c944600d3c96e3b4a83fe4e407ecbf33ed64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5070,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)5020"
      },
      {
        "astId": 5073,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)5038"
      },
      {
        "astId": 5075,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5079,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 31041,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "rootToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 31044,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "maxGasLimitOnL2",
        "offset": 20,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 31048,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "gasLimits",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint8,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)5038": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)5020": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}